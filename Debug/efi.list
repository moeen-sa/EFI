
efi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08007458  08007458  00008458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077a0  080077a0  0000920c  2**0
                  CONTENTS
  4 .ARM          00000008  080077a0  080077a0  000087a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077a8  080077a8  0000920c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077a8  080077a8  000087a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077ac  080077ac  000087ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  080077b0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000920c  2**0
                  CONTENTS
 10 .bss          00005d70  2000020c  2000020c  0000920c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005f7c  20005f7c  0000920c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000920c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aede  00000000  00000000  0000923c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000398a  00000000  00000000  0002411a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001648  00000000  00000000  00027aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001146  00000000  00000000  000290f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003fb4  00000000  00000000  0002a236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001983d  00000000  00000000  0002e1ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3091  00000000  00000000  00047a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012aab8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006128  00000000  00000000  0012aafc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00130c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007440 	.word	0x08007440

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	08007440 	.word	0x08007440

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 ff64 	bl	80013a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f8ce 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f9d2 	bl	8000884 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e0:	f000 f9b0 	bl	8000844 <MX_DMA_Init>
  MX_ADC1_Init();
 80004e4:	f000 f932 	bl	800074c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80004e8:	f000 f982 	bl	80007f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)rpm_value, 5); //16bit we selected!(half of a word)
 80004ec:	2205      	movs	r2, #5
 80004ee:	4939      	ldr	r1, [pc, #228]	@ (80005d4 <main+0x104>)
 80004f0:	4839      	ldr	r0, [pc, #228]	@ (80005d8 <main+0x108>)
 80004f2:	f000 ffdb 	bl	80014ac <HAL_ADC_Start_DMA>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f6:	f004 f8ad 	bl	8004654 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004fa:	4a38      	ldr	r2, [pc, #224]	@ (80005dc <main+0x10c>)
 80004fc:	2100      	movs	r1, #0
 80004fe:	4838      	ldr	r0, [pc, #224]	@ (80005e0 <main+0x110>)
 8000500:	f004 f8f2 	bl	80046e8 <osThreadNew>
 8000504:	4603      	mov	r3, r0
 8000506:	4a37      	ldr	r2, [pc, #220]	@ (80005e4 <main+0x114>)
 8000508:	6013      	str	r3, [r2, #0]

  /* creation of get_input */
  get_inputHandle = osThreadNew(get_input_function, NULL, &get_input_attributes);
 800050a:	4a37      	ldr	r2, [pc, #220]	@ (80005e8 <main+0x118>)
 800050c:	2100      	movs	r1, #0
 800050e:	4837      	ldr	r0, [pc, #220]	@ (80005ec <main+0x11c>)
 8000510:	f004 f8ea 	bl	80046e8 <osThreadNew>
 8000514:	4603      	mov	r3, r0
 8000516:	4a36      	ldr	r2, [pc, #216]	@ (80005f0 <main+0x120>)
 8000518:	6013      	str	r3, [r2, #0]

  /* creation of calculate_efi */
  calculate_efiHandle = osThreadNew(calculate_efi_func, NULL, &calculate_efi_attributes);
 800051a:	4a36      	ldr	r2, [pc, #216]	@ (80005f4 <main+0x124>)
 800051c:	2100      	movs	r1, #0
 800051e:	4836      	ldr	r0, [pc, #216]	@ (80005f8 <main+0x128>)
 8000520:	f004 f8e2 	bl	80046e8 <osThreadNew>
 8000524:	4603      	mov	r3, r0
 8000526:	4a35      	ldr	r2, [pc, #212]	@ (80005fc <main+0x12c>)
 8000528:	6013      	str	r3, [r2, #0]

  /* creation of display_data */
  display_dataHandle = osThreadNew(display_data_func, NULL, &display_data_attributes);
 800052a:	4a35      	ldr	r2, [pc, #212]	@ (8000600 <main+0x130>)
 800052c:	2100      	movs	r1, #0
 800052e:	4835      	ldr	r0, [pc, #212]	@ (8000604 <main+0x134>)
 8000530:	f004 f8da 	bl	80046e8 <osThreadNew>
 8000534:	4603      	mov	r3, r0
 8000536:	4a34      	ldr	r2, [pc, #208]	@ (8000608 <main+0x138>)
 8000538:	6013      	str	r3, [r2, #0]

  /* creation of set_output */
  set_outputHandle = osThreadNew(set_output_func, NULL, &set_output_attributes);
 800053a:	4a34      	ldr	r2, [pc, #208]	@ (800060c <main+0x13c>)
 800053c:	2100      	movs	r1, #0
 800053e:	4834      	ldr	r0, [pc, #208]	@ (8000610 <main+0x140>)
 8000540:	f004 f8d2 	bl	80046e8 <osThreadNew>
 8000544:	4603      	mov	r3, r0
 8000546:	4a33      	ldr	r2, [pc, #204]	@ (8000614 <main+0x144>)
 8000548:	6013      	str	r3, [r2, #0]

  /* creation of inject1_control */
  inject1_controlHandle = osThreadNew(inject1_control_function, NULL, &inject1_control_attributes);
 800054a:	4a33      	ldr	r2, [pc, #204]	@ (8000618 <main+0x148>)
 800054c:	2100      	movs	r1, #0
 800054e:	4833      	ldr	r0, [pc, #204]	@ (800061c <main+0x14c>)
 8000550:	f004 f8ca 	bl	80046e8 <osThreadNew>
 8000554:	4603      	mov	r3, r0
 8000556:	4a32      	ldr	r2, [pc, #200]	@ (8000620 <main+0x150>)
 8000558:	6013      	str	r3, [r2, #0]

  /* creation of inject2_control */
  inject2_controlHandle = osThreadNew(inject2_control_function, NULL, &inject2_control_attributes);
 800055a:	4a32      	ldr	r2, [pc, #200]	@ (8000624 <main+0x154>)
 800055c:	2100      	movs	r1, #0
 800055e:	4832      	ldr	r0, [pc, #200]	@ (8000628 <main+0x158>)
 8000560:	f004 f8c2 	bl	80046e8 <osThreadNew>
 8000564:	4603      	mov	r3, r0
 8000566:	4a31      	ldr	r2, [pc, #196]	@ (800062c <main+0x15c>)
 8000568:	6013      	str	r3, [r2, #0]

  /* creation of inject3_control */
  inject3_controlHandle = osThreadNew(inject3_control_function, NULL, &inject3_control_attributes);
 800056a:	4a31      	ldr	r2, [pc, #196]	@ (8000630 <main+0x160>)
 800056c:	2100      	movs	r1, #0
 800056e:	4831      	ldr	r0, [pc, #196]	@ (8000634 <main+0x164>)
 8000570:	f004 f8ba 	bl	80046e8 <osThreadNew>
 8000574:	4603      	mov	r3, r0
 8000576:	4a30      	ldr	r2, [pc, #192]	@ (8000638 <main+0x168>)
 8000578:	6013      	str	r3, [r2, #0]

  /* creation of inject4_control */
  inject4_controlHandle = osThreadNew(inject4_control_function, NULL, &inject4_control_attributes);
 800057a:	4a30      	ldr	r2, [pc, #192]	@ (800063c <main+0x16c>)
 800057c:	2100      	movs	r1, #0
 800057e:	4830      	ldr	r0, [pc, #192]	@ (8000640 <main+0x170>)
 8000580:	f004 f8b2 	bl	80046e8 <osThreadNew>
 8000584:	4603      	mov	r3, r0
 8000586:	4a2f      	ldr	r2, [pc, #188]	@ (8000644 <main+0x174>)
 8000588:	6013      	str	r3, [r2, #0]

  /* creation of spark1_control */
  spark1_controlHandle = osThreadNew(spark1_control_function, NULL, &spark1_control_attributes);
 800058a:	4a2f      	ldr	r2, [pc, #188]	@ (8000648 <main+0x178>)
 800058c:	2100      	movs	r1, #0
 800058e:	482f      	ldr	r0, [pc, #188]	@ (800064c <main+0x17c>)
 8000590:	f004 f8aa 	bl	80046e8 <osThreadNew>
 8000594:	4603      	mov	r3, r0
 8000596:	4a2e      	ldr	r2, [pc, #184]	@ (8000650 <main+0x180>)
 8000598:	6013      	str	r3, [r2, #0]

  /* creation of spark2_control */
  spark2_controlHandle = osThreadNew(spark2_control_function, NULL, &spark2_control_attributes);
 800059a:	4a2e      	ldr	r2, [pc, #184]	@ (8000654 <main+0x184>)
 800059c:	2100      	movs	r1, #0
 800059e:	482e      	ldr	r0, [pc, #184]	@ (8000658 <main+0x188>)
 80005a0:	f004 f8a2 	bl	80046e8 <osThreadNew>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a2d      	ldr	r2, [pc, #180]	@ (800065c <main+0x18c>)
 80005a8:	6013      	str	r3, [r2, #0]

  /* creation of spark3_control */
  spark3_controlHandle = osThreadNew(spark3_control_function, NULL, &spark3_control_attributes);
 80005aa:	4a2d      	ldr	r2, [pc, #180]	@ (8000660 <main+0x190>)
 80005ac:	2100      	movs	r1, #0
 80005ae:	482d      	ldr	r0, [pc, #180]	@ (8000664 <main+0x194>)
 80005b0:	f004 f89a 	bl	80046e8 <osThreadNew>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a2c      	ldr	r2, [pc, #176]	@ (8000668 <main+0x198>)
 80005b8:	6013      	str	r3, [r2, #0]

  /* creation of spark4_control */
  spark4_controlHandle = osThreadNew(spark4_control_function, NULL, &spark4_control_attributes);
 80005ba:	4a2c      	ldr	r2, [pc, #176]	@ (800066c <main+0x19c>)
 80005bc:	2100      	movs	r1, #0
 80005be:	482c      	ldr	r0, [pc, #176]	@ (8000670 <main+0x1a0>)
 80005c0:	f004 f892 	bl	80046e8 <osThreadNew>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a2b      	ldr	r2, [pc, #172]	@ (8000674 <main+0x1a4>)
 80005c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005ca:	f004 f867 	bl	800469c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ce:	bf00      	nop
 80005d0:	e7fd      	b.n	80005ce <main+0xfe>
 80005d2:	bf00      	nop
 80005d4:	200013f0 	.word	0x200013f0
 80005d8:	20000228 	.word	0x20000228
 80005dc:	08007550 	.word	0x08007550
 80005e0:	08000bf5 	.word	0x08000bf5
 80005e4:	20000318 	.word	0x20000318
 80005e8:	08007574 	.word	0x08007574
 80005ec:	08000c05 	.word	0x08000c05
 80005f0:	2000031c 	.word	0x2000031c
 80005f4:	08007598 	.word	0x08007598
 80005f8:	08000c21 	.word	0x08000c21
 80005fc:	20000320 	.word	0x20000320
 8000600:	080075bc 	.word	0x080075bc
 8000604:	08000c75 	.word	0x08000c75
 8000608:	200013c8 	.word	0x200013c8
 800060c:	080075e0 	.word	0x080075e0
 8000610:	08000da9 	.word	0x08000da9
 8000614:	200013cc 	.word	0x200013cc
 8000618:	08007604 	.word	0x08007604
 800061c:	08000db9 	.word	0x08000db9
 8000620:	200013d0 	.word	0x200013d0
 8000624:	08007628 	.word	0x08007628
 8000628:	08000dfd 	.word	0x08000dfd
 800062c:	200013d4 	.word	0x200013d4
 8000630:	0800764c 	.word	0x0800764c
 8000634:	08000e41 	.word	0x08000e41
 8000638:	200013d8 	.word	0x200013d8
 800063c:	08007670 	.word	0x08007670
 8000640:	08000e85 	.word	0x08000e85
 8000644:	200013dc 	.word	0x200013dc
 8000648:	08007694 	.word	0x08007694
 800064c:	08000ec9 	.word	0x08000ec9
 8000650:	200013e0 	.word	0x200013e0
 8000654:	080076b8 	.word	0x080076b8
 8000658:	08000f0d 	.word	0x08000f0d
 800065c:	200013e4 	.word	0x200013e4
 8000660:	080076dc 	.word	0x080076dc
 8000664:	08000f51 	.word	0x08000f51
 8000668:	200013e8 	.word	0x200013e8
 800066c:	08007700 	.word	0x08007700
 8000670:	08000f95 	.word	0x08000f95
 8000674:	200013ec 	.word	0x200013ec

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	@ 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	@ 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f006 fdf2 	bl	8007270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b28      	ldr	r3, [pc, #160]	@ (8000744 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	4a27      	ldr	r2, [pc, #156]	@ (8000744 <SystemClock_Config+0xcc>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ac:	4b25      	ldr	r3, [pc, #148]	@ (8000744 <SystemClock_Config+0xcc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b22      	ldr	r3, [pc, #136]	@ (8000748 <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a21      	ldr	r2, [pc, #132]	@ (8000748 <SystemClock_Config+0xd0>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <SystemClock_Config+0xd0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d4:	2302      	movs	r3, #2
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006dc:	2310      	movs	r3, #16
 80006de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e8:	2308      	movs	r3, #8
 80006ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006ec:	23a8      	movs	r3, #168	@ 0xa8
 80006ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0320 	add.w	r3, r7, #32
 80006fc:	4618      	mov	r0, r3
 80006fe:	f002 f8dd 	bl	80028bc <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000708:	f000 fc78 	bl	8000ffc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000710:	2302      	movs	r3, #2
 8000712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000718:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800071c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000722:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2105      	movs	r1, #5
 800072a:	4618      	mov	r0, r3
 800072c:	f002 fb3e 	bl	8002dac <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000736:	f000 fc61 	bl	8000ffc <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	@ 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800075e:	4b21      	ldr	r3, [pc, #132]	@ (80007e4 <MX_ADC1_Init+0x98>)
 8000760:	4a21      	ldr	r2, [pc, #132]	@ (80007e8 <MX_ADC1_Init+0x9c>)
 8000762:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000764:	4b1f      	ldr	r3, [pc, #124]	@ (80007e4 <MX_ADC1_Init+0x98>)
 8000766:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800076a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076c:	4b1d      	ldr	r3, [pc, #116]	@ (80007e4 <MX_ADC1_Init+0x98>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000772:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <MX_ADC1_Init+0x98>)
 8000774:	2201      	movs	r2, #1
 8000776:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000778:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <MX_ADC1_Init+0x98>)
 800077a:	2201      	movs	r2, #1
 800077c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800077e:	4b19      	ldr	r3, [pc, #100]	@ (80007e4 <MX_ADC1_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000786:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <MX_ADC1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078c:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <MX_ADC1_Init+0x98>)
 800078e:	4a17      	ldr	r2, [pc, #92]	@ (80007ec <MX_ADC1_Init+0xa0>)
 8000790:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000792:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_ADC1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <MX_ADC1_Init+0x98>)
 800079a:	2201      	movs	r2, #1
 800079c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_ADC1_Init+0x98>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_ADC1_Init+0x98>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ac:	480d      	ldr	r0, [pc, #52]	@ (80007e4 <MX_ADC1_Init+0x98>)
 80007ae:	f000 fe39 	bl	8001424 <HAL_ADC_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007b8:	f000 fc20 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007bc:	2300      	movs	r3, #0
 80007be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80007c4:	2306      	movs	r3, #6
 80007c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	4619      	mov	r1, r3
 80007cc:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_ADC1_Init+0x98>)
 80007ce:	f000 ff9b 	bl	8001708 <HAL_ADC_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007d8:	f000 fc10 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000228 	.word	0x20000228
 80007e8:	40012000 	.word	0x40012000
 80007ec:	0f000001 	.word	0x0f000001

080007f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	@ (8000840 <MX_USART1_UART_Init+0x50>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 8000828:	f002 ff74 	bl	8003714 <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000832:	f000 fbe3 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200002d0 	.word	0x200002d0
 8000840:	40011000 	.word	0x40011000

08000844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_DMA_Init+0x3c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a0b      	ldr	r2, [pc, #44]	@ (8000880 <MX_DMA_Init+0x3c>)
 8000854:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_DMA_Init+0x3c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2105      	movs	r1, #5
 800086a:	2038      	movs	r0, #56	@ 0x38
 800086c:	f001 faa4 	bl	8001db8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000870:	2038      	movs	r0, #56	@ 0x38
 8000872:	f001 fabd 	bl	8001df0 <HAL_NVIC_EnableIRQ>

}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	@ 0x28
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b38      	ldr	r3, [pc, #224]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a37      	ldr	r2, [pc, #220]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008a4:	f043 0310 	orr.w	r3, r3, #16
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b35      	ldr	r3, [pc, #212]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0310 	and.w	r3, r3, #16
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b31      	ldr	r3, [pc, #196]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a30      	ldr	r2, [pc, #192]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a29      	ldr	r2, [pc, #164]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b27      	ldr	r3, [pc, #156]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a22      	ldr	r2, [pc, #136]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008f8:	f043 0308 	orr.w	r3, r3, #8
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <MX_GPIO_Init+0xfc>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0308 	and.w	r3, r3, #8
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, inject1_Pin|spark1_Pin|inject2_Pin|spark2_Pin
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 41ff 	mov.w	r1, #32640	@ 0x7f80
 8000910:	481c      	ldr	r0, [pc, #112]	@ (8000984 <MX_GPIO_Init+0x100>)
 8000912:	f001 ff9f 	bl	8002854 <HAL_GPIO_WritePin>
                          |inject3_Pin|spark3_Pin|inject4_Pin|spark4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000916:	2200      	movs	r2, #0
 8000918:	f64f 4180 	movw	r1, #64640	@ 0xfc80
 800091c:	481a      	ldr	r0, [pc, #104]	@ (8000988 <MX_GPIO_Init+0x104>)
 800091e:	f001 ff99 	bl	8002854 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : map_inc_Pin map_dec_Pin */
  GPIO_InitStruct.Pin = map_inc_Pin|map_dec_Pin;
 8000922:	2330      	movs	r3, #48	@ 0x30
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4813      	ldr	r0, [pc, #76]	@ (8000984 <MX_GPIO_Init+0x100>)
 8000936:	f001 fdd9 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : inject1_Pin spark1_Pin inject2_Pin spark2_Pin
                           inject3_Pin spark3_Pin inject4_Pin spark4_Pin */
  GPIO_InitStruct.Pin = inject1_Pin|spark1_Pin|inject2_Pin|spark2_Pin
 800093a:	f44f 43ff 	mov.w	r3, #32640	@ 0x7f80
 800093e:	617b      	str	r3, [r7, #20]
                          |inject3_Pin|spark3_Pin|inject4_Pin|spark4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	480c      	ldr	r0, [pc, #48]	@ (8000984 <MX_GPIO_Init+0x100>)
 8000954:	f001 fdca 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000958:	f64f 4380 	movw	r3, #64640	@ 0xfc80
 800095c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	@ (8000988 <MX_GPIO_Init+0x104>)
 8000972:	f001 fdbb 	bl	80024ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	@ 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40021000 	.word	0x40021000
 8000988:	40020c00 	.word	0x40020c00

0800098c <get_map>:

/* USER CODE BEGIN 4 */

void get_map(){
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0

	//current_map = (map_value[0] * 3.3) /4095;
	if(HAL_GPIO_ReadPin(map_inc_GPIO_Port, map_inc_Pin) == 0) //key pressed
 8000990:	2110      	movs	r1, #16
 8000992:	4814      	ldr	r0, [pc, #80]	@ (80009e4 <get_map+0x58>)
 8000994:	f001 ff46 	bl	8002824 <HAL_GPIO_ReadPin>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d105      	bne.n	80009aa <get_map+0x1e>
		current_map +=10;
 800099e:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <get_map+0x5c>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	330a      	adds	r3, #10
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <get_map+0x5c>)
 80009a8:	701a      	strb	r2, [r3, #0]
	if(current_map>100)
 80009aa:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <get_map+0x5c>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b64      	cmp	r3, #100	@ 0x64
 80009b0:	d902      	bls.n	80009b8 <get_map+0x2c>
		current_map=100;
 80009b2:	4b0d      	ldr	r3, [pc, #52]	@ (80009e8 <get_map+0x5c>)
 80009b4:	2264      	movs	r2, #100	@ 0x64
 80009b6:	701a      	strb	r2, [r3, #0]


	if(HAL_GPIO_ReadPin(map_inc_GPIO_Port, map_dec_Pin) == 0) //key pressed
 80009b8:	2120      	movs	r1, #32
 80009ba:	480a      	ldr	r0, [pc, #40]	@ (80009e4 <get_map+0x58>)
 80009bc:	f001 ff32 	bl	8002824 <HAL_GPIO_ReadPin>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d105      	bne.n	80009d2 <get_map+0x46>
			current_map -=10;
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <get_map+0x5c>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	3b0a      	subs	r3, #10
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <get_map+0x5c>)
 80009d0:	701a      	strb	r2, [r3, #0]
		if(current_map<20)
 80009d2:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <get_map+0x5c>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b13      	cmp	r3, #19
 80009d8:	d802      	bhi.n	80009e0 <get_map+0x54>
			current_map=20;
 80009da:	4b03      	ldr	r3, [pc, #12]	@ (80009e8 <get_map+0x5c>)
 80009dc:	2214      	movs	r2, #20
 80009de:	701a      	strb	r2, [r3, #0]
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40021000 	.word	0x40021000
 80009e8:	20000004 	.word	0x20000004

080009ec <spark_advance_timing>:

uint8_t spark_advance_timing(uint8_t map_input , uint16_t rpm){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	460a      	mov	r2, r1
 80009f6:	71fb      	strb	r3, [r7, #7]
 80009f8:	4613      	mov	r3, r2
 80009fa:	80bb      	strh	r3, [r7, #4]

	uint8_t rpm_index = rpm_vector_map(rpm);
 80009fc:	88bb      	ldrh	r3, [r7, #4]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 f85e 	bl	8000ac0 <rpm_vector_map>
 8000a04:	4603      	mov	r3, r0
 8000a06:	75fb      	strb	r3, [r7, #23]
	uint8_t map_index = map_vector_map(map_input);
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f8b4 	bl	8000b78 <map_vector_map>
 8000a10:	4603      	mov	r3, r0
 8000a12:	75bb      	strb	r3, [r7, #22]

	uint8_t spark_advance_degree = spark_advance[rpm_index][map_index];
 8000a14:	7dfa      	ldrb	r2, [r7, #23]
 8000a16:	7dbb      	ldrb	r3, [r7, #22]
 8000a18:	4914      	ldr	r1, [pc, #80]	@ (8000a6c <spark_advance_timing+0x80>)
 8000a1a:	0112      	lsls	r2, r2, #4
 8000a1c:	440a      	add	r2, r1
 8000a1e:	4413      	add	r3, r2
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	757b      	strb	r3, [r7, #21]

	float degree_to_time = ((float)spark_advance_degree /360 );
 8000a24:	7d7b      	ldrb	r3, [r7, #21]
 8000a26:	ee07 3a90 	vmov	s15, r3
 8000a2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a2e:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8000a70 <spark_advance_timing+0x84>
 8000a32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a36:	edc7 7a04 	vstr	s15, [r7, #16]

    uint8_t spark_advance_time = degree_to_time * (60000/rpm);
 8000a3a:	88bb      	ldrh	r3, [r7, #4]
 8000a3c:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000a40:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a44:	ee07 3a90 	vmov	s15, r3
 8000a48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a58:	edc7 7a00 	vstr	s15, [r7]
 8000a5c:	783b      	ldrb	r3, [r7, #0]
 8000a5e:	73fb      	strb	r3, [r7, #15]

	return spark_advance_time;
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	43b40000 	.word	0x43b40000

08000a74 <injection_timing>:

uint8_t injection_timing(uint8_t map_input , uint16_t rpm){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	460a      	mov	r2, r1
 8000a7e:	71fb      	strb	r3, [r7, #7]
 8000a80:	4613      	mov	r3, r2
 8000a82:	80bb      	strh	r3, [r7, #4]

	uint8_t rpm_index = rpm_vector_map(current_rpm);
 8000a84:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <injection_timing+0x44>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 f818 	bl	8000ac0 <rpm_vector_map>
 8000a90:	4603      	mov	r3, r0
 8000a92:	73fb      	strb	r3, [r7, #15]
	uint8_t map_index = map_vector_map(map_input);
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f86e 	bl	8000b78 <map_vector_map>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	73bb      	strb	r3, [r7, #14]

	return injection[rpm_index][map_index];
 8000aa0:	7bfa      	ldrb	r2, [r7, #15]
 8000aa2:	7bbb      	ldrb	r3, [r7, #14]
 8000aa4:	4905      	ldr	r1, [pc, #20]	@ (8000abc <injection_timing+0x48>)
 8000aa6:	0112      	lsls	r2, r2, #4
 8000aa8:	440a      	add	r2, r1
 8000aaa:	4413      	add	r3, r2
 8000aac:	781b      	ldrb	r3, [r3, #0]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	200000c8 	.word	0x200000c8

08000ac0 <rpm_vector_map>:

uint8_t rpm_vector_map(uint16_t rpm){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80fb      	strh	r3, [r7, #6]

	int min_value=0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]

	uint8_t result=0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	76fb      	strb	r3, [r7, #27]

	char data[5];

	min_value = abs(rpm - rpm_vector[0]);
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	4a26      	ldr	r2, [pc, #152]	@ (8000b70 <rpm_vector_map+0xb0>)
 8000ad6:	8812      	ldrh	r2, [r2, #0]
 8000ad8:	1a9b      	subs	r3, r3, r2
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	bfb8      	it	lt
 8000ade:	425b      	neglt	r3, r3
 8000ae0:	61fb      	str	r3, [r7, #28]

	result = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	76fb      	strb	r3, [r7, #27]

	for(int i=1; i<rpm_vector_size; i++){
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	e038      	b.n	8000b5e <rpm_vector_map+0x9e>

		if(abs(rpm - rpm_vector[i])< min_value){
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	4920      	ldr	r1, [pc, #128]	@ (8000b70 <rpm_vector_map+0xb0>)
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000af6:	1a9b      	subs	r3, r3, r2
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	bfb8      	it	lt
 8000afc:	425b      	neglt	r3, r3
 8000afe:	69fa      	ldr	r2, [r7, #28]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	dd0b      	ble.n	8000b1c <rpm_vector_map+0x5c>
			min_value = abs(rpm - rpm_vector[i]);
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	491a      	ldr	r1, [pc, #104]	@ (8000b70 <rpm_vector_map+0xb0>)
 8000b08:	697a      	ldr	r2, [r7, #20]
 8000b0a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000b0e:	1a9b      	subs	r3, r3, r2
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	bfb8      	it	lt
 8000b14:	425b      	neglt	r3, r3
 8000b16:	61fb      	str	r3, [r7, #28]
				result = i;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	76fb      	strb	r3, [r7, #27]

		}

		itoa(abs(rpm - rpm_vector[i]) , data , 10);
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	4914      	ldr	r1, [pc, #80]	@ (8000b70 <rpm_vector_map+0xb0>)
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000b26:	1a9b      	subs	r3, r3, r2
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	bfb8      	it	lt
 8000b2c:	425b      	neglt	r3, r3
 8000b2e:	f107 010c 	add.w	r1, r7, #12
 8000b32:	220a      	movs	r2, #10
 8000b34:	4618      	mov	r0, r3
 8000b36:	f006 fb57 	bl	80071e8 <itoa>
		strcat(data , "\n");
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fb46 	bl	80001d0 <strlen>
 8000b44:	4603      	mov	r3, r0
 8000b46:	461a      	mov	r2, r3
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4909      	ldr	r1, [pc, #36]	@ (8000b74 <rpm_vector_map+0xb4>)
 8000b50:	461a      	mov	r2, r3
 8000b52:	460b      	mov	r3, r1
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	8013      	strh	r3, [r2, #0]
	for(int i=1; i<rpm_vector_size; i++){
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	2b0a      	cmp	r3, #10
 8000b62:	ddc3      	ble.n	8000aec <rpm_vector_map+0x2c>
	//itoa(result , data , 10);
	//strcat(data , "\n");

	//HAL_UART_Transmit(&huart1, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);

	return result;
 8000b64:	7efb      	ldrb	r3, [r7, #27]

}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3720      	adds	r7, #32
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000194 	.word	0x20000194
 8000b74:	0800751c 	.word	0x0800751c

08000b78 <map_vector_map>:

uint8_t map_vector_map(uint8_t map){
 8000b78:	b480      	push	{r7}
 8000b7a:	b087      	sub	sp, #28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]

	int min_value=0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]

	uint8_t result=0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	74fb      	strb	r3, [r7, #19]

	min_value = abs(map - map_vector[0]);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	4a18      	ldr	r2, [pc, #96]	@ (8000bf0 <map_vector_map+0x78>)
 8000b8e:	7812      	ldrb	r2, [r2, #0]
 8000b90:	1a9b      	subs	r3, r3, r2
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	617b      	str	r3, [r7, #20]

	result = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	74fb      	strb	r3, [r7, #19]

	for(int i=1; i<map_vector_size; i++){
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	e01a      	b.n	8000bda <map_vector_map+0x62>

		if(abs(map - map_vector[i])< min_value){
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	4912      	ldr	r1, [pc, #72]	@ (8000bf0 <map_vector_map+0x78>)
 8000ba8:	68fa      	ldr	r2, [r7, #12]
 8000baa:	440a      	add	r2, r1
 8000bac:	7812      	ldrb	r2, [r2, #0]
 8000bae:	1a9b      	subs	r3, r3, r2
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	bfb8      	it	lt
 8000bb4:	425b      	neglt	r3, r3
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	dd0b      	ble.n	8000bd4 <map_vector_map+0x5c>
			min_value = abs(map - map_vector[i]);
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	490c      	ldr	r1, [pc, #48]	@ (8000bf0 <map_vector_map+0x78>)
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	440a      	add	r2, r1
 8000bc4:	7812      	ldrb	r2, [r2, #0]
 8000bc6:	1a9b      	subs	r3, r3, r2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	bfb8      	it	lt
 8000bcc:	425b      	neglt	r3, r3
 8000bce:	617b      	str	r3, [r7, #20]
				result = i;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	74fb      	strb	r3, [r7, #19]
	for(int i=1; i<map_vector_size; i++){
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2b0b      	cmp	r3, #11
 8000bde:	dde1      	ble.n	8000ba4 <map_vector_map+0x2c>
		}

	}

	return result;
 8000be0:	7cfb      	ldrb	r3, [r7, #19]

}
 8000be2:	4618      	mov	r0, r3
 8000be4:	371c      	adds	r7, #28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000188 	.word	0x20000188

08000bf4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f003 fe05 	bl	800480c <osDelay>
 8000c02:	e7fb      	b.n	8000bfc <StartDefaultTask+0x8>

08000c04 <get_input_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_get_input_function */
void get_input_function(void *argument)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN get_input_function */
  /* Infinite loop */
  for(;;)
  {
	 get_map();
 8000c0c:	f7ff febe 	bl	800098c <get_map>
   //  HAL_UART_Transmit(&huart1, (uint8_t *)"getinput\n", 10, HAL_MAX_DELAY);
	// HAL_Delay(500); //debouncing
     vTaskDelay(pdMS_TO_TICKS(100));
 8000c10:	2064      	movs	r0, #100	@ 0x64
 8000c12:	f004 fdb7 	bl	8005784 <vTaskDelay>
    osDelay(1);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f003 fdf8 	bl	800480c <osDelay>
	 get_map();
 8000c1c:	bf00      	nop
 8000c1e:	e7f5      	b.n	8000c0c <get_input_function+0x8>

08000c20 <calculate_efi_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_calculate_efi_func */
void calculate_efi_func(void *argument)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN calculate_efi_func */
  /* Infinite loop */
  for(;;)
  {
	current_spark = spark_advance_timing(current_map ,  rpm_value[0]);
 8000c28:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <calculate_efi_func+0x44>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4a0e      	ldr	r2, [pc, #56]	@ (8000c68 <calculate_efi_func+0x48>)
 8000c2e:	8812      	ldrh	r2, [r2, #0]
 8000c30:	4611      	mov	r1, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff feda 	bl	80009ec <spark_advance_timing>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <calculate_efi_func+0x4c>)
 8000c3e:	701a      	strb	r2, [r3, #0]

	current_inject = injection_timing(current_map , rpm_value[0]);
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <calculate_efi_func+0x44>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4a08      	ldr	r2, [pc, #32]	@ (8000c68 <calculate_efi_func+0x48>)
 8000c46:	8812      	ldrh	r2, [r2, #0]
 8000c48:	4611      	mov	r1, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff12 	bl	8000a74 <injection_timing>
 8000c50:	4603      	mov	r3, r0
 8000c52:	461a      	mov	r2, r3
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <calculate_efi_func+0x50>)
 8000c56:	701a      	strb	r2, [r3, #0]

    osDelay(1);
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f003 fdd7 	bl	800480c <osDelay>
	current_spark = spark_advance_timing(current_map ,  rpm_value[0]);
 8000c5e:	bf00      	nop
 8000c60:	e7e2      	b.n	8000c28 <calculate_efi_func+0x8>
 8000c62:	bf00      	nop
 8000c64:	20000004 	.word	0x20000004
 8000c68:	200013f0 	.word	0x200013f0
 8000c6c:	20001404 	.word	0x20001404
 8000c70:	20001405 	.word	0x20001405

08000c74 <display_data_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_display_data_func */
void display_data_func(void *argument)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08c      	sub	sp, #48	@ 0x30
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN display_data_func */
	    LCD16X2_Init(MyLCD);
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f003 fa13 	bl	80040a8 <LCD16X2_Init>
	    LCD16X2_Clear(MyLCD);
 8000c82:	2000      	movs	r0, #0
 8000c84:	f003 f990 	bl	8003fa8 <LCD16X2_Clear>
  for(;;)
  {
	       char rpm_string[10];
	       char map_string[10];

	       LCD16X2_Set_Cursor(MyLCD, 1, 1);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f003 f9cb 	bl	8004028 <LCD16X2_Set_Cursor>
	       LCD16X2_Write_String(MyLCD, "MAP:");
 8000c92:	493d      	ldr	r1, [pc, #244]	@ (8000d88 <display_data_func+0x114>)
 8000c94:	2000      	movs	r0, #0
 8000c96:	f003 fc79 	bl	800458c <LCD16X2_Write_String>

	       LCD16X2_Set_Cursor(MyLCD, 2, 1);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f003 f9c2 	bl	8004028 <LCD16X2_Set_Cursor>
	       LCD16X2_Write_String(MyLCD, "RPM:");
 8000ca4:	4939      	ldr	r1, [pc, #228]	@ (8000d8c <display_data_func+0x118>)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f003 fc70 	bl	800458c <LCD16X2_Write_String>

	       itoa(current_map ,map_string , 10);
 8000cac:	4b38      	ldr	r3, [pc, #224]	@ (8000d90 <display_data_func+0x11c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f107 0318 	add.w	r3, r7, #24
 8000cb6:	220a      	movs	r2, #10
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f006 fa95 	bl	80071e8 <itoa>
	       itoa(rpm_value[0] ,rpm_string , 10);
 8000cbe:	4b35      	ldr	r3, [pc, #212]	@ (8000d94 <display_data_func+0x120>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc8:	220a      	movs	r2, #10
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f006 fa8c 	bl	80071e8 <itoa>

	       LCD16X2_Set_Cursor(MyLCD, 2, 6);
 8000cd0:	2206      	movs	r2, #6
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f003 f9a7 	bl	8004028 <LCD16X2_Set_Cursor>
	       LCD16X2_Write_String(MyLCD, rpm_string);
 8000cda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cde:	4619      	mov	r1, r3
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f003 fc53 	bl	800458c <LCD16X2_Write_String>

	       LCD16X2_Set_Cursor(MyLCD, 1, 5);
 8000ce6:	2205      	movs	r2, #5
 8000ce8:	2101      	movs	r1, #1
 8000cea:	2000      	movs	r0, #0
 8000cec:	f003 f99c 	bl	8004028 <LCD16X2_Set_Cursor>
	       LCD16X2_Write_String(MyLCD, map_string);
 8000cf0:	f107 0318 	add.w	r3, r7, #24
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f003 fc48 	bl	800458c <LCD16X2_Write_String>
	    //  uint8_t res = spark_advance_timing(current_map , rpm_value[0]);

	    //  uint8_t res2 = injection_timing(current_map , rpm_value[0]);

	      char data[5];
	      itoa(current_inject ,data , 10);
 8000cfc:	4b26      	ldr	r3, [pc, #152]	@ (8000d98 <display_data_func+0x124>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	220a      	movs	r2, #10
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f006 fa6d 	bl	80071e8 <itoa>

	      char data2[5];
	  	   itoa(current_spark ,data2 , 10);
 8000d0e:	4b23      	ldr	r3, [pc, #140]	@ (8000d9c <display_data_func+0x128>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	220a      	movs	r2, #10
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f006 fa64 	bl	80071e8 <itoa>

	      LCD16X2_Set_Cursor(MyLCD, 2, 11);
 8000d20:	220b      	movs	r2, #11
 8000d22:	2102      	movs	r1, #2
 8000d24:	2000      	movs	r0, #0
 8000d26:	f003 f97f 	bl	8004028 <LCD16X2_Set_Cursor>
	      LCD16X2_Write_String(MyLCD, "IJ");
 8000d2a:	491d      	ldr	r1, [pc, #116]	@ (8000da0 <display_data_func+0x12c>)
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f003 fc2d 	bl	800458c <LCD16X2_Write_String>
	      LCD16X2_Set_Cursor(MyLCD, 2, 14);
 8000d32:	220e      	movs	r2, #14
 8000d34:	2102      	movs	r1, #2
 8000d36:	2000      	movs	r0, #0
 8000d38:	f003 f976 	bl	8004028 <LCD16X2_Set_Cursor>
	      LCD16X2_Write_String(MyLCD, data);
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	4619      	mov	r1, r3
 8000d42:	2000      	movs	r0, #0
 8000d44:	f003 fc22 	bl	800458c <LCD16X2_Write_String>

	      LCD16X2_Set_Cursor(MyLCD, 1, 9);
 8000d48:	2209      	movs	r2, #9
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f003 f96b 	bl	8004028 <LCD16X2_Set_Cursor>
	      LCD16X2_Write_String(MyLCD, "SP");
 8000d52:	4914      	ldr	r1, [pc, #80]	@ (8000da4 <display_data_func+0x130>)
 8000d54:	2000      	movs	r0, #0
 8000d56:	f003 fc19 	bl	800458c <LCD16X2_Write_String>
	      LCD16X2_Set_Cursor(MyLCD, 1, 13);
 8000d5a:	220d      	movs	r2, #13
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f003 f962 	bl	8004028 <LCD16X2_Set_Cursor>
	      LCD16X2_Write_String(MyLCD, data2);
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	4619      	mov	r1, r3
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f003 fc0e 	bl	800458c <LCD16X2_Write_String>

	      vTaskDelay(pdMS_TO_TICKS(500));
 8000d70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d74:	f004 fd06 	bl	8005784 <vTaskDelay>
	 	  LCD16X2_Clear(MyLCD);
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f003 f915 	bl	8003fa8 <LCD16X2_Clear>



    osDelay(1);
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f003 fd44 	bl	800480c <osDelay>
  {
 8000d84:	bf00      	nop
 8000d86:	e77f      	b.n	8000c88 <display_data_func+0x14>
 8000d88:	08007520 	.word	0x08007520
 8000d8c:	08007528 	.word	0x08007528
 8000d90:	20000004 	.word	0x20000004
 8000d94:	200013f0 	.word	0x200013f0
 8000d98:	20001405 	.word	0x20001405
 8000d9c:	20001404 	.word	0x20001404
 8000da0:	08007530 	.word	0x08007530
 8000da4:	08007534 	.word	0x08007534

08000da8 <set_output_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_set_output_func */
void set_output_func(void *argument)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN set_output_func */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000db0:	2001      	movs	r0, #1
 8000db2:	f003 fd2b 	bl	800480c <osDelay>
 8000db6:	e7fb      	b.n	8000db0 <set_output_func+0x8>

08000db8 <inject1_control_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_inject1_control_function */
void inject1_control_function(void *argument)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN inject1_control_function */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(inject1_GPIO_Port , inject1_Pin);
 8000dc0:	2180      	movs	r1, #128	@ 0x80
 8000dc2:	480b      	ldr	r0, [pc, #44]	@ (8000df0 <inject1_control_function+0x38>)
 8000dc4:	f001 fd5f 	bl	8002886 <HAL_GPIO_TogglePin>
	  vTaskDelay(pdMS_TO_TICKS(current_inject));
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <inject1_control_function+0x3c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd2:	fb02 f303 	mul.w	r3, r2, r3
 8000dd6:	4a08      	ldr	r2, [pc, #32]	@ (8000df8 <inject1_control_function+0x40>)
 8000dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ddc:	099b      	lsrs	r3, r3, #6
 8000dde:	4618      	mov	r0, r3
 8000de0:	f004 fcd0 	bl	8005784 <vTaskDelay>
    osDelay(1);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f003 fd11 	bl	800480c <osDelay>
	  HAL_GPIO_TogglePin(inject1_GPIO_Port , inject1_Pin);
 8000dea:	bf00      	nop
 8000dec:	e7e8      	b.n	8000dc0 <inject1_control_function+0x8>
 8000dee:	bf00      	nop
 8000df0:	40021000 	.word	0x40021000
 8000df4:	20001405 	.word	0x20001405
 8000df8:	10624dd3 	.word	0x10624dd3

08000dfc <inject2_control_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_inject2_control_function */
void inject2_control_function(void *argument)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN inject2_control_function */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(inject2_GPIO_Port , inject2_Pin);
 8000e04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e08:	480a      	ldr	r0, [pc, #40]	@ (8000e34 <inject2_control_function+0x38>)
 8000e0a:	f001 fd3c 	bl	8002886 <HAL_GPIO_TogglePin>
	  vTaskDelay(pdMS_TO_TICKS(current_inject));
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e38 <inject2_control_function+0x3c>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e18:	fb02 f303 	mul.w	r3, r2, r3
 8000e1c:	4a07      	ldr	r2, [pc, #28]	@ (8000e3c <inject2_control_function+0x40>)
 8000e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e22:	099b      	lsrs	r3, r3, #6
 8000e24:	4618      	mov	r0, r3
 8000e26:	f004 fcad 	bl	8005784 <vTaskDelay>
    osDelay(1);
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f003 fcee 	bl	800480c <osDelay>
	  HAL_GPIO_TogglePin(inject2_GPIO_Port , inject2_Pin);
 8000e30:	bf00      	nop
 8000e32:	e7e7      	b.n	8000e04 <inject2_control_function+0x8>
 8000e34:	40021000 	.word	0x40021000
 8000e38:	20001405 	.word	0x20001405
 8000e3c:	10624dd3 	.word	0x10624dd3

08000e40 <inject3_control_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_inject3_control_function */
void inject3_control_function(void *argument)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN inject3_control_function */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(inject3_GPIO_Port , inject3_Pin);
 8000e48:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e4c:	480a      	ldr	r0, [pc, #40]	@ (8000e78 <inject3_control_function+0x38>)
 8000e4e:	f001 fd1a 	bl	8002886 <HAL_GPIO_TogglePin>
	  vTaskDelay(pdMS_TO_TICKS(current_inject));
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <inject3_control_function+0x3c>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5c:	fb02 f303 	mul.w	r3, r2, r3
 8000e60:	4a07      	ldr	r2, [pc, #28]	@ (8000e80 <inject3_control_function+0x40>)
 8000e62:	fba2 2303 	umull	r2, r3, r2, r3
 8000e66:	099b      	lsrs	r3, r3, #6
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f004 fc8b 	bl	8005784 <vTaskDelay>
    osDelay(1);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f003 fccc 	bl	800480c <osDelay>
	  HAL_GPIO_TogglePin(inject3_GPIO_Port , inject3_Pin);
 8000e74:	bf00      	nop
 8000e76:	e7e7      	b.n	8000e48 <inject3_control_function+0x8>
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	20001405 	.word	0x20001405
 8000e80:	10624dd3 	.word	0x10624dd3

08000e84 <inject4_control_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_inject4_control_function */
void inject4_control_function(void *argument)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN inject4_control_function */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(inject4_GPIO_Port , inject4_Pin);
 8000e8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e90:	480a      	ldr	r0, [pc, #40]	@ (8000ebc <inject4_control_function+0x38>)
 8000e92:	f001 fcf8 	bl	8002886 <HAL_GPIO_TogglePin>
	  vTaskDelay(pdMS_TO_TICKS(current_inject));
 8000e96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <inject4_control_function+0x3c>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ea0:	fb02 f303 	mul.w	r3, r2, r3
 8000ea4:	4a07      	ldr	r2, [pc, #28]	@ (8000ec4 <inject4_control_function+0x40>)
 8000ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eaa:	099b      	lsrs	r3, r3, #6
 8000eac:	4618      	mov	r0, r3
 8000eae:	f004 fc69 	bl	8005784 <vTaskDelay>
    osDelay(1);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f003 fcaa 	bl	800480c <osDelay>
	  HAL_GPIO_TogglePin(inject4_GPIO_Port , inject4_Pin);
 8000eb8:	bf00      	nop
 8000eba:	e7e7      	b.n	8000e8c <inject4_control_function+0x8>
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	20001405 	.word	0x20001405
 8000ec4:	10624dd3 	.word	0x10624dd3

08000ec8 <spark1_control_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_spark1_control_function */
void spark1_control_function(void *argument)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN spark1_control_function */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(spark1_GPIO_Port , spark1_Pin);
 8000ed0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ed4:	480a      	ldr	r0, [pc, #40]	@ (8000f00 <spark1_control_function+0x38>)
 8000ed6:	f001 fcd6 	bl	8002886 <HAL_GPIO_TogglePin>
	  vTaskDelay(pdMS_TO_TICKS(current_spark));
 8000eda:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <spark1_control_function+0x3c>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee4:	fb02 f303 	mul.w	r3, r2, r3
 8000ee8:	4a07      	ldr	r2, [pc, #28]	@ (8000f08 <spark1_control_function+0x40>)
 8000eea:	fba2 2303 	umull	r2, r3, r2, r3
 8000eee:	099b      	lsrs	r3, r3, #6
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f004 fc47 	bl	8005784 <vTaskDelay>
    osDelay(1);
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f003 fc88 	bl	800480c <osDelay>
	  HAL_GPIO_TogglePin(spark1_GPIO_Port , spark1_Pin);
 8000efc:	bf00      	nop
 8000efe:	e7e7      	b.n	8000ed0 <spark1_control_function+0x8>
 8000f00:	40021000 	.word	0x40021000
 8000f04:	20001404 	.word	0x20001404
 8000f08:	10624dd3 	.word	0x10624dd3

08000f0c <spark2_control_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_spark2_control_function */
void spark2_control_function(void *argument)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN spark2_control_function */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(spark2_GPIO_Port , spark2_Pin);
 8000f14:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f18:	480a      	ldr	r0, [pc, #40]	@ (8000f44 <spark2_control_function+0x38>)
 8000f1a:	f001 fcb4 	bl	8002886 <HAL_GPIO_TogglePin>
	  vTaskDelay(pdMS_TO_TICKS(current_spark));
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <spark2_control_function+0x3c>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f28:	fb02 f303 	mul.w	r3, r2, r3
 8000f2c:	4a07      	ldr	r2, [pc, #28]	@ (8000f4c <spark2_control_function+0x40>)
 8000f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f32:	099b      	lsrs	r3, r3, #6
 8000f34:	4618      	mov	r0, r3
 8000f36:	f004 fc25 	bl	8005784 <vTaskDelay>
    osDelay(1);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f003 fc66 	bl	800480c <osDelay>
	  HAL_GPIO_TogglePin(spark2_GPIO_Port , spark2_Pin);
 8000f40:	bf00      	nop
 8000f42:	e7e7      	b.n	8000f14 <spark2_control_function+0x8>
 8000f44:	40021000 	.word	0x40021000
 8000f48:	20001404 	.word	0x20001404
 8000f4c:	10624dd3 	.word	0x10624dd3

08000f50 <spark3_control_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_spark3_control_function */
void spark3_control_function(void *argument)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN spark3_control_function */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(spark2_GPIO_Port , spark2_Pin);
 8000f58:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f5c:	480a      	ldr	r0, [pc, #40]	@ (8000f88 <spark3_control_function+0x38>)
 8000f5e:	f001 fc92 	bl	8002886 <HAL_GPIO_TogglePin>
	  vTaskDelay(pdMS_TO_TICKS(current_spark));
 8000f62:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <spark3_control_function+0x3c>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6c:	fb02 f303 	mul.w	r3, r2, r3
 8000f70:	4a07      	ldr	r2, [pc, #28]	@ (8000f90 <spark3_control_function+0x40>)
 8000f72:	fba2 2303 	umull	r2, r3, r2, r3
 8000f76:	099b      	lsrs	r3, r3, #6
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f004 fc03 	bl	8005784 <vTaskDelay>
    osDelay(1);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f003 fc44 	bl	800480c <osDelay>
	  HAL_GPIO_TogglePin(spark2_GPIO_Port , spark2_Pin);
 8000f84:	bf00      	nop
 8000f86:	e7e7      	b.n	8000f58 <spark3_control_function+0x8>
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	20001404 	.word	0x20001404
 8000f90:	10624dd3 	.word	0x10624dd3

08000f94 <spark4_control_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_spark4_control_function */
void spark4_control_function(void *argument)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN spark4_control_function */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(spark4_GPIO_Port , spark4_Pin);
 8000f9c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fa0:	480a      	ldr	r0, [pc, #40]	@ (8000fcc <spark4_control_function+0x38>)
 8000fa2:	f001 fc70 	bl	8002886 <HAL_GPIO_TogglePin>
	  vTaskDelay(pdMS_TO_TICKS(current_spark));
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <spark4_control_function+0x3c>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb0:	fb02 f303 	mul.w	r3, r2, r3
 8000fb4:	4a07      	ldr	r2, [pc, #28]	@ (8000fd4 <spark4_control_function+0x40>)
 8000fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fba:	099b      	lsrs	r3, r3, #6
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f004 fbe1 	bl	8005784 <vTaskDelay>
    osDelay(1);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f003 fc22 	bl	800480c <osDelay>
	  HAL_GPIO_TogglePin(spark4_GPIO_Port , spark4_Pin);
 8000fc8:	bf00      	nop
 8000fca:	e7e7      	b.n	8000f9c <spark4_control_function+0x8>
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	20001404 	.word	0x20001404
 8000fd4:	10624dd3 	.word	0x10624dd3

08000fd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d101      	bne.n	8000fee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fea:	f000 f9fb 	bl	80013e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40010000 	.word	0x40010000

08000ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001000:	b672      	cpsid	i
}
 8001002:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <Error_Handler+0x8>

08001008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	4b12      	ldr	r3, [pc, #72]	@ (800105c <HAL_MspInit+0x54>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	4a11      	ldr	r2, [pc, #68]	@ (800105c <HAL_MspInit+0x54>)
 8001018:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800101c:	6453      	str	r3, [r2, #68]	@ 0x44
 800101e:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <HAL_MspInit+0x54>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	4b0b      	ldr	r3, [pc, #44]	@ (800105c <HAL_MspInit+0x54>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <HAL_MspInit+0x54>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001038:	6413      	str	r3, [r2, #64]	@ 0x40
 800103a:	4b08      	ldr	r3, [pc, #32]	@ (800105c <HAL_MspInit+0x54>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	210f      	movs	r1, #15
 800104a:	f06f 0001 	mvn.w	r0, #1
 800104e:	f000 feb3 	bl	8001db8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800

08001060 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a2f      	ldr	r2, [pc, #188]	@ (800113c <HAL_ADC_MspInit+0xdc>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d157      	bne.n	8001132 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	4b2e      	ldr	r3, [pc, #184]	@ (8001140 <HAL_ADC_MspInit+0xe0>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108a:	4a2d      	ldr	r2, [pc, #180]	@ (8001140 <HAL_ADC_MspInit+0xe0>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001090:	6453      	str	r3, [r2, #68]	@ 0x44
 8001092:	4b2b      	ldr	r3, [pc, #172]	@ (8001140 <HAL_ADC_MspInit+0xe0>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b27      	ldr	r3, [pc, #156]	@ (8001140 <HAL_ADC_MspInit+0xe0>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a26      	ldr	r2, [pc, #152]	@ (8001140 <HAL_ADC_MspInit+0xe0>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b24      	ldr	r3, [pc, #144]	@ (8001140 <HAL_ADC_MspInit+0xe0>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = rpm_input_Pin;
 80010ba:	2301      	movs	r3, #1
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010be:	2303      	movs	r3, #3
 80010c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(rpm_input_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	481d      	ldr	r0, [pc, #116]	@ (8001144 <HAL_ADC_MspInit+0xe4>)
 80010ce:	f001 fa0d 	bl	80024ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001148 <HAL_ADC_MspInit+0xe8>)
 80010d4:	4a1d      	ldr	r2, [pc, #116]	@ (800114c <HAL_ADC_MspInit+0xec>)
 80010d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <HAL_ADC_MspInit+0xe8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010de:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <HAL_ADC_MspInit+0xe8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e4:	4b18      	ldr	r3, [pc, #96]	@ (8001148 <HAL_ADC_MspInit+0xe8>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010ea:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <HAL_ADC_MspInit+0xe8>)
 80010ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010f2:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <HAL_ADC_MspInit+0xe8>)
 80010f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010fa:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <HAL_ADC_MspInit+0xe8>)
 80010fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001100:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001102:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <HAL_ADC_MspInit+0xe8>)
 8001104:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001108:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800110a:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <HAL_ADC_MspInit+0xe8>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001110:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <HAL_ADC_MspInit+0xe8>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001116:	480c      	ldr	r0, [pc, #48]	@ (8001148 <HAL_ADC_MspInit+0xe8>)
 8001118:	f000 fe78 	bl	8001e0c <HAL_DMA_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001122:	f7ff ff6b 	bl	8000ffc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a07      	ldr	r2, [pc, #28]	@ (8001148 <HAL_ADC_MspInit+0xe8>)
 800112a:	639a      	str	r2, [r3, #56]	@ 0x38
 800112c:	4a06      	ldr	r2, [pc, #24]	@ (8001148 <HAL_ADC_MspInit+0xe8>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	@ 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40012000 	.word	0x40012000
 8001140:	40023800 	.word	0x40023800
 8001144:	40020000 	.word	0x40020000
 8001148:	20000270 	.word	0x20000270
 800114c:	40026410 	.word	0x40026410

08001150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a19      	ldr	r2, [pc, #100]	@ (80011d4 <HAL_UART_MspInit+0x84>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d12c      	bne.n	80011cc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <HAL_UART_MspInit+0x88>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117a:	4a17      	ldr	r2, [pc, #92]	@ (80011d8 <HAL_UART_MspInit+0x88>)
 800117c:	f043 0310 	orr.w	r3, r3, #16
 8001180:	6453      	str	r3, [r2, #68]	@ 0x44
 8001182:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <HAL_UART_MspInit+0x88>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <HAL_UART_MspInit+0x88>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a10      	ldr	r2, [pc, #64]	@ (80011d8 <HAL_UART_MspInit+0x88>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <HAL_UART_MspInit+0x88>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011aa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80011ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011bc:	2307      	movs	r3, #7
 80011be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <HAL_UART_MspInit+0x8c>)
 80011c8:	f001 f990 	bl	80024ec <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	@ 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40011000 	.word	0x40011000
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000

080011e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08c      	sub	sp, #48	@ 0x30
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	4b2f      	ldr	r3, [pc, #188]	@ (80012b4 <HAL_InitTick+0xd4>)
 80011f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f8:	4a2e      	ldr	r2, [pc, #184]	@ (80012b4 <HAL_InitTick+0xd4>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001200:	4b2c      	ldr	r3, [pc, #176]	@ (80012b4 <HAL_InitTick+0xd4>)
 8001202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800120c:	f107 020c 	add.w	r2, r7, #12
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f001 ffa8 	bl	800316c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800121c:	f001 ff92 	bl	8003144 <HAL_RCC_GetPCLK2Freq>
 8001220:	4603      	mov	r3, r0
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001228:	4a23      	ldr	r2, [pc, #140]	@ (80012b8 <HAL_InitTick+0xd8>)
 800122a:	fba2 2303 	umull	r2, r3, r2, r3
 800122e:	0c9b      	lsrs	r3, r3, #18
 8001230:	3b01      	subs	r3, #1
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001234:	4b21      	ldr	r3, [pc, #132]	@ (80012bc <HAL_InitTick+0xdc>)
 8001236:	4a22      	ldr	r2, [pc, #136]	@ (80012c0 <HAL_InitTick+0xe0>)
 8001238:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800123a:	4b20      	ldr	r3, [pc, #128]	@ (80012bc <HAL_InitTick+0xdc>)
 800123c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001240:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001242:	4a1e      	ldr	r2, [pc, #120]	@ (80012bc <HAL_InitTick+0xdc>)
 8001244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001246:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001248:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <HAL_InitTick+0xdc>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b1b      	ldr	r3, [pc, #108]	@ (80012bc <HAL_InitTick+0xdc>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001254:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <HAL_InitTick+0xdc>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800125a:	4818      	ldr	r0, [pc, #96]	@ (80012bc <HAL_InitTick+0xdc>)
 800125c:	f001 ffb8 	bl	80031d0 <HAL_TIM_Base_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001266:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800126a:	2b00      	cmp	r3, #0
 800126c:	d11b      	bne.n	80012a6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800126e:	4813      	ldr	r0, [pc, #76]	@ (80012bc <HAL_InitTick+0xdc>)
 8001270:	f002 f808 	bl	8003284 <HAL_TIM_Base_Start_IT>
 8001274:	4603      	mov	r3, r0
 8001276:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800127a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800127e:	2b00      	cmp	r3, #0
 8001280:	d111      	bne.n	80012a6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001282:	2019      	movs	r0, #25
 8001284:	f000 fdb4 	bl	8001df0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b0f      	cmp	r3, #15
 800128c:	d808      	bhi.n	80012a0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800128e:	2200      	movs	r2, #0
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	2019      	movs	r0, #25
 8001294:	f000 fd90 	bl	8001db8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001298:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <HAL_InitTick+0xe4>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e002      	b.n	80012a6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3730      	adds	r7, #48	@ 0x30
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	431bde83 	.word	0x431bde83
 80012bc:	20001408 	.word	0x20001408
 80012c0:	40010000 	.word	0x40010000
 80012c4:	200001b0 	.word	0x200001b0

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <NMI_Handler+0x4>

080012d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <MemManage_Handler+0x4>

080012e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <BusFault_Handler+0x4>

080012e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <UsageFault_Handler+0x4>

080012f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001304:	4802      	ldr	r0, [pc, #8]	@ (8001310 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001306:	f002 f82d 	bl	8003364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20001408 	.word	0x20001408

08001314 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <DMA2_Stream0_IRQHandler+0x10>)
 800131a:	f000 fe7d 	bl	8002018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000270 	.word	0x20000270

08001328 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <SystemInit+0x20>)
 800132e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001332:	4a05      	ldr	r2, [pc, #20]	@ (8001348 <SystemInit+0x20>)
 8001334:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001338:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800134c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001384 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001350:	f7ff ffea 	bl	8001328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001354:	480c      	ldr	r0, [pc, #48]	@ (8001388 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001356:	490d      	ldr	r1, [pc, #52]	@ (800138c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001358:	4a0d      	ldr	r2, [pc, #52]	@ (8001390 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800136c:	4c0a      	ldr	r4, [pc, #40]	@ (8001398 <LoopFillZerobss+0x22>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800137a:	f005 ffd7 	bl	800732c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800137e:	f7ff f8a7 	bl	80004d0 <main>
  bx  lr    
 8001382:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001384:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800138c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001390:	080077b0 	.word	0x080077b0
  ldr r2, =_sbss
 8001394:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001398:	20005f7c 	.word	0x20005f7c

0800139c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC_IRQHandler>
	...

080013a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a4:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <HAL_Init+0x40>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0d      	ldr	r2, [pc, #52]	@ (80013e0 <HAL_Init+0x40>)
 80013aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b0:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <HAL_Init+0x40>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <HAL_Init+0x40>)
 80013b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a07      	ldr	r2, [pc, #28]	@ (80013e0 <HAL_Init+0x40>)
 80013c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c8:	2003      	movs	r0, #3
 80013ca:	f000 fcea 	bl	8001da2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ce:	200f      	movs	r0, #15
 80013d0:	f7ff ff06 	bl	80011e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d4:	f7ff fe18 	bl	8001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023c00 	.word	0x40023c00

080013e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <HAL_IncTick+0x20>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_IncTick+0x24>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <HAL_IncTick+0x24>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	200001b4 	.word	0x200001b4
 8001408:	20001450 	.word	0x20001450

0800140c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return uwTick;
 8001410:	4b03      	ldr	r3, [pc, #12]	@ (8001420 <HAL_GetTick+0x14>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20001450 	.word	0x20001450

08001424 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e033      	b.n	80014a2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	2b00      	cmp	r3, #0
 8001440:	d109      	bne.n	8001456 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fe0c 	bl	8001060 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	f003 0310 	and.w	r3, r3, #16
 800145e:	2b00      	cmp	r3, #0
 8001460:	d118      	bne.n	8001494 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800146a:	f023 0302 	bic.w	r3, r3, #2
 800146e:	f043 0202 	orr.w	r2, r3, #2
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 fa68 	bl	800194c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	f023 0303 	bic.w	r3, r3, #3
 800148a:	f043 0201 	orr.w	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	641a      	str	r2, [r3, #64]	@ 0x40
 8001492:	e001      	b.n	8001498 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d101      	bne.n	80014ca <HAL_ADC_Start_DMA+0x1e>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e0e9      	b.n	800169e <HAL_ADC_Start_DMA+0x1f2>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d018      	beq.n	8001512 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0201 	orr.w	r2, r2, #1
 80014ee:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014f0:	4b6d      	ldr	r3, [pc, #436]	@ (80016a8 <HAL_ADC_Start_DMA+0x1fc>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a6d      	ldr	r2, [pc, #436]	@ (80016ac <HAL_ADC_Start_DMA+0x200>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	0c9a      	lsrs	r2, r3, #18
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001504:	e002      	b.n	800150c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	3b01      	subs	r3, #1
 800150a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f9      	bne.n	8001506 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800151c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001520:	d107      	bne.n	8001532 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001530:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b01      	cmp	r3, #1
 800153e:	f040 80a1 	bne.w	8001684 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001560:	2b00      	cmp	r3, #0
 8001562:	d007      	beq.n	8001574 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001568:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800156c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001578:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800157c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001580:	d106      	bne.n	8001590 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001586:	f023 0206 	bic.w	r2, r3, #6
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	645a      	str	r2, [r3, #68]	@ 0x44
 800158e:	e002      	b.n	8001596 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800159e:	4b44      	ldr	r3, [pc, #272]	@ (80016b0 <HAL_ADC_Start_DMA+0x204>)
 80015a0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015a6:	4a43      	ldr	r2, [pc, #268]	@ (80016b4 <HAL_ADC_Start_DMA+0x208>)
 80015a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ae:	4a42      	ldr	r2, [pc, #264]	@ (80016b8 <HAL_ADC_Start_DMA+0x20c>)
 80015b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015b6:	4a41      	ldr	r2, [pc, #260]	@ (80016bc <HAL_ADC_Start_DMA+0x210>)
 80015b8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80015c2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80015d2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015e2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	334c      	adds	r3, #76	@ 0x4c
 80015ee:	4619      	mov	r1, r3
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f000 fcb8 	bl	8001f68 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 031f 	and.w	r3, r3, #31
 8001600:	2b00      	cmp	r3, #0
 8001602:	d12a      	bne.n	800165a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a2d      	ldr	r2, [pc, #180]	@ (80016c0 <HAL_ADC_Start_DMA+0x214>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d015      	beq.n	800163a <HAL_ADC_Start_DMA+0x18e>
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a2c      	ldr	r2, [pc, #176]	@ (80016c4 <HAL_ADC_Start_DMA+0x218>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d105      	bne.n	8001624 <HAL_ADC_Start_DMA+0x178>
 8001618:	4b25      	ldr	r3, [pc, #148]	@ (80016b0 <HAL_ADC_Start_DMA+0x204>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00a      	beq.n	800163a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a27      	ldr	r2, [pc, #156]	@ (80016c8 <HAL_ADC_Start_DMA+0x21c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d136      	bne.n	800169c <HAL_ADC_Start_DMA+0x1f0>
 800162e:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <HAL_ADC_Start_DMA+0x204>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	2b00      	cmp	r3, #0
 8001638:	d130      	bne.n	800169c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d129      	bne.n	800169c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	e020      	b.n	800169c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a18      	ldr	r2, [pc, #96]	@ (80016c0 <HAL_ADC_Start_DMA+0x214>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d11b      	bne.n	800169c <HAL_ADC_Start_DMA+0x1f0>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d114      	bne.n	800169c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	e00b      	b.n	800169c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001688:	f043 0210 	orr.w	r2, r3, #16
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001694:	f043 0201 	orr.w	r2, r3, #1
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200001ac 	.word	0x200001ac
 80016ac:	431bde83 	.word	0x431bde83
 80016b0:	40012300 	.word	0x40012300
 80016b4:	08001b45 	.word	0x08001b45
 80016b8:	08001bff 	.word	0x08001bff
 80016bc:	08001c1b 	.word	0x08001c1b
 80016c0:	40012000 	.word	0x40012000
 80016c4:	40012100 	.word	0x40012100
 80016c8:	40012200 	.word	0x40012200

080016cc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800171c:	2b01      	cmp	r3, #1
 800171e:	d101      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x1c>
 8001720:	2302      	movs	r3, #2
 8001722:	e105      	b.n	8001930 <HAL_ADC_ConfigChannel+0x228>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b09      	cmp	r3, #9
 8001732:	d925      	bls.n	8001780 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68d9      	ldr	r1, [r3, #12]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	b29b      	uxth	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	3b1e      	subs	r3, #30
 800174a:	2207      	movs	r2, #7
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43da      	mvns	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	400a      	ands	r2, r1
 8001758:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68d9      	ldr	r1, [r3, #12]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	b29b      	uxth	r3, r3
 800176a:	4618      	mov	r0, r3
 800176c:	4603      	mov	r3, r0
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4403      	add	r3, r0
 8001772:	3b1e      	subs	r3, #30
 8001774:	409a      	lsls	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	e022      	b.n	80017c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6919      	ldr	r1, [r3, #16]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	b29b      	uxth	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	4613      	mov	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	4413      	add	r3, r2
 8001794:	2207      	movs	r2, #7
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	400a      	ands	r2, r1
 80017a2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6919      	ldr	r1, [r3, #16]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	4618      	mov	r0, r3
 80017b6:	4603      	mov	r3, r0
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4403      	add	r3, r0
 80017bc:	409a      	lsls	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b06      	cmp	r3, #6
 80017cc:	d824      	bhi.n	8001818 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	3b05      	subs	r3, #5
 80017e0:	221f      	movs	r2, #31
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	400a      	ands	r2, r1
 80017ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4618      	mov	r0, r3
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	3b05      	subs	r3, #5
 800180a:	fa00 f203 	lsl.w	r2, r0, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	635a      	str	r2, [r3, #52]	@ 0x34
 8001816:	e04c      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b0c      	cmp	r3, #12
 800181e:	d824      	bhi.n	800186a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	3b23      	subs	r3, #35	@ 0x23
 8001832:	221f      	movs	r2, #31
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43da      	mvns	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	400a      	ands	r2, r1
 8001840:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	b29b      	uxth	r3, r3
 800184e:	4618      	mov	r0, r3
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	3b23      	subs	r3, #35	@ 0x23
 800185c:	fa00 f203 	lsl.w	r2, r0, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	631a      	str	r2, [r3, #48]	@ 0x30
 8001868:	e023      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	3b41      	subs	r3, #65	@ 0x41
 800187c:	221f      	movs	r2, #31
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	400a      	ands	r2, r1
 800188a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	b29b      	uxth	r3, r3
 8001898:	4618      	mov	r0, r3
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	3b41      	subs	r3, #65	@ 0x41
 80018a6:	fa00 f203 	lsl.w	r2, r0, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018b2:	4b22      	ldr	r3, [pc, #136]	@ (800193c <HAL_ADC_ConfigChannel+0x234>)
 80018b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a21      	ldr	r2, [pc, #132]	@ (8001940 <HAL_ADC_ConfigChannel+0x238>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d109      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x1cc>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b12      	cmp	r3, #18
 80018c6:	d105      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a19      	ldr	r2, [pc, #100]	@ (8001940 <HAL_ADC_ConfigChannel+0x238>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d123      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x21e>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b10      	cmp	r3, #16
 80018e4:	d003      	beq.n	80018ee <HAL_ADC_ConfigChannel+0x1e6>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b11      	cmp	r3, #17
 80018ec:	d11b      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b10      	cmp	r3, #16
 8001900:	d111      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001902:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <HAL_ADC_ConfigChannel+0x23c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a10      	ldr	r2, [pc, #64]	@ (8001948 <HAL_ADC_ConfigChannel+0x240>)
 8001908:	fba2 2303 	umull	r2, r3, r2, r3
 800190c:	0c9a      	lsrs	r2, r3, #18
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001918:	e002      	b.n	8001920 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	3b01      	subs	r3, #1
 800191e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f9      	bne.n	800191a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40012300 	.word	0x40012300
 8001940:	40012000 	.word	0x40012000
 8001944:	200001ac 	.word	0x200001ac
 8001948:	431bde83 	.word	0x431bde83

0800194c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001954:	4b79      	ldr	r3, [pc, #484]	@ (8001b3c <ADC_Init+0x1f0>)
 8001956:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	431a      	orrs	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001980:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6859      	ldr	r1, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	021a      	lsls	r2, r3, #8
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80019a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6859      	ldr	r1, [r3, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6899      	ldr	r1, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019de:	4a58      	ldr	r2, [pc, #352]	@ (8001b40 <ADC_Init+0x1f4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d022      	beq.n	8001a2a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6899      	ldr	r1, [r3, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6899      	ldr	r1, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	e00f      	b.n	8001a4a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a48:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0202 	bic.w	r2, r2, #2
 8001a58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6899      	ldr	r1, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7e1b      	ldrb	r3, [r3, #24]
 8001a64:	005a      	lsls	r2, r3, #1
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d01b      	beq.n	8001ab0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a86:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001a96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6859      	ldr	r1, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	035a      	lsls	r2, r3, #13
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	e007      	b.n	8001ac0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001abe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001ace:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	051a      	lsls	r2, r3, #20
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001af4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6899      	ldr	r1, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b02:	025a      	lsls	r2, r3, #9
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6899      	ldr	r1, [r3, #8]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	029a      	lsls	r2, r3, #10
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	609a      	str	r2, [r3, #8]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	40012300 	.word	0x40012300
 8001b40:	0f000001 	.word	0x0f000001

08001b44 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b50:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d13c      	bne.n	8001bd8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d12b      	bne.n	8001bd0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d127      	bne.n	8001bd0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b86:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d006      	beq.n	8001b9c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d119      	bne.n	8001bd0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0220 	bic.w	r2, r2, #32
 8001baa:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d105      	bne.n	8001bd0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	f043 0201 	orr.w	r2, r3, #1
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f7ff fd7b 	bl	80016cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001bd6:	e00e      	b.n	8001bf6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bdc:	f003 0310 	and.w	r3, r3, #16
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f7ff fd85 	bl	80016f4 <HAL_ADC_ErrorCallback>
}
 8001bea:	e004      	b.n	8001bf6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	4798      	blx	r3
}
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b084      	sub	sp, #16
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c0a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f7ff fd67 	bl	80016e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c26:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2240      	movs	r2, #64	@ 0x40
 8001c2c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	f043 0204 	orr.w	r2, r3, #4
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f7ff fd5a 	bl	80016f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c58:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c64:	4013      	ands	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7a:	4a04      	ldr	r2, [pc, #16]	@ (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	60d3      	str	r3, [r2, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c94:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	f003 0307 	and.w	r3, r3, #7
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	db0b      	blt.n	8001cd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	f003 021f 	and.w	r2, r3, #31
 8001cc4:	4907      	ldr	r1, [pc, #28]	@ (8001ce4 <__NVIC_EnableIRQ+0x38>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	2001      	movs	r0, #1
 8001cce:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000e100 	.word	0xe000e100

08001ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	db0a      	blt.n	8001d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	490c      	ldr	r1, [pc, #48]	@ (8001d34 <__NVIC_SetPriority+0x4c>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	0112      	lsls	r2, r2, #4
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d10:	e00a      	b.n	8001d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4908      	ldr	r1, [pc, #32]	@ (8001d38 <__NVIC_SetPriority+0x50>)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3b04      	subs	r3, #4
 8001d20:	0112      	lsls	r2, r2, #4
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	440b      	add	r3, r1
 8001d26:	761a      	strb	r2, [r3, #24]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000e100 	.word	0xe000e100
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	@ 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f1c3 0307 	rsb	r3, r3, #7
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	bf28      	it	cs
 8001d5a:	2304      	movcs	r3, #4
 8001d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3304      	adds	r3, #4
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d902      	bls.n	8001d6c <NVIC_EncodePriority+0x30>
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3b03      	subs	r3, #3
 8001d6a:	e000      	b.n	8001d6e <NVIC_EncodePriority+0x32>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	401a      	ands	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	4313      	orrs	r3, r2
         );
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3724      	adds	r7, #36	@ 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ff4c 	bl	8001c48 <__NVIC_SetPriorityGrouping>
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dca:	f7ff ff61 	bl	8001c90 <__NVIC_GetPriorityGrouping>
 8001dce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	68b9      	ldr	r1, [r7, #8]
 8001dd4:	6978      	ldr	r0, [r7, #20]
 8001dd6:	f7ff ffb1 	bl	8001d3c <NVIC_EncodePriority>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de0:	4611      	mov	r1, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ff80 	bl	8001ce8 <__NVIC_SetPriority>
}
 8001de8:	bf00      	nop
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ff54 	bl	8001cac <__NVIC_EnableIRQ>
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e18:	f7ff faf8 	bl	800140c <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e099      	b.n	8001f5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0201 	bic.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e48:	e00f      	b.n	8001e6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e4a:	f7ff fadf 	bl	800140c <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b05      	cmp	r3, #5
 8001e56:	d908      	bls.n	8001e6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2203      	movs	r2, #3
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e078      	b.n	8001f5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1e8      	bne.n	8001e4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	4b38      	ldr	r3, [pc, #224]	@ (8001f64 <HAL_DMA_Init+0x158>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d107      	bne.n	8001ed4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f023 0307 	bic.w	r3, r3, #7
 8001eea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d117      	bne.n	8001f2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00e      	beq.n	8001f2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 fa6f 	bl	80023f4 <DMA_CheckFifoParam>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2240      	movs	r2, #64	@ 0x40
 8001f20:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e016      	b.n	8001f5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 fa26 	bl	8002388 <DMA_CalcBaseAndBitshift>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f44:	223f      	movs	r2, #63	@ 0x3f
 8001f46:	409a      	lsls	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	f010803f 	.word	0xf010803f

08001f68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_DMA_Start_IT+0x26>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e040      	b.n	8002010 <HAL_DMA_Start_IT+0xa8>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d12f      	bne.n	8002002 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 f9b8 	bl	800232c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc0:	223f      	movs	r2, #63	@ 0x3f
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0216 	orr.w	r2, r2, #22
 8001fd6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d007      	beq.n	8001ff0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0208 	orr.w	r2, r2, #8
 8001fee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	e005      	b.n	800200e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800200a:	2302      	movs	r3, #2
 800200c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800200e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002024:	4b8e      	ldr	r3, [pc, #568]	@ (8002260 <HAL_DMA_IRQHandler+0x248>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a8e      	ldr	r2, [pc, #568]	@ (8002264 <HAL_DMA_IRQHandler+0x24c>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0a9b      	lsrs	r3, r3, #10
 8002030:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002036:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002042:	2208      	movs	r2, #8
 8002044:	409a      	lsls	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d01a      	beq.n	8002084 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d013      	beq.n	8002084 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0204 	bic.w	r2, r2, #4
 800206a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002070:	2208      	movs	r2, #8
 8002072:	409a      	lsls	r2, r3
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800207c:	f043 0201 	orr.w	r2, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002088:	2201      	movs	r2, #1
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d012      	beq.n	80020ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00b      	beq.n	80020ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a6:	2201      	movs	r2, #1
 80020a8:	409a      	lsls	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b2:	f043 0202 	orr.w	r2, r3, #2
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020be:	2204      	movs	r2, #4
 80020c0:	409a      	lsls	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d012      	beq.n	80020f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00b      	beq.n	80020f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020dc:	2204      	movs	r2, #4
 80020de:	409a      	lsls	r2, r3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e8:	f043 0204 	orr.w	r2, r3, #4
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f4:	2210      	movs	r2, #16
 80020f6:	409a      	lsls	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d043      	beq.n	8002188 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d03c      	beq.n	8002188 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002112:	2210      	movs	r2, #16
 8002114:	409a      	lsls	r2, r3
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d018      	beq.n	800215a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d108      	bne.n	8002148 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d024      	beq.n	8002188 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	4798      	blx	r3
 8002146:	e01f      	b.n	8002188 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01b      	beq.n	8002188 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
 8002158:	e016      	b.n	8002188 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d107      	bne.n	8002178 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0208 	bic.w	r2, r2, #8
 8002176:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218c:	2220      	movs	r2, #32
 800218e:	409a      	lsls	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 808f 	beq.w	80022b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 8087 	beq.w	80022b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ae:	2220      	movs	r2, #32
 80021b0:	409a      	lsls	r2, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b05      	cmp	r3, #5
 80021c0:	d136      	bne.n	8002230 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0216 	bic.w	r2, r2, #22
 80021d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d103      	bne.n	80021f2 <HAL_DMA_IRQHandler+0x1da>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d007      	beq.n	8002202 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0208 	bic.w	r2, r2, #8
 8002200:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002206:	223f      	movs	r2, #63	@ 0x3f
 8002208:	409a      	lsls	r2, r3
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002222:	2b00      	cmp	r3, #0
 8002224:	d07e      	beq.n	8002324 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	4798      	blx	r3
        }
        return;
 800222e:	e079      	b.n	8002324 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d01d      	beq.n	800227a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10d      	bne.n	8002268 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002250:	2b00      	cmp	r3, #0
 8002252:	d031      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
 800225c:	e02c      	b.n	80022b8 <HAL_DMA_IRQHandler+0x2a0>
 800225e:	bf00      	nop
 8002260:	200001ac 	.word	0x200001ac
 8002264:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800226c:	2b00      	cmp	r3, #0
 800226e:	d023      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	4798      	blx	r3
 8002278:	e01e      	b.n	80022b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10f      	bne.n	80022a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0210 	bic.w	r2, r2, #16
 8002296:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d032      	beq.n	8002326 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d022      	beq.n	8002312 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2205      	movs	r2, #5
 80022d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0201 	bic.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	3301      	adds	r3, #1
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d307      	bcc.n	8002300 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f2      	bne.n	80022e4 <HAL_DMA_IRQHandler+0x2cc>
 80022fe:	e000      	b.n	8002302 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002300:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4798      	blx	r3
 8002322:	e000      	b.n	8002326 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002324:	bf00      	nop
    }
  }
}
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002348:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b40      	cmp	r3, #64	@ 0x40
 8002358:	d108      	bne.n	800236c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800236a:	e007      	b.n	800237c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	60da      	str	r2, [r3, #12]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	3b10      	subs	r3, #16
 8002398:	4a14      	ldr	r2, [pc, #80]	@ (80023ec <DMA_CalcBaseAndBitshift+0x64>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023a2:	4a13      	ldr	r2, [pc, #76]	@ (80023f0 <DMA_CalcBaseAndBitshift+0x68>)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d909      	bls.n	80023ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023be:	f023 0303 	bic.w	r3, r3, #3
 80023c2:	1d1a      	adds	r2, r3, #4
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80023c8:	e007      	b.n	80023da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023d2:	f023 0303 	bic.w	r3, r3, #3
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	aaaaaaab 	.word	0xaaaaaaab
 80023f0:	0800773c 	.word	0x0800773c

080023f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002404:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d11f      	bne.n	800244e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b03      	cmp	r3, #3
 8002412:	d856      	bhi.n	80024c2 <DMA_CheckFifoParam+0xce>
 8002414:	a201      	add	r2, pc, #4	@ (adr r2, 800241c <DMA_CheckFifoParam+0x28>)
 8002416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241a:	bf00      	nop
 800241c:	0800242d 	.word	0x0800242d
 8002420:	0800243f 	.word	0x0800243f
 8002424:	0800242d 	.word	0x0800242d
 8002428:	080024c3 	.word	0x080024c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002430:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d046      	beq.n	80024c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243c:	e043      	b.n	80024c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002442:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002446:	d140      	bne.n	80024ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800244c:	e03d      	b.n	80024ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002456:	d121      	bne.n	800249c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d837      	bhi.n	80024ce <DMA_CheckFifoParam+0xda>
 800245e:	a201      	add	r2, pc, #4	@ (adr r2, 8002464 <DMA_CheckFifoParam+0x70>)
 8002460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002464:	08002475 	.word	0x08002475
 8002468:	0800247b 	.word	0x0800247b
 800246c:	08002475 	.word	0x08002475
 8002470:	0800248d 	.word	0x0800248d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
      break;
 8002478:	e030      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d025      	beq.n	80024d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800248a:	e022      	b.n	80024d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002490:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002494:	d11f      	bne.n	80024d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800249a:	e01c      	b.n	80024d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d903      	bls.n	80024aa <DMA_CheckFifoParam+0xb6>
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d003      	beq.n	80024b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024a8:	e018      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
      break;
 80024ae:	e015      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00e      	beq.n	80024da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
      break;
 80024c0:	e00b      	b.n	80024da <DMA_CheckFifoParam+0xe6>
      break;
 80024c2:	bf00      	nop
 80024c4:	e00a      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;
 80024c6:	bf00      	nop
 80024c8:	e008      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;
 80024ca:	bf00      	nop
 80024cc:	e006      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;
 80024ce:	bf00      	nop
 80024d0:	e004      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;
 80024d2:	bf00      	nop
 80024d4:	e002      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;   
 80024d6:	bf00      	nop
 80024d8:	e000      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;
 80024da:	bf00      	nop
    }
  } 
  
  return status; 
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop

080024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	@ 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	e16b      	b.n	80027e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002508:	2201      	movs	r2, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	429a      	cmp	r2, r3
 8002522:	f040 815a 	bne.w	80027da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b01      	cmp	r3, #1
 8002530:	d005      	beq.n	800253e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800253a:	2b02      	cmp	r3, #2
 800253c:	d130      	bne.n	80025a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	2203      	movs	r2, #3
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002574:	2201      	movs	r2, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f003 0201 	and.w	r2, r3, #1
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d017      	beq.n	80025dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d123      	bne.n	8002630 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	08da      	lsrs	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3208      	adds	r2, #8
 80025f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	220f      	movs	r2, #15
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	08da      	lsrs	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3208      	adds	r2, #8
 800262a:	69b9      	ldr	r1, [r7, #24]
 800262c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0203 	and.w	r2, r3, #3
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80b4 	beq.w	80027da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b60      	ldr	r3, [pc, #384]	@ (80027f8 <HAL_GPIO_Init+0x30c>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267a:	4a5f      	ldr	r2, [pc, #380]	@ (80027f8 <HAL_GPIO_Init+0x30c>)
 800267c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002680:	6453      	str	r3, [r2, #68]	@ 0x44
 8002682:	4b5d      	ldr	r3, [pc, #372]	@ (80027f8 <HAL_GPIO_Init+0x30c>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800268e:	4a5b      	ldr	r2, [pc, #364]	@ (80027fc <HAL_GPIO_Init+0x310>)
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	089b      	lsrs	r3, r3, #2
 8002694:	3302      	adds	r3, #2
 8002696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	220f      	movs	r2, #15
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a52      	ldr	r2, [pc, #328]	@ (8002800 <HAL_GPIO_Init+0x314>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d02b      	beq.n	8002712 <HAL_GPIO_Init+0x226>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a51      	ldr	r2, [pc, #324]	@ (8002804 <HAL_GPIO_Init+0x318>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d025      	beq.n	800270e <HAL_GPIO_Init+0x222>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a50      	ldr	r2, [pc, #320]	@ (8002808 <HAL_GPIO_Init+0x31c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d01f      	beq.n	800270a <HAL_GPIO_Init+0x21e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a4f      	ldr	r2, [pc, #316]	@ (800280c <HAL_GPIO_Init+0x320>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d019      	beq.n	8002706 <HAL_GPIO_Init+0x21a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002810 <HAL_GPIO_Init+0x324>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d013      	beq.n	8002702 <HAL_GPIO_Init+0x216>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002814 <HAL_GPIO_Init+0x328>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00d      	beq.n	80026fe <HAL_GPIO_Init+0x212>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a4c      	ldr	r2, [pc, #304]	@ (8002818 <HAL_GPIO_Init+0x32c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d007      	beq.n	80026fa <HAL_GPIO_Init+0x20e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a4b      	ldr	r2, [pc, #300]	@ (800281c <HAL_GPIO_Init+0x330>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d101      	bne.n	80026f6 <HAL_GPIO_Init+0x20a>
 80026f2:	2307      	movs	r3, #7
 80026f4:	e00e      	b.n	8002714 <HAL_GPIO_Init+0x228>
 80026f6:	2308      	movs	r3, #8
 80026f8:	e00c      	b.n	8002714 <HAL_GPIO_Init+0x228>
 80026fa:	2306      	movs	r3, #6
 80026fc:	e00a      	b.n	8002714 <HAL_GPIO_Init+0x228>
 80026fe:	2305      	movs	r3, #5
 8002700:	e008      	b.n	8002714 <HAL_GPIO_Init+0x228>
 8002702:	2304      	movs	r3, #4
 8002704:	e006      	b.n	8002714 <HAL_GPIO_Init+0x228>
 8002706:	2303      	movs	r3, #3
 8002708:	e004      	b.n	8002714 <HAL_GPIO_Init+0x228>
 800270a:	2302      	movs	r3, #2
 800270c:	e002      	b.n	8002714 <HAL_GPIO_Init+0x228>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_GPIO_Init+0x228>
 8002712:	2300      	movs	r3, #0
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	f002 0203 	and.w	r2, r2, #3
 800271a:	0092      	lsls	r2, r2, #2
 800271c:	4093      	lsls	r3, r2
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002724:	4935      	ldr	r1, [pc, #212]	@ (80027fc <HAL_GPIO_Init+0x310>)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3302      	adds	r3, #2
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002732:	4b3b      	ldr	r3, [pc, #236]	@ (8002820 <HAL_GPIO_Init+0x334>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002756:	4a32      	ldr	r2, [pc, #200]	@ (8002820 <HAL_GPIO_Init+0x334>)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800275c:	4b30      	ldr	r3, [pc, #192]	@ (8002820 <HAL_GPIO_Init+0x334>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002780:	4a27      	ldr	r2, [pc, #156]	@ (8002820 <HAL_GPIO_Init+0x334>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002786:	4b26      	ldr	r3, [pc, #152]	@ (8002820 <HAL_GPIO_Init+0x334>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002820 <HAL_GPIO_Init+0x334>)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002820 <HAL_GPIO_Init+0x334>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027d4:	4a12      	ldr	r2, [pc, #72]	@ (8002820 <HAL_GPIO_Init+0x334>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3301      	adds	r3, #1
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b0f      	cmp	r3, #15
 80027e4:	f67f ae90 	bls.w	8002508 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	3724      	adds	r7, #36	@ 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40013800 	.word	0x40013800
 8002800:	40020000 	.word	0x40020000
 8002804:	40020400 	.word	0x40020400
 8002808:	40020800 	.word	0x40020800
 800280c:	40020c00 	.word	0x40020c00
 8002810:	40021000 	.word	0x40021000
 8002814:	40021400 	.word	0x40021400
 8002818:	40021800 	.word	0x40021800
 800281c:	40021c00 	.word	0x40021c00
 8002820:	40013c00 	.word	0x40013c00

08002824 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	887b      	ldrh	r3, [r7, #2]
 8002836:	4013      	ands	r3, r2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
 8002840:	e001      	b.n	8002846 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002846:	7bfb      	ldrb	r3, [r7, #15]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	807b      	strh	r3, [r7, #2]
 8002860:	4613      	mov	r3, r2
 8002862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002864:	787b      	ldrb	r3, [r7, #1]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800286a:	887a      	ldrh	r2, [r7, #2]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002870:	e003      	b.n	800287a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002872:	887b      	ldrh	r3, [r7, #2]
 8002874:	041a      	lsls	r2, r3, #16
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	619a      	str	r2, [r3, #24]
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002886:	b480      	push	{r7}
 8002888:	b085      	sub	sp, #20
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	460b      	mov	r3, r1
 8002890:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002898:	887a      	ldrh	r2, [r7, #2]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4013      	ands	r3, r2
 800289e:	041a      	lsls	r2, r3, #16
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	43d9      	mvns	r1, r3
 80028a4:	887b      	ldrh	r3, [r7, #2]
 80028a6:	400b      	ands	r3, r1
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	619a      	str	r2, [r3, #24]
}
 80028ae:	bf00      	nop
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e267      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d075      	beq.n	80029c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028da:	4b88      	ldr	r3, [pc, #544]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d00c      	beq.n	8002900 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028e6:	4b85      	ldr	r3, [pc, #532]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d112      	bne.n	8002918 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028f2:	4b82      	ldr	r3, [pc, #520]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028fe:	d10b      	bne.n	8002918 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002900:	4b7e      	ldr	r3, [pc, #504]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d05b      	beq.n	80029c4 <HAL_RCC_OscConfig+0x108>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d157      	bne.n	80029c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e242      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002920:	d106      	bne.n	8002930 <HAL_RCC_OscConfig+0x74>
 8002922:	4b76      	ldr	r3, [pc, #472]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a75      	ldr	r2, [pc, #468]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e01d      	b.n	800296c <HAL_RCC_OscConfig+0xb0>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0x98>
 800293a:	4b70      	ldr	r3, [pc, #448]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a6f      	ldr	r2, [pc, #444]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002940:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	4b6d      	ldr	r3, [pc, #436]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6c      	ldr	r2, [pc, #432]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e00b      	b.n	800296c <HAL_RCC_OscConfig+0xb0>
 8002954:	4b69      	ldr	r3, [pc, #420]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a68      	ldr	r2, [pc, #416]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 800295a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	4b66      	ldr	r3, [pc, #408]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a65      	ldr	r2, [pc, #404]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800296a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d013      	beq.n	800299c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7fe fd4a 	bl	800140c <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800297c:	f7fe fd46 	bl	800140c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	@ 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e207      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298e:	4b5b      	ldr	r3, [pc, #364]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0xc0>
 800299a:	e014      	b.n	80029c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7fe fd36 	bl	800140c <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a4:	f7fe fd32 	bl	800140c <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	@ 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e1f3      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b6:	4b51      	ldr	r3, [pc, #324]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0xe8>
 80029c2:	e000      	b.n	80029c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d063      	beq.n	8002a9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029d2:	4b4a      	ldr	r3, [pc, #296]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00b      	beq.n	80029f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029de:	4b47      	ldr	r3, [pc, #284]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d11c      	bne.n	8002a24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ea:	4b44      	ldr	r3, [pc, #272]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d116      	bne.n	8002a24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f6:	4b41      	ldr	r3, [pc, #260]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <HAL_RCC_OscConfig+0x152>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d001      	beq.n	8002a0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e1c7      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4937      	ldr	r1, [pc, #220]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a22:	e03a      	b.n	8002a9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d020      	beq.n	8002a6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a2c:	4b34      	ldr	r3, [pc, #208]	@ (8002b00 <HAL_RCC_OscConfig+0x244>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a32:	f7fe fceb 	bl	800140c <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a3a:	f7fe fce7 	bl	800140c <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e1a8      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a58:	4b28      	ldr	r3, [pc, #160]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4925      	ldr	r1, [pc, #148]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	600b      	str	r3, [r1, #0]
 8002a6c:	e015      	b.n	8002a9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6e:	4b24      	ldr	r3, [pc, #144]	@ (8002b00 <HAL_RCC_OscConfig+0x244>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7fe fcca 	bl	800140c <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7c:	f7fe fcc6 	bl	800140c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e187      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d036      	beq.n	8002b14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d016      	beq.n	8002adc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aae:	4b15      	ldr	r3, [pc, #84]	@ (8002b04 <HAL_RCC_OscConfig+0x248>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fcaa 	bl	800140c <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002abc:	f7fe fca6 	bl	800140c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e167      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ace:	4b0b      	ldr	r3, [pc, #44]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x200>
 8002ada:	e01b      	b.n	8002b14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002adc:	4b09      	ldr	r3, [pc, #36]	@ (8002b04 <HAL_RCC_OscConfig+0x248>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae2:	f7fe fc93 	bl	800140c <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae8:	e00e      	b.n	8002b08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aea:	f7fe fc8f 	bl	800140c <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d907      	bls.n	8002b08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e150      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
 8002afc:	40023800 	.word	0x40023800
 8002b00:	42470000 	.word	0x42470000
 8002b04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b08:	4b88      	ldr	r3, [pc, #544]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002b0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1ea      	bne.n	8002aea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 8097 	beq.w	8002c50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b22:	2300      	movs	r3, #0
 8002b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b26:	4b81      	ldr	r3, [pc, #516]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10f      	bne.n	8002b52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	4b7d      	ldr	r3, [pc, #500]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	4a7c      	ldr	r2, [pc, #496]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b42:	4b7a      	ldr	r3, [pc, #488]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b52:	4b77      	ldr	r3, [pc, #476]	@ (8002d30 <HAL_RCC_OscConfig+0x474>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d118      	bne.n	8002b90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b5e:	4b74      	ldr	r3, [pc, #464]	@ (8002d30 <HAL_RCC_OscConfig+0x474>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a73      	ldr	r2, [pc, #460]	@ (8002d30 <HAL_RCC_OscConfig+0x474>)
 8002b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6a:	f7fe fc4f 	bl	800140c <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b72:	f7fe fc4b 	bl	800140c <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e10c      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b84:	4b6a      	ldr	r3, [pc, #424]	@ (8002d30 <HAL_RCC_OscConfig+0x474>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d106      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x2ea>
 8002b98:	4b64      	ldr	r3, [pc, #400]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9c:	4a63      	ldr	r2, [pc, #396]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ba4:	e01c      	b.n	8002be0 <HAL_RCC_OscConfig+0x324>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2b05      	cmp	r3, #5
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x30c>
 8002bae:	4b5f      	ldr	r3, [pc, #380]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb2:	4a5e      	ldr	r2, [pc, #376]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bb4:	f043 0304 	orr.w	r3, r3, #4
 8002bb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bba:	4b5c      	ldr	r3, [pc, #368]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bbe:	4a5b      	ldr	r2, [pc, #364]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bc6:	e00b      	b.n	8002be0 <HAL_RCC_OscConfig+0x324>
 8002bc8:	4b58      	ldr	r3, [pc, #352]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bcc:	4a57      	ldr	r2, [pc, #348]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bce:	f023 0301 	bic.w	r3, r3, #1
 8002bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bd4:	4b55      	ldr	r3, [pc, #340]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd8:	4a54      	ldr	r2, [pc, #336]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bda:	f023 0304 	bic.w	r3, r3, #4
 8002bde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d015      	beq.n	8002c14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7fe fc10 	bl	800140c <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf0:	f7fe fc0c 	bl	800140c <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e0cb      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c06:	4b49      	ldr	r3, [pc, #292]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0ee      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x334>
 8002c12:	e014      	b.n	8002c3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c14:	f7fe fbfa 	bl	800140c <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1c:	f7fe fbf6 	bl	800140c <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e0b5      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c32:	4b3e      	ldr	r3, [pc, #248]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1ee      	bne.n	8002c1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d105      	bne.n	8002c50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c44:	4b39      	ldr	r3, [pc, #228]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c48:	4a38      	ldr	r2, [pc, #224]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002c4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80a1 	beq.w	8002d9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c5a:	4b34      	ldr	r3, [pc, #208]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d05c      	beq.n	8002d20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d141      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6e:	4b31      	ldr	r3, [pc, #196]	@ (8002d34 <HAL_RCC_OscConfig+0x478>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c74:	f7fe fbca 	bl	800140c <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7c:	f7fe fbc6 	bl	800140c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e087      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8e:	4b27      	ldr	r3, [pc, #156]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69da      	ldr	r2, [r3, #28]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca8:	019b      	lsls	r3, r3, #6
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	041b      	lsls	r3, r3, #16
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cbc:	061b      	lsls	r3, r3, #24
 8002cbe:	491b      	ldr	r1, [pc, #108]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d34 <HAL_RCC_OscConfig+0x478>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cca:	f7fe fb9f 	bl	800140c <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd2:	f7fe fb9b 	bl	800140c <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e05c      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce4:	4b11      	ldr	r3, [pc, #68]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x416>
 8002cf0:	e054      	b.n	8002d9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf2:	4b10      	ldr	r3, [pc, #64]	@ (8002d34 <HAL_RCC_OscConfig+0x478>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7fe fb88 	bl	800140c <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d00:	f7fe fb84 	bl	800140c <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e045      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d12:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x444>
 8002d1e:	e03d      	b.n	8002d9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d107      	bne.n	8002d38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e038      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40007000 	.word	0x40007000
 8002d34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d38:	4b1b      	ldr	r3, [pc, #108]	@ (8002da8 <HAL_RCC_OscConfig+0x4ec>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d028      	beq.n	8002d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d121      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d11a      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d68:	4013      	ands	r3, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d111      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	3b01      	subs	r3, #1
 8002d82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d107      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800

08002dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0cc      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc0:	4b68      	ldr	r3, [pc, #416]	@ (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d90c      	bls.n	8002de8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dce:	4b65      	ldr	r3, [pc, #404]	@ (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd6:	4b63      	ldr	r3, [pc, #396]	@ (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0b8      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d020      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e00:	4b59      	ldr	r3, [pc, #356]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	4a58      	ldr	r2, [pc, #352]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e18:	4b53      	ldr	r3, [pc, #332]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4a52      	ldr	r2, [pc, #328]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e24:	4b50      	ldr	r3, [pc, #320]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	494d      	ldr	r1, [pc, #308]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d044      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d107      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4a:	4b47      	ldr	r3, [pc, #284]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d119      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e07f      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d003      	beq.n	8002e6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d109      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e06f      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e067      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e8a:	4b37      	ldr	r3, [pc, #220]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f023 0203 	bic.w	r2, r3, #3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4934      	ldr	r1, [pc, #208]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e9c:	f7fe fab6 	bl	800140c <HAL_GetTick>
 8002ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea2:	e00a      	b.n	8002eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea4:	f7fe fab2 	bl	800140c <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e04f      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	4b2b      	ldr	r3, [pc, #172]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 020c 	and.w	r2, r3, #12
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d1eb      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ecc:	4b25      	ldr	r3, [pc, #148]	@ (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d20c      	bcs.n	8002ef4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eda:	4b22      	ldr	r3, [pc, #136]	@ (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b20      	ldr	r3, [pc, #128]	@ (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e032      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f00:	4b19      	ldr	r3, [pc, #100]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4916      	ldr	r1, [pc, #88]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d009      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f1e:	4b12      	ldr	r3, [pc, #72]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	490e      	ldr	r1, [pc, #56]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f32:	f000 f821 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 8002f36:	4602      	mov	r2, r0
 8002f38:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	490a      	ldr	r1, [pc, #40]	@ (8002f6c <HAL_RCC_ClockConfig+0x1c0>)
 8002f44:	5ccb      	ldrb	r3, [r1, r3]
 8002f46:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4a:	4a09      	ldr	r2, [pc, #36]	@ (8002f70 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f4e:	4b09      	ldr	r3, [pc, #36]	@ (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe f944 	bl	80011e0 <HAL_InitTick>

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40023c00 	.word	0x40023c00
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	08007724 	.word	0x08007724
 8002f70:	200001ac 	.word	0x200001ac
 8002f74:	200001b0 	.word	0x200001b0

08002f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f7c:	b090      	sub	sp, #64	@ 0x40
 8002f7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f90:	4b59      	ldr	r3, [pc, #356]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d00d      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x40>
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	f200 80a1 	bhi.w	80030e4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0x34>
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d003      	beq.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002faa:	e09b      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fac:	4b53      	ldr	r3, [pc, #332]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x184>)
 8002fae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fb0:	e09b      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fb2:	4b53      	ldr	r3, [pc, #332]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fb6:	e098      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fb8:	4b4f      	ldr	r3, [pc, #316]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fc0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fc2:	4b4d      	ldr	r3, [pc, #308]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d028      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fce:	4b4a      	ldr	r3, [pc, #296]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	099b      	lsrs	r3, r3, #6
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	623b      	str	r3, [r7, #32]
 8002fd8:	627a      	str	r2, [r7, #36]	@ 0x24
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4b47      	ldr	r3, [pc, #284]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fe4:	fb03 f201 	mul.w	r2, r3, r1
 8002fe8:	2300      	movs	r3, #0
 8002fea:	fb00 f303 	mul.w	r3, r0, r3
 8002fee:	4413      	add	r3, r2
 8002ff0:	4a43      	ldr	r2, [pc, #268]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ff2:	fba0 1202 	umull	r1, r2, r0, r2
 8002ff6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ff8:	460a      	mov	r2, r1
 8002ffa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ffc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ffe:	4413      	add	r3, r2
 8003000:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003004:	2200      	movs	r2, #0
 8003006:	61bb      	str	r3, [r7, #24]
 8003008:	61fa      	str	r2, [r7, #28]
 800300a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800300e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003012:	f7fd f8e5 	bl	80001e0 <__aeabi_uldivmod>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4613      	mov	r3, r2
 800301c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800301e:	e053      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003020:	4b35      	ldr	r3, [pc, #212]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	099b      	lsrs	r3, r3, #6
 8003026:	2200      	movs	r2, #0
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	617a      	str	r2, [r7, #20]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003032:	f04f 0b00 	mov.w	fp, #0
 8003036:	4652      	mov	r2, sl
 8003038:	465b      	mov	r3, fp
 800303a:	f04f 0000 	mov.w	r0, #0
 800303e:	f04f 0100 	mov.w	r1, #0
 8003042:	0159      	lsls	r1, r3, #5
 8003044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003048:	0150      	lsls	r0, r2, #5
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	ebb2 080a 	subs.w	r8, r2, sl
 8003052:	eb63 090b 	sbc.w	r9, r3, fp
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003062:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003066:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800306a:	ebb2 0408 	subs.w	r4, r2, r8
 800306e:	eb63 0509 	sbc.w	r5, r3, r9
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	00eb      	lsls	r3, r5, #3
 800307c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003080:	00e2      	lsls	r2, r4, #3
 8003082:	4614      	mov	r4, r2
 8003084:	461d      	mov	r5, r3
 8003086:	eb14 030a 	adds.w	r3, r4, sl
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	eb45 030b 	adc.w	r3, r5, fp
 8003090:	607b      	str	r3, [r7, #4]
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800309e:	4629      	mov	r1, r5
 80030a0:	028b      	lsls	r3, r1, #10
 80030a2:	4621      	mov	r1, r4
 80030a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030a8:	4621      	mov	r1, r4
 80030aa:	028a      	lsls	r2, r1, #10
 80030ac:	4610      	mov	r0, r2
 80030ae:	4619      	mov	r1, r3
 80030b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030b2:	2200      	movs	r2, #0
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	60fa      	str	r2, [r7, #12]
 80030b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030bc:	f7fd f890 	bl	80001e0 <__aeabi_uldivmod>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4613      	mov	r3, r2
 80030c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030c8:	4b0b      	ldr	r3, [pc, #44]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	0c1b      	lsrs	r3, r3, #16
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	3301      	adds	r3, #1
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80030d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030e2:	e002      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030e4:	4b05      	ldr	r3, [pc, #20]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x184>)
 80030e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3740      	adds	r7, #64	@ 0x40
 80030f0:	46bd      	mov	sp, r7
 80030f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030f6:	bf00      	nop
 80030f8:	40023800 	.word	0x40023800
 80030fc:	00f42400 	.word	0x00f42400
 8003100:	017d7840 	.word	0x017d7840

08003104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003108:	4b03      	ldr	r3, [pc, #12]	@ (8003118 <HAL_RCC_GetHCLKFreq+0x14>)
 800310a:	681b      	ldr	r3, [r3, #0]
}
 800310c:	4618      	mov	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	200001ac 	.word	0x200001ac

0800311c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003120:	f7ff fff0 	bl	8003104 <HAL_RCC_GetHCLKFreq>
 8003124:	4602      	mov	r2, r0
 8003126:	4b05      	ldr	r3, [pc, #20]	@ (800313c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	0a9b      	lsrs	r3, r3, #10
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	4903      	ldr	r1, [pc, #12]	@ (8003140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003132:	5ccb      	ldrb	r3, [r1, r3]
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003138:	4618      	mov	r0, r3
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40023800 	.word	0x40023800
 8003140:	08007734 	.word	0x08007734

08003144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003148:	f7ff ffdc 	bl	8003104 <HAL_RCC_GetHCLKFreq>
 800314c:	4602      	mov	r2, r0
 800314e:	4b05      	ldr	r3, [pc, #20]	@ (8003164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	0b5b      	lsrs	r3, r3, #13
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	4903      	ldr	r1, [pc, #12]	@ (8003168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800315a:	5ccb      	ldrb	r3, [r1, r3]
 800315c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003160:	4618      	mov	r0, r3
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40023800 	.word	0x40023800
 8003168:	08007734 	.word	0x08007734

0800316c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	220f      	movs	r2, #15
 800317a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800317c:	4b12      	ldr	r3, [pc, #72]	@ (80031c8 <HAL_RCC_GetClockConfig+0x5c>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0203 	and.w	r2, r3, #3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003188:	4b0f      	ldr	r3, [pc, #60]	@ (80031c8 <HAL_RCC_GetClockConfig+0x5c>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003194:	4b0c      	ldr	r3, [pc, #48]	@ (80031c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80031a0:	4b09      	ldr	r3, [pc, #36]	@ (80031c8 <HAL_RCC_GetClockConfig+0x5c>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	08db      	lsrs	r3, r3, #3
 80031a6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031ae:	4b07      	ldr	r3, [pc, #28]	@ (80031cc <HAL_RCC_GetClockConfig+0x60>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0207 	and.w	r2, r3, #7
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	601a      	str	r2, [r3, #0]
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40023c00 	.word	0x40023c00

080031d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e041      	b.n	8003266 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f839 	bl	800326e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3304      	adds	r3, #4
 800320c:	4619      	mov	r1, r3
 800320e:	4610      	mov	r0, r2
 8003210:	f000 f9c0 	bl	8003594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b01      	cmp	r3, #1
 8003296:	d001      	beq.n	800329c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e04e      	b.n	800333a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a23      	ldr	r2, [pc, #140]	@ (8003348 <HAL_TIM_Base_Start_IT+0xc4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d022      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0x80>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032c6:	d01d      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0x80>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1f      	ldr	r2, [pc, #124]	@ (800334c <HAL_TIM_Base_Start_IT+0xc8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d018      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0x80>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003350 <HAL_TIM_Base_Start_IT+0xcc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d013      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0x80>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003354 <HAL_TIM_Base_Start_IT+0xd0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00e      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0x80>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003358 <HAL_TIM_Base_Start_IT+0xd4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d009      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0x80>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a19      	ldr	r2, [pc, #100]	@ (800335c <HAL_TIM_Base_Start_IT+0xd8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d004      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0x80>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a18      	ldr	r2, [pc, #96]	@ (8003360 <HAL_TIM_Base_Start_IT+0xdc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d111      	bne.n	8003328 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b06      	cmp	r3, #6
 8003314:	d010      	beq.n	8003338 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0201 	orr.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003326:	e007      	b.n	8003338 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40010000 	.word	0x40010000
 800334c:	40000400 	.word	0x40000400
 8003350:	40000800 	.word	0x40000800
 8003354:	40000c00 	.word	0x40000c00
 8003358:	40010400 	.word	0x40010400
 800335c:	40014000 	.word	0x40014000
 8003360:	40001800 	.word	0x40001800

08003364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d020      	beq.n	80033c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01b      	beq.n	80033c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0202 	mvn.w	r2, #2
 8003398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f8d2 	bl	8003558 <HAL_TIM_IC_CaptureCallback>
 80033b4:	e005      	b.n	80033c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f8c4 	bl	8003544 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f8d5 	bl	800356c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d020      	beq.n	8003414 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01b      	beq.n	8003414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0204 	mvn.w	r2, #4
 80033e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2202      	movs	r2, #2
 80033ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f8ac 	bl	8003558 <HAL_TIM_IC_CaptureCallback>
 8003400:	e005      	b.n	800340e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f89e 	bl	8003544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f8af 	bl	800356c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d020      	beq.n	8003460 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01b      	beq.n	8003460 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0208 	mvn.w	r2, #8
 8003430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2204      	movs	r2, #4
 8003436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f886 	bl	8003558 <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f878 	bl	8003544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f889 	bl	800356c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	2b00      	cmp	r3, #0
 8003468:	d020      	beq.n	80034ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f003 0310 	and.w	r3, r3, #16
 8003470:	2b00      	cmp	r3, #0
 8003472:	d01b      	beq.n	80034ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0210 	mvn.w	r2, #16
 800347c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2208      	movs	r2, #8
 8003482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f860 	bl	8003558 <HAL_TIM_IC_CaptureCallback>
 8003498:	e005      	b.n	80034a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f852 	bl	8003544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f863 	bl	800356c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00c      	beq.n	80034d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d007      	beq.n	80034d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0201 	mvn.w	r2, #1
 80034c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd fd84 	bl	8000fd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00c      	beq.n	80034f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80034ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f906 	bl	8003700 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00c      	beq.n	8003518 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f834 	bl	8003580 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00c      	beq.n	800353c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d007      	beq.n	800353c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0220 	mvn.w	r2, #32
 8003534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f8d8 	bl	80036ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800353c:	bf00      	nop
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a46      	ldr	r2, [pc, #280]	@ (80036c0 <TIM_Base_SetConfig+0x12c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d013      	beq.n	80035d4 <TIM_Base_SetConfig+0x40>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035b2:	d00f      	beq.n	80035d4 <TIM_Base_SetConfig+0x40>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a43      	ldr	r2, [pc, #268]	@ (80036c4 <TIM_Base_SetConfig+0x130>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00b      	beq.n	80035d4 <TIM_Base_SetConfig+0x40>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a42      	ldr	r2, [pc, #264]	@ (80036c8 <TIM_Base_SetConfig+0x134>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d007      	beq.n	80035d4 <TIM_Base_SetConfig+0x40>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a41      	ldr	r2, [pc, #260]	@ (80036cc <TIM_Base_SetConfig+0x138>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d003      	beq.n	80035d4 <TIM_Base_SetConfig+0x40>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a40      	ldr	r2, [pc, #256]	@ (80036d0 <TIM_Base_SetConfig+0x13c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d108      	bne.n	80035e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a35      	ldr	r2, [pc, #212]	@ (80036c0 <TIM_Base_SetConfig+0x12c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d02b      	beq.n	8003646 <TIM_Base_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f4:	d027      	beq.n	8003646 <TIM_Base_SetConfig+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a32      	ldr	r2, [pc, #200]	@ (80036c4 <TIM_Base_SetConfig+0x130>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d023      	beq.n	8003646 <TIM_Base_SetConfig+0xb2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a31      	ldr	r2, [pc, #196]	@ (80036c8 <TIM_Base_SetConfig+0x134>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d01f      	beq.n	8003646 <TIM_Base_SetConfig+0xb2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a30      	ldr	r2, [pc, #192]	@ (80036cc <TIM_Base_SetConfig+0x138>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d01b      	beq.n	8003646 <TIM_Base_SetConfig+0xb2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a2f      	ldr	r2, [pc, #188]	@ (80036d0 <TIM_Base_SetConfig+0x13c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d017      	beq.n	8003646 <TIM_Base_SetConfig+0xb2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a2e      	ldr	r2, [pc, #184]	@ (80036d4 <TIM_Base_SetConfig+0x140>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d013      	beq.n	8003646 <TIM_Base_SetConfig+0xb2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a2d      	ldr	r2, [pc, #180]	@ (80036d8 <TIM_Base_SetConfig+0x144>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00f      	beq.n	8003646 <TIM_Base_SetConfig+0xb2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a2c      	ldr	r2, [pc, #176]	@ (80036dc <TIM_Base_SetConfig+0x148>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00b      	beq.n	8003646 <TIM_Base_SetConfig+0xb2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a2b      	ldr	r2, [pc, #172]	@ (80036e0 <TIM_Base_SetConfig+0x14c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d007      	beq.n	8003646 <TIM_Base_SetConfig+0xb2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a2a      	ldr	r2, [pc, #168]	@ (80036e4 <TIM_Base_SetConfig+0x150>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d003      	beq.n	8003646 <TIM_Base_SetConfig+0xb2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a29      	ldr	r2, [pc, #164]	@ (80036e8 <TIM_Base_SetConfig+0x154>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d108      	bne.n	8003658 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800364c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4313      	orrs	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a10      	ldr	r2, [pc, #64]	@ (80036c0 <TIM_Base_SetConfig+0x12c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d003      	beq.n	800368c <TIM_Base_SetConfig+0xf8>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a12      	ldr	r2, [pc, #72]	@ (80036d0 <TIM_Base_SetConfig+0x13c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d103      	bne.n	8003694 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d105      	bne.n	80036b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f023 0201 	bic.w	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	611a      	str	r2, [r3, #16]
  }
}
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40010000 	.word	0x40010000
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40000800 	.word	0x40000800
 80036cc:	40000c00 	.word	0x40000c00
 80036d0:	40010400 	.word	0x40010400
 80036d4:	40014000 	.word	0x40014000
 80036d8:	40014400 	.word	0x40014400
 80036dc:	40014800 	.word	0x40014800
 80036e0:	40001800 	.word	0x40001800
 80036e4:	40001c00 	.word	0x40001c00
 80036e8:	40002000 	.word	0x40002000

080036ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e042      	b.n	80037ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fd fd08 	bl	8001150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2224      	movs	r2, #36	@ 0x24
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003756:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f82b 	bl	80037b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800376c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695a      	ldr	r2, [r3, #20]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800377c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800378c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037b8:	b0c0      	sub	sp, #256	@ 0x100
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d0:	68d9      	ldr	r1, [r3, #12]
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	ea40 0301 	orr.w	r3, r0, r1
 80037dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	431a      	orrs	r2, r3
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800380c:	f021 010c 	bic.w	r1, r1, #12
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800381a:	430b      	orrs	r3, r1
 800381c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800381e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800382a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800382e:	6999      	ldr	r1, [r3, #24]
 8003830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	ea40 0301 	orr.w	r3, r0, r1
 800383a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	4b8f      	ldr	r3, [pc, #572]	@ (8003a80 <UART_SetConfig+0x2cc>)
 8003844:	429a      	cmp	r2, r3
 8003846:	d005      	beq.n	8003854 <UART_SetConfig+0xa0>
 8003848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	4b8d      	ldr	r3, [pc, #564]	@ (8003a84 <UART_SetConfig+0x2d0>)
 8003850:	429a      	cmp	r2, r3
 8003852:	d104      	bne.n	800385e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003854:	f7ff fc76 	bl	8003144 <HAL_RCC_GetPCLK2Freq>
 8003858:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800385c:	e003      	b.n	8003866 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800385e:	f7ff fc5d 	bl	800311c <HAL_RCC_GetPCLK1Freq>
 8003862:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003870:	f040 810c 	bne.w	8003a8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003878:	2200      	movs	r2, #0
 800387a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800387e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003882:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003886:	4622      	mov	r2, r4
 8003888:	462b      	mov	r3, r5
 800388a:	1891      	adds	r1, r2, r2
 800388c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800388e:	415b      	adcs	r3, r3
 8003890:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003892:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003896:	4621      	mov	r1, r4
 8003898:	eb12 0801 	adds.w	r8, r2, r1
 800389c:	4629      	mov	r1, r5
 800389e:	eb43 0901 	adc.w	r9, r3, r1
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038b6:	4690      	mov	r8, r2
 80038b8:	4699      	mov	r9, r3
 80038ba:	4623      	mov	r3, r4
 80038bc:	eb18 0303 	adds.w	r3, r8, r3
 80038c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038c4:	462b      	mov	r3, r5
 80038c6:	eb49 0303 	adc.w	r3, r9, r3
 80038ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80038de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038e2:	460b      	mov	r3, r1
 80038e4:	18db      	adds	r3, r3, r3
 80038e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80038e8:	4613      	mov	r3, r2
 80038ea:	eb42 0303 	adc.w	r3, r2, r3
 80038ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80038f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80038f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80038f8:	f7fc fc72 	bl	80001e0 <__aeabi_uldivmod>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4b61      	ldr	r3, [pc, #388]	@ (8003a88 <UART_SetConfig+0x2d4>)
 8003902:	fba3 2302 	umull	r2, r3, r3, r2
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	011c      	lsls	r4, r3, #4
 800390a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800390e:	2200      	movs	r2, #0
 8003910:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003914:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003918:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800391c:	4642      	mov	r2, r8
 800391e:	464b      	mov	r3, r9
 8003920:	1891      	adds	r1, r2, r2
 8003922:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003924:	415b      	adcs	r3, r3
 8003926:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003928:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800392c:	4641      	mov	r1, r8
 800392e:	eb12 0a01 	adds.w	sl, r2, r1
 8003932:	4649      	mov	r1, r9
 8003934:	eb43 0b01 	adc.w	fp, r3, r1
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003944:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003948:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800394c:	4692      	mov	sl, r2
 800394e:	469b      	mov	fp, r3
 8003950:	4643      	mov	r3, r8
 8003952:	eb1a 0303 	adds.w	r3, sl, r3
 8003956:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800395a:	464b      	mov	r3, r9
 800395c:	eb4b 0303 	adc.w	r3, fp, r3
 8003960:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003970:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003974:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003978:	460b      	mov	r3, r1
 800397a:	18db      	adds	r3, r3, r3
 800397c:	643b      	str	r3, [r7, #64]	@ 0x40
 800397e:	4613      	mov	r3, r2
 8003980:	eb42 0303 	adc.w	r3, r2, r3
 8003984:	647b      	str	r3, [r7, #68]	@ 0x44
 8003986:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800398a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800398e:	f7fc fc27 	bl	80001e0 <__aeabi_uldivmod>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	4611      	mov	r1, r2
 8003998:	4b3b      	ldr	r3, [pc, #236]	@ (8003a88 <UART_SetConfig+0x2d4>)
 800399a:	fba3 2301 	umull	r2, r3, r3, r1
 800399e:	095b      	lsrs	r3, r3, #5
 80039a0:	2264      	movs	r2, #100	@ 0x64
 80039a2:	fb02 f303 	mul.w	r3, r2, r3
 80039a6:	1acb      	subs	r3, r1, r3
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039ae:	4b36      	ldr	r3, [pc, #216]	@ (8003a88 <UART_SetConfig+0x2d4>)
 80039b0:	fba3 2302 	umull	r2, r3, r3, r2
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039bc:	441c      	add	r4, r3
 80039be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039d0:	4642      	mov	r2, r8
 80039d2:	464b      	mov	r3, r9
 80039d4:	1891      	adds	r1, r2, r2
 80039d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039d8:	415b      	adcs	r3, r3
 80039da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80039e0:	4641      	mov	r1, r8
 80039e2:	1851      	adds	r1, r2, r1
 80039e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80039e6:	4649      	mov	r1, r9
 80039e8:	414b      	adcs	r3, r1
 80039ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80039f8:	4659      	mov	r1, fp
 80039fa:	00cb      	lsls	r3, r1, #3
 80039fc:	4651      	mov	r1, sl
 80039fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a02:	4651      	mov	r1, sl
 8003a04:	00ca      	lsls	r2, r1, #3
 8003a06:	4610      	mov	r0, r2
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	4642      	mov	r2, r8
 8003a0e:	189b      	adds	r3, r3, r2
 8003a10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a14:	464b      	mov	r3, r9
 8003a16:	460a      	mov	r2, r1
 8003a18:	eb42 0303 	adc.w	r3, r2, r3
 8003a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a34:	460b      	mov	r3, r1
 8003a36:	18db      	adds	r3, r3, r3
 8003a38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	eb42 0303 	adc.w	r3, r2, r3
 8003a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a4a:	f7fc fbc9 	bl	80001e0 <__aeabi_uldivmod>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4b0d      	ldr	r3, [pc, #52]	@ (8003a88 <UART_SetConfig+0x2d4>)
 8003a54:	fba3 1302 	umull	r1, r3, r3, r2
 8003a58:	095b      	lsrs	r3, r3, #5
 8003a5a:	2164      	movs	r1, #100	@ 0x64
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	3332      	adds	r3, #50	@ 0x32
 8003a66:	4a08      	ldr	r2, [pc, #32]	@ (8003a88 <UART_SetConfig+0x2d4>)
 8003a68:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6c:	095b      	lsrs	r3, r3, #5
 8003a6e:	f003 0207 	and.w	r2, r3, #7
 8003a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4422      	add	r2, r4
 8003a7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a7c:	e106      	b.n	8003c8c <UART_SetConfig+0x4d8>
 8003a7e:	bf00      	nop
 8003a80:	40011000 	.word	0x40011000
 8003a84:	40011400 	.word	0x40011400
 8003a88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a90:	2200      	movs	r2, #0
 8003a92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a9e:	4642      	mov	r2, r8
 8003aa0:	464b      	mov	r3, r9
 8003aa2:	1891      	adds	r1, r2, r2
 8003aa4:	6239      	str	r1, [r7, #32]
 8003aa6:	415b      	adcs	r3, r3
 8003aa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003aae:	4641      	mov	r1, r8
 8003ab0:	1854      	adds	r4, r2, r1
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	eb43 0501 	adc.w	r5, r3, r1
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	00eb      	lsls	r3, r5, #3
 8003ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ac6:	00e2      	lsls	r2, r4, #3
 8003ac8:	4614      	mov	r4, r2
 8003aca:	461d      	mov	r5, r3
 8003acc:	4643      	mov	r3, r8
 8003ace:	18e3      	adds	r3, r4, r3
 8003ad0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ad4:	464b      	mov	r3, r9
 8003ad6:	eb45 0303 	adc.w	r3, r5, r3
 8003ada:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003aea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003afa:	4629      	mov	r1, r5
 8003afc:	008b      	lsls	r3, r1, #2
 8003afe:	4621      	mov	r1, r4
 8003b00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b04:	4621      	mov	r1, r4
 8003b06:	008a      	lsls	r2, r1, #2
 8003b08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b0c:	f7fc fb68 	bl	80001e0 <__aeabi_uldivmod>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4b60      	ldr	r3, [pc, #384]	@ (8003c98 <UART_SetConfig+0x4e4>)
 8003b16:	fba3 2302 	umull	r2, r3, r3, r2
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	011c      	lsls	r4, r3, #4
 8003b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b30:	4642      	mov	r2, r8
 8003b32:	464b      	mov	r3, r9
 8003b34:	1891      	adds	r1, r2, r2
 8003b36:	61b9      	str	r1, [r7, #24]
 8003b38:	415b      	adcs	r3, r3
 8003b3a:	61fb      	str	r3, [r7, #28]
 8003b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b40:	4641      	mov	r1, r8
 8003b42:	1851      	adds	r1, r2, r1
 8003b44:	6139      	str	r1, [r7, #16]
 8003b46:	4649      	mov	r1, r9
 8003b48:	414b      	adcs	r3, r1
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b58:	4659      	mov	r1, fp
 8003b5a:	00cb      	lsls	r3, r1, #3
 8003b5c:	4651      	mov	r1, sl
 8003b5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b62:	4651      	mov	r1, sl
 8003b64:	00ca      	lsls	r2, r1, #3
 8003b66:	4610      	mov	r0, r2
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	4642      	mov	r2, r8
 8003b6e:	189b      	adds	r3, r3, r2
 8003b70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b74:	464b      	mov	r3, r9
 8003b76:	460a      	mov	r2, r1
 8003b78:	eb42 0303 	adc.w	r3, r2, r3
 8003b7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b98:	4649      	mov	r1, r9
 8003b9a:	008b      	lsls	r3, r1, #2
 8003b9c:	4641      	mov	r1, r8
 8003b9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ba2:	4641      	mov	r1, r8
 8003ba4:	008a      	lsls	r2, r1, #2
 8003ba6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003baa:	f7fc fb19 	bl	80001e0 <__aeabi_uldivmod>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	4b38      	ldr	r3, [pc, #224]	@ (8003c98 <UART_SetConfig+0x4e4>)
 8003bb6:	fba3 2301 	umull	r2, r3, r3, r1
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	2264      	movs	r2, #100	@ 0x64
 8003bbe:	fb02 f303 	mul.w	r3, r2, r3
 8003bc2:	1acb      	subs	r3, r1, r3
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	3332      	adds	r3, #50	@ 0x32
 8003bc8:	4a33      	ldr	r2, [pc, #204]	@ (8003c98 <UART_SetConfig+0x4e4>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bd4:	441c      	add	r4, r3
 8003bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bda:	2200      	movs	r2, #0
 8003bdc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bde:	677a      	str	r2, [r7, #116]	@ 0x74
 8003be0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003be4:	4642      	mov	r2, r8
 8003be6:	464b      	mov	r3, r9
 8003be8:	1891      	adds	r1, r2, r2
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	415b      	adcs	r3, r3
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bf4:	4641      	mov	r1, r8
 8003bf6:	1851      	adds	r1, r2, r1
 8003bf8:	6039      	str	r1, [r7, #0]
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	414b      	adcs	r3, r1
 8003bfe:	607b      	str	r3, [r7, #4]
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c0c:	4659      	mov	r1, fp
 8003c0e:	00cb      	lsls	r3, r1, #3
 8003c10:	4651      	mov	r1, sl
 8003c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c16:	4651      	mov	r1, sl
 8003c18:	00ca      	lsls	r2, r1, #3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4603      	mov	r3, r0
 8003c20:	4642      	mov	r2, r8
 8003c22:	189b      	adds	r3, r3, r2
 8003c24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c26:	464b      	mov	r3, r9
 8003c28:	460a      	mov	r2, r1
 8003c2a:	eb42 0303 	adc.w	r3, r2, r3
 8003c2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c48:	4649      	mov	r1, r9
 8003c4a:	008b      	lsls	r3, r1, #2
 8003c4c:	4641      	mov	r1, r8
 8003c4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c52:	4641      	mov	r1, r8
 8003c54:	008a      	lsls	r2, r1, #2
 8003c56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c5a:	f7fc fac1 	bl	80001e0 <__aeabi_uldivmod>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4b0d      	ldr	r3, [pc, #52]	@ (8003c98 <UART_SetConfig+0x4e4>)
 8003c64:	fba3 1302 	umull	r1, r3, r3, r2
 8003c68:	095b      	lsrs	r3, r3, #5
 8003c6a:	2164      	movs	r1, #100	@ 0x64
 8003c6c:	fb01 f303 	mul.w	r3, r1, r3
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	3332      	adds	r3, #50	@ 0x32
 8003c76:	4a08      	ldr	r2, [pc, #32]	@ (8003c98 <UART_SetConfig+0x4e4>)
 8003c78:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7c:	095b      	lsrs	r3, r3, #5
 8003c7e:	f003 020f 	and.w	r2, r3, #15
 8003c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4422      	add	r2, r4
 8003c8a:	609a      	str	r2, [r3, #8]
}
 8003c8c:	bf00      	nop
 8003c8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c92:	46bd      	mov	sp, r7
 8003c94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c98:	51eb851f 	.word	0x51eb851f

08003c9c <LCD16X2_DATA>:
#include "../../Util/Util.h"

//-----[ Alphanumeric LCD16X2 Functions ]-----

void LCD16X2_DATA(uint8_t LCD16X2_Index, unsigned char Data)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	460a      	mov	r2, r1
 8003ca6:	71fb      	strb	r3, [r7, #7]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	71bb      	strb	r3, [r7, #6]
    if(Data & 1)
 8003cac:	79bb      	ldrb	r3, [r7, #6]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d014      	beq.n	8003ce0 <LCD16X2_DATA+0x44>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D4_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D4_PINx, 1);
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	4a5a      	ldr	r2, [pc, #360]	@ (8003e24 <LCD16X2_DATA+0x188>)
 8003cba:	2134      	movs	r1, #52	@ 0x34
 8003cbc:	fb01 f303 	mul.w	r3, r1, r3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	4a56      	ldr	r2, [pc, #344]	@ (8003e24 <LCD16X2_DATA+0x188>)
 8003cca:	2134      	movs	r1, #52	@ 0x34
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	4619      	mov	r1, r3
 8003cda:	f7fe fdbb 	bl	8002854 <HAL_GPIO_WritePin>
 8003cde:	e013      	b.n	8003d08 <LCD16X2_DATA+0x6c>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D4_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D4_PINx, 0);
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	4a50      	ldr	r2, [pc, #320]	@ (8003e24 <LCD16X2_DATA+0x188>)
 8003ce4:	2134      	movs	r1, #52	@ 0x34
 8003ce6:	fb01 f303 	mul.w	r3, r1, r3
 8003cea:	4413      	add	r3, r2
 8003cec:	3304      	adds	r3, #4
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	4a4c      	ldr	r2, [pc, #304]	@ (8003e24 <LCD16X2_DATA+0x188>)
 8003cf4:	2134      	movs	r1, #52	@ 0x34
 8003cf6:	fb01 f303 	mul.w	r3, r1, r3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3308      	adds	r3, #8
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	2200      	movs	r2, #0
 8003d02:	4619      	mov	r1, r3
 8003d04:	f7fe fda6 	bl	8002854 <HAL_GPIO_WritePin>
    if(Data & 2)
 8003d08:	79bb      	ldrb	r3, [r7, #6]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d014      	beq.n	8003d3c <LCD16X2_DATA+0xa0>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D5_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D5_PINx, 1);
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	4a43      	ldr	r2, [pc, #268]	@ (8003e24 <LCD16X2_DATA+0x188>)
 8003d16:	2134      	movs	r1, #52	@ 0x34
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	330c      	adds	r3, #12
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	4a3f      	ldr	r2, [pc, #252]	@ (8003e24 <LCD16X2_DATA+0x188>)
 8003d26:	2134      	movs	r1, #52	@ 0x34
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	3310      	adds	r3, #16
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	2201      	movs	r2, #1
 8003d34:	4619      	mov	r1, r3
 8003d36:	f7fe fd8d 	bl	8002854 <HAL_GPIO_WritePin>
 8003d3a:	e013      	b.n	8003d64 <LCD16X2_DATA+0xc8>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D5_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D5_PINx, 0);
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
 8003d3e:	4a39      	ldr	r2, [pc, #228]	@ (8003e24 <LCD16X2_DATA+0x188>)
 8003d40:	2134      	movs	r1, #52	@ 0x34
 8003d42:	fb01 f303 	mul.w	r3, r1, r3
 8003d46:	4413      	add	r3, r2
 8003d48:	330c      	adds	r3, #12
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	79fb      	ldrb	r3, [r7, #7]
 8003d4e:	4a35      	ldr	r2, [pc, #212]	@ (8003e24 <LCD16X2_DATA+0x188>)
 8003d50:	2134      	movs	r1, #52	@ 0x34
 8003d52:	fb01 f303 	mul.w	r3, r1, r3
 8003d56:	4413      	add	r3, r2
 8003d58:	3310      	adds	r3, #16
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	4619      	mov	r1, r3
 8003d60:	f7fe fd78 	bl	8002854 <HAL_GPIO_WritePin>
    if(Data & 4)
 8003d64:	79bb      	ldrb	r3, [r7, #6]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d014      	beq.n	8003d98 <LCD16X2_DATA+0xfc>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D6_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D6_PINx, 1);
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	4a2c      	ldr	r2, [pc, #176]	@ (8003e24 <LCD16X2_DATA+0x188>)
 8003d72:	2134      	movs	r1, #52	@ 0x34
 8003d74:	fb01 f303 	mul.w	r3, r1, r3
 8003d78:	4413      	add	r3, r2
 8003d7a:	3314      	adds	r3, #20
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	4a28      	ldr	r2, [pc, #160]	@ (8003e24 <LCD16X2_DATA+0x188>)
 8003d82:	2134      	movs	r1, #52	@ 0x34
 8003d84:	fb01 f303 	mul.w	r3, r1, r3
 8003d88:	4413      	add	r3, r2
 8003d8a:	3318      	adds	r3, #24
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	4619      	mov	r1, r3
 8003d92:	f7fe fd5f 	bl	8002854 <HAL_GPIO_WritePin>
 8003d96:	e013      	b.n	8003dc0 <LCD16X2_DATA+0x124>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D6_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D6_PINx, 0);
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	4a22      	ldr	r2, [pc, #136]	@ (8003e24 <LCD16X2_DATA+0x188>)
 8003d9c:	2134      	movs	r1, #52	@ 0x34
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	3314      	adds	r3, #20
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	4a1e      	ldr	r2, [pc, #120]	@ (8003e24 <LCD16X2_DATA+0x188>)
 8003dac:	2134      	movs	r1, #52	@ 0x34
 8003dae:	fb01 f303 	mul.w	r3, r1, r3
 8003db2:	4413      	add	r3, r2
 8003db4:	3318      	adds	r3, #24
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	2200      	movs	r2, #0
 8003dba:	4619      	mov	r1, r3
 8003dbc:	f7fe fd4a 	bl	8002854 <HAL_GPIO_WritePin>
    if(Data & 8)
 8003dc0:	79bb      	ldrb	r3, [r7, #6]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d014      	beq.n	8003df4 <LCD16X2_DATA+0x158>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 1);
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	4a15      	ldr	r2, [pc, #84]	@ (8003e24 <LCD16X2_DATA+0x188>)
 8003dce:	2134      	movs	r1, #52	@ 0x34
 8003dd0:	fb01 f303 	mul.w	r3, r1, r3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	331c      	adds	r3, #28
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	4a11      	ldr	r2, [pc, #68]	@ (8003e24 <LCD16X2_DATA+0x188>)
 8003dde:	2134      	movs	r1, #52	@ 0x34
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	4413      	add	r3, r2
 8003de6:	3320      	adds	r3, #32
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	2201      	movs	r2, #1
 8003dec:	4619      	mov	r1, r3
 8003dee:	f7fe fd31 	bl	8002854 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 0);
}
 8003df2:	e013      	b.n	8003e1c <LCD16X2_DATA+0x180>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 0);
 8003df4:	79fb      	ldrb	r3, [r7, #7]
 8003df6:	4a0b      	ldr	r2, [pc, #44]	@ (8003e24 <LCD16X2_DATA+0x188>)
 8003df8:	2134      	movs	r1, #52	@ 0x34
 8003dfa:	fb01 f303 	mul.w	r3, r1, r3
 8003dfe:	4413      	add	r3, r2
 8003e00:	331c      	adds	r3, #28
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	4a07      	ldr	r2, [pc, #28]	@ (8003e24 <LCD16X2_DATA+0x188>)
 8003e08:	2134      	movs	r1, #52	@ 0x34
 8003e0a:	fb01 f303 	mul.w	r3, r1, r3
 8003e0e:	4413      	add	r3, r2
 8003e10:	3320      	adds	r3, #32
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	2200      	movs	r2, #0
 8003e16:	4619      	mov	r1, r3
 8003e18:	f7fe fd1c 	bl	8002854 <HAL_GPIO_WritePin>
}
 8003e1c:	bf00      	nop
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	08007744 	.word	0x08007744

08003e28 <LCD16X2_CMD>:

void LCD16X2_CMD(uint8_t LCD16X2_Index, unsigned char CMD)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	460a      	mov	r2, r1
 8003e32:	71fb      	strb	r3, [r7, #7]
 8003e34:	4613      	mov	r3, r2
 8003e36:	71bb      	strb	r3, [r7, #6]
    // Select Command Register
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 0);
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	4a57      	ldr	r2, [pc, #348]	@ (8003f98 <LCD16X2_CMD+0x170>)
 8003e3c:	2134      	movs	r1, #52	@ 0x34
 8003e3e:	fb01 f303 	mul.w	r3, r1, r3
 8003e42:	4413      	add	r3, r2
 8003e44:	332c      	adds	r3, #44	@ 0x2c
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	4a53      	ldr	r2, [pc, #332]	@ (8003f98 <LCD16X2_CMD+0x170>)
 8003e4c:	2134      	movs	r1, #52	@ 0x34
 8003e4e:	fb01 f303 	mul.w	r3, r1, r3
 8003e52:	4413      	add	r3, r2
 8003e54:	3330      	adds	r3, #48	@ 0x30
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	f7fe fcfa 	bl	8002854 <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
	LCD16X2_DATA(LCD16X2_Index, CMD);
 8003e60:	79ba      	ldrb	r2, [r7, #6]
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	4611      	mov	r1, r2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff ff18 	bl	8003c9c <LCD16X2_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8003e6c:	79fb      	ldrb	r3, [r7, #7]
 8003e6e:	4a4a      	ldr	r2, [pc, #296]	@ (8003f98 <LCD16X2_CMD+0x170>)
 8003e70:	2134      	movs	r1, #52	@ 0x34
 8003e72:	fb01 f303 	mul.w	r3, r1, r3
 8003e76:	4413      	add	r3, r2
 8003e78:	3324      	adds	r3, #36	@ 0x24
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	4a46      	ldr	r2, [pc, #280]	@ (8003f98 <LCD16X2_CMD+0x170>)
 8003e80:	2134      	movs	r1, #52	@ 0x34
 8003e82:	fb01 f303 	mul.w	r3, r1, r3
 8003e86:	4413      	add	r3, r2
 8003e88:	3328      	adds	r3, #40	@ 0x28
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	4619      	mov	r1, r3
 8003e90:	f7fe fce0 	bl	8002854 <HAL_GPIO_WritePin>
    DELAY_US(5);
 8003e94:	4b41      	ldr	r3, [pc, #260]	@ (8003f9c <LCD16X2_CMD+0x174>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	61fb      	str	r3, [r7, #28]
 8003e9a:	4b41      	ldr	r3, [pc, #260]	@ (8003fa0 <LCD16X2_CMD+0x178>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a41      	ldr	r2, [pc, #260]	@ (8003fa4 <LCD16X2_CMD+0x17c>)
 8003ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea4:	0c9a      	lsrs	r2, r3, #18
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	441a      	add	r2, r3
 8003eac:	4b3c      	ldr	r3, [pc, #240]	@ (8003fa0 <LCD16X2_CMD+0x178>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	493c      	ldr	r1, [pc, #240]	@ (8003fa4 <LCD16X2_CMD+0x17c>)
 8003eb2:	fba1 1303 	umull	r1, r3, r1, r3
 8003eb6:	0c9b      	lsrs	r3, r3, #18
 8003eb8:	085b      	lsrs	r3, r3, #1
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	4b37      	ldr	r3, [pc, #220]	@ (8003f9c <LCD16X2_CMD+0x174>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	69fa      	ldr	r2, [r7, #28]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d8f8      	bhi.n	8003ebe <LCD16X2_CMD+0x96>
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 8003ecc:	79fb      	ldrb	r3, [r7, #7]
 8003ece:	4a32      	ldr	r2, [pc, #200]	@ (8003f98 <LCD16X2_CMD+0x170>)
 8003ed0:	2134      	movs	r1, #52	@ 0x34
 8003ed2:	fb01 f303 	mul.w	r3, r1, r3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	3324      	adds	r3, #36	@ 0x24
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	4a2e      	ldr	r2, [pc, #184]	@ (8003f98 <LCD16X2_CMD+0x170>)
 8003ee0:	2134      	movs	r1, #52	@ 0x34
 8003ee2:	fb01 f303 	mul.w	r3, r1, r3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3328      	adds	r3, #40	@ 0x28
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	2201      	movs	r2, #1
 8003eee:	4619      	mov	r1, r3
 8003ef0:	f7fe fcb0 	bl	8002854 <HAL_GPIO_WritePin>
    DELAY_US(5);
 8003ef4:	4b29      	ldr	r3, [pc, #164]	@ (8003f9c <LCD16X2_CMD+0x174>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	4b29      	ldr	r3, [pc, #164]	@ (8003fa0 <LCD16X2_CMD+0x178>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a29      	ldr	r2, [pc, #164]	@ (8003fa4 <LCD16X2_CMD+0x17c>)
 8003f00:	fba2 2303 	umull	r2, r3, r2, r3
 8003f04:	0c9a      	lsrs	r2, r3, #18
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	441a      	add	r2, r3
 8003f0c:	4b24      	ldr	r3, [pc, #144]	@ (8003fa0 <LCD16X2_CMD+0x178>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4924      	ldr	r1, [pc, #144]	@ (8003fa4 <LCD16X2_CMD+0x17c>)
 8003f12:	fba1 1303 	umull	r1, r3, r1, r3
 8003f16:	0c9b      	lsrs	r3, r3, #18
 8003f18:	085b      	lsrs	r3, r3, #1
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8003f9c <LCD16X2_CMD+0x174>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d8f8      	bhi.n	8003f1e <LCD16X2_CMD+0xf6>
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8003f98 <LCD16X2_CMD+0x170>)
 8003f30:	2134      	movs	r1, #52	@ 0x34
 8003f32:	fb01 f303 	mul.w	r3, r1, r3
 8003f36:	4413      	add	r3, r2
 8003f38:	3324      	adds	r3, #36	@ 0x24
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
 8003f3e:	4a16      	ldr	r2, [pc, #88]	@ (8003f98 <LCD16X2_CMD+0x170>)
 8003f40:	2134      	movs	r1, #52	@ 0x34
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	3328      	adds	r3, #40	@ 0x28
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	4619      	mov	r1, r3
 8003f50:	f7fe fc80 	bl	8002854 <HAL_GPIO_WritePin>
    DELAY_US(100);
 8003f54:	4b11      	ldr	r3, [pc, #68]	@ (8003f9c <LCD16X2_CMD+0x174>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	4b11      	ldr	r3, [pc, #68]	@ (8003fa0 <LCD16X2_CMD+0x178>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a11      	ldr	r2, [pc, #68]	@ (8003fa4 <LCD16X2_CMD+0x17c>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	0c9b      	lsrs	r3, r3, #18
 8003f66:	2264      	movs	r2, #100	@ 0x64
 8003f68:	fb03 f202 	mul.w	r2, r3, r2
 8003f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa0 <LCD16X2_CMD+0x178>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	490c      	ldr	r1, [pc, #48]	@ (8003fa4 <LCD16X2_CMD+0x17c>)
 8003f72:	fba1 1303 	umull	r1, r3, r1, r3
 8003f76:	0c9b      	lsrs	r3, r3, #18
 8003f78:	085b      	lsrs	r3, r3, #1
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	4b07      	ldr	r3, [pc, #28]	@ (8003f9c <LCD16X2_CMD+0x174>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d8f8      	bhi.n	8003f7e <LCD16X2_CMD+0x156>
}
 8003f8c:	bf00      	nop
 8003f8e:	bf00      	nop
 8003f90:	3720      	adds	r7, #32
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	08007744 	.word	0x08007744
 8003f9c:	e000e010 	.word	0xe000e010
 8003fa0:	200001ac 	.word	0x200001ac
 8003fa4:	431bde83 	.word	0x431bde83

08003fa8 <LCD16X2_Clear>:

void LCD16X2_Clear(uint8_t LCD16X2_Index)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	71fb      	strb	r3, [r7, #7]
	LCD16X2_CMD(LCD16X2_Index, 0);
 8003fb2:	79fb      	ldrb	r3, [r7, #7]
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff ff36 	bl	8003e28 <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 1);
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff ff31 	bl	8003e28 <LCD16X2_CMD>
    DELAY_MS(2);
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	e01f      	b.n	800400c <LCD16X2_Clear+0x64>
 8003fcc:	4b13      	ldr	r3, [pc, #76]	@ (800401c <LCD16X2_Clear+0x74>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	4b13      	ldr	r3, [pc, #76]	@ (8004020 <LCD16X2_Clear+0x78>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a13      	ldr	r2, [pc, #76]	@ (8004024 <LCD16X2_Clear+0x7c>)
 8003fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fdc:	0c9b      	lsrs	r3, r3, #18
 8003fde:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003fe2:	fb03 f202 	mul.w	r2, r3, r2
 8003fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8004020 <LCD16X2_Clear+0x78>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	490e      	ldr	r1, [pc, #56]	@ (8004024 <LCD16X2_Clear+0x7c>)
 8003fec:	fba1 1303 	umull	r1, r3, r1, r3
 8003ff0:	0c9b      	lsrs	r3, r3, #18
 8003ff2:	085b      	lsrs	r3, r3, #1
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	4b08      	ldr	r3, [pc, #32]	@ (800401c <LCD16X2_Clear+0x74>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	429a      	cmp	r2, r3
 8004004:	d8f8      	bhi.n	8003ff8 <LCD16X2_Clear+0x50>
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	3301      	adds	r3, #1
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d9dc      	bls.n	8003fcc <LCD16X2_Clear+0x24>
}
 8004012:	bf00      	nop
 8004014:	bf00      	nop
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	e000e010 	.word	0xe000e010
 8004020:	200001ac 	.word	0x200001ac
 8004024:	431bde83 	.word	0x431bde83

08004028 <LCD16X2_Set_Cursor>:

void LCD16X2_Set_Cursor(uint8_t LCD16X2_Index, unsigned char r, unsigned char c)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	71fb      	strb	r3, [r7, #7]
 8004032:	460b      	mov	r3, r1
 8004034:	71bb      	strb	r3, [r7, #6]
 8004036:	4613      	mov	r3, r2
 8004038:	717b      	strb	r3, [r7, #5]
    unsigned char Temp,Low4,High4;
    if(r == 1)
 800403a:	79bb      	ldrb	r3, [r7, #6]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d115      	bne.n	800406c <LCD16X2_Set_Cursor+0x44>
    {
      Temp  = 0x80 + c - 1; //0x80 is used to move the cursor
 8004040:	797b      	ldrb	r3, [r7, #5]
 8004042:	337f      	adds	r3, #127	@ 0x7f
 8004044:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 8004046:	7bfb      	ldrb	r3, [r7, #15]
 8004048:	091b      	lsrs	r3, r3, #4
 800404a:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	737b      	strb	r3, [r7, #13]
      LCD16X2_CMD(LCD16X2_Index, High4);
 8004054:	7bba      	ldrb	r2, [r7, #14]
 8004056:	79fb      	ldrb	r3, [r7, #7]
 8004058:	4611      	mov	r1, r2
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff fee4 	bl	8003e28 <LCD16X2_CMD>
      LCD16X2_CMD(LCD16X2_Index, Low4);
 8004060:	7b7a      	ldrb	r2, [r7, #13]
 8004062:	79fb      	ldrb	r3, [r7, #7]
 8004064:	4611      	mov	r1, r2
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff fede 	bl	8003e28 <LCD16X2_CMD>
    }
    if(r == 2)
 800406c:	79bb      	ldrb	r3, [r7, #6]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d115      	bne.n	800409e <LCD16X2_Set_Cursor+0x76>
    {
      Temp  = 0xC0 + c - 1;
 8004072:	797b      	ldrb	r3, [r7, #5]
 8004074:	3b41      	subs	r3, #65	@ 0x41
 8004076:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	091b      	lsrs	r3, r3, #4
 800407c:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	737b      	strb	r3, [r7, #13]
      LCD16X2_CMD(LCD16X2_Index, High4);
 8004086:	7bba      	ldrb	r2, [r7, #14]
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	4611      	mov	r1, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff fecb 	bl	8003e28 <LCD16X2_CMD>
      LCD16X2_CMD(LCD16X2_Index, Low4);
 8004092:	7b7a      	ldrb	r2, [r7, #13]
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	4611      	mov	r1, r2
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff fec5 	bl	8003e28 <LCD16X2_CMD>
    }
}
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <LCD16X2_Init>:

void LCD16X2_Init(uint8_t LCD16X2_Index)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08e      	sub	sp, #56	@ 0x38
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 80040b2:	bf00      	nop
 80040b4:	f7fd f9aa 	bl	800140c <HAL_GetTick>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b31      	cmp	r3, #49	@ 0x31
 80040bc:	d9fa      	bls.n	80040b4 <LCD16X2_Init+0xc>
	// The Init. Procedure As Described In The Datasheet
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 0);
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	4a7c      	ldr	r2, [pc, #496]	@ (80042b4 <LCD16X2_Init+0x20c>)
 80040c2:	2134      	movs	r1, #52	@ 0x34
 80040c4:	fb01 f303 	mul.w	r3, r1, r3
 80040c8:	4413      	add	r3, r2
 80040ca:	332c      	adds	r3, #44	@ 0x2c
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	4a78      	ldr	r2, [pc, #480]	@ (80042b4 <LCD16X2_Init+0x20c>)
 80040d2:	2134      	movs	r1, #52	@ 0x34
 80040d4:	fb01 f303 	mul.w	r3, r1, r3
 80040d8:	4413      	add	r3, r2
 80040da:	3330      	adds	r3, #48	@ 0x30
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	2200      	movs	r2, #0
 80040e0:	4619      	mov	r1, r3
 80040e2:	f7fe fbb7 	bl	8002854 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	4a72      	ldr	r2, [pc, #456]	@ (80042b4 <LCD16X2_Init+0x20c>)
 80040ea:	2134      	movs	r1, #52	@ 0x34
 80040ec:	fb01 f303 	mul.w	r3, r1, r3
 80040f0:	4413      	add	r3, r2
 80040f2:	3324      	adds	r3, #36	@ 0x24
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	4a6e      	ldr	r2, [pc, #440]	@ (80042b4 <LCD16X2_Init+0x20c>)
 80040fa:	2134      	movs	r1, #52	@ 0x34
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	4413      	add	r3, r2
 8004102:	3328      	adds	r3, #40	@ 0x28
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	2200      	movs	r2, #0
 8004108:	4619      	mov	r1, r3
 800410a:	f7fe fba3 	bl	8002854 <HAL_GPIO_WritePin>
    // Init in 4-Bit Data Mode
	LCD16X2_DATA(LCD16X2_Index, 0x00);
 800410e:	79fb      	ldrb	r3, [r7, #7]
 8004110:	2100      	movs	r1, #0
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff fdc2 	bl	8003c9c <LCD16X2_DATA>
    DELAY_MS(150);
 8004118:	2300      	movs	r3, #0
 800411a:	637b      	str	r3, [r7, #52]	@ 0x34
 800411c:	e01f      	b.n	800415e <LCD16X2_Init+0xb6>
 800411e:	4b66      	ldr	r3, [pc, #408]	@ (80042b8 <LCD16X2_Init+0x210>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	4b65      	ldr	r3, [pc, #404]	@ (80042bc <LCD16X2_Init+0x214>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a65      	ldr	r2, [pc, #404]	@ (80042c0 <LCD16X2_Init+0x218>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	0c9b      	lsrs	r3, r3, #18
 8004130:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004134:	fb03 f202 	mul.w	r2, r3, r2
 8004138:	4b60      	ldr	r3, [pc, #384]	@ (80042bc <LCD16X2_Init+0x214>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4960      	ldr	r1, [pc, #384]	@ (80042c0 <LCD16X2_Init+0x218>)
 800413e:	fba1 1303 	umull	r1, r3, r1, r3
 8004142:	0c9b      	lsrs	r3, r3, #18
 8004144:	085b      	lsrs	r3, r3, #1
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	4b5b      	ldr	r3, [pc, #364]	@ (80042b8 <LCD16X2_Init+0x210>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	429a      	cmp	r2, r3
 8004156:	d8f8      	bhi.n	800414a <LCD16X2_Init+0xa2>
 8004158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800415a:	3301      	adds	r3, #1
 800415c:	637b      	str	r3, [r7, #52]	@ 0x34
 800415e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004160:	2b95      	cmp	r3, #149	@ 0x95
 8004162:	d9dc      	bls.n	800411e <LCD16X2_Init+0x76>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	2103      	movs	r1, #3
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fe5d 	bl	8003e28 <LCD16X2_CMD>
    DELAY_MS(5);
 800416e:	2300      	movs	r3, #0
 8004170:	633b      	str	r3, [r7, #48]	@ 0x30
 8004172:	e01f      	b.n	80041b4 <LCD16X2_Init+0x10c>
 8004174:	4b50      	ldr	r3, [pc, #320]	@ (80042b8 <LCD16X2_Init+0x210>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	61bb      	str	r3, [r7, #24]
 800417a:	4b50      	ldr	r3, [pc, #320]	@ (80042bc <LCD16X2_Init+0x214>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a50      	ldr	r2, [pc, #320]	@ (80042c0 <LCD16X2_Init+0x218>)
 8004180:	fba2 2303 	umull	r2, r3, r2, r3
 8004184:	0c9b      	lsrs	r3, r3, #18
 8004186:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800418a:	fb03 f202 	mul.w	r2, r3, r2
 800418e:	4b4b      	ldr	r3, [pc, #300]	@ (80042bc <LCD16X2_Init+0x214>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	494b      	ldr	r1, [pc, #300]	@ (80042c0 <LCD16X2_Init+0x218>)
 8004194:	fba1 1303 	umull	r1, r3, r1, r3
 8004198:	0c9b      	lsrs	r3, r3, #18
 800419a:	085b      	lsrs	r3, r3, #1
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	4b45      	ldr	r3, [pc, #276]	@ (80042b8 <LCD16X2_Init+0x210>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d8f8      	bhi.n	80041a0 <LCD16X2_Init+0xf8>
 80041ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b0:	3301      	adds	r3, #1
 80041b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80041b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d9dc      	bls.n	8004174 <LCD16X2_Init+0xcc>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 80041ba:	79fb      	ldrb	r3, [r7, #7]
 80041bc:	2103      	movs	r1, #3
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff fe32 	bl	8003e28 <LCD16X2_CMD>
    DELAY_MS(5);
 80041c4:	2300      	movs	r3, #0
 80041c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041c8:	e01f      	b.n	800420a <LCD16X2_Init+0x162>
 80041ca:	4b3b      	ldr	r3, [pc, #236]	@ (80042b8 <LCD16X2_Init+0x210>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	623b      	str	r3, [r7, #32]
 80041d0:	4b3a      	ldr	r3, [pc, #232]	@ (80042bc <LCD16X2_Init+0x214>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a3a      	ldr	r2, [pc, #232]	@ (80042c0 <LCD16X2_Init+0x218>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	0c9b      	lsrs	r3, r3, #18
 80041dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80041e0:	fb03 f202 	mul.w	r2, r3, r2
 80041e4:	4b35      	ldr	r3, [pc, #212]	@ (80042bc <LCD16X2_Init+0x214>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4935      	ldr	r1, [pc, #212]	@ (80042c0 <LCD16X2_Init+0x218>)
 80041ea:	fba1 1303 	umull	r1, r3, r1, r3
 80041ee:	0c9b      	lsrs	r3, r3, #18
 80041f0:	085b      	lsrs	r3, r3, #1
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	61fb      	str	r3, [r7, #28]
 80041f6:	4b30      	ldr	r3, [pc, #192]	@ (80042b8 <LCD16X2_Init+0x210>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	6a3a      	ldr	r2, [r7, #32]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	429a      	cmp	r2, r3
 8004202:	d8f8      	bhi.n	80041f6 <LCD16X2_Init+0x14e>
 8004204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004206:	3301      	adds	r3, #1
 8004208:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800420a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800420c:	2b04      	cmp	r3, #4
 800420e:	d9dc      	bls.n	80041ca <LCD16X2_Init+0x122>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 8004210:	79fb      	ldrb	r3, [r7, #7]
 8004212:	2103      	movs	r1, #3
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff fe07 	bl	8003e28 <LCD16X2_CMD>
    DELAY_US(150);
 800421a:	4b27      	ldr	r3, [pc, #156]	@ (80042b8 <LCD16X2_Init+0x210>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004220:	4b26      	ldr	r3, [pc, #152]	@ (80042bc <LCD16X2_Init+0x214>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a26      	ldr	r2, [pc, #152]	@ (80042c0 <LCD16X2_Init+0x218>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	0c9b      	lsrs	r3, r3, #18
 800422c:	2296      	movs	r2, #150	@ 0x96
 800422e:	fb03 f202 	mul.w	r2, r3, r2
 8004232:	4b22      	ldr	r3, [pc, #136]	@ (80042bc <LCD16X2_Init+0x214>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4922      	ldr	r1, [pc, #136]	@ (80042c0 <LCD16X2_Init+0x218>)
 8004238:	fba1 1303 	umull	r1, r3, r1, r3
 800423c:	0c9b      	lsrs	r3, r3, #18
 800423e:	085b      	lsrs	r3, r3, #1
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	627b      	str	r3, [r7, #36]	@ 0x24
 8004244:	4b1c      	ldr	r3, [pc, #112]	@ (80042b8 <LCD16X2_Init+0x210>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800424e:	429a      	cmp	r2, r3
 8004250:	d8f8      	bhi.n	8004244 <LCD16X2_Init+0x19c>
    // The Rest of The Init Sequence As Defined in The Hitachi HD44780 Datasheet
    LCD16X2_CMD(LCD16X2_Index, 0x02);
 8004252:	79fb      	ldrb	r3, [r7, #7]
 8004254:	2102      	movs	r1, #2
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff fde6 	bl	8003e28 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x02);
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	2102      	movs	r1, #2
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fde1 	bl	8003e28 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x08);
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	2108      	movs	r1, #8
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fddc 	bl	8003e28 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	2100      	movs	r1, #0
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff fdd7 	bl	8003e28 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x0C);
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	210c      	movs	r1, #12
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff fdd2 	bl	8003e28 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	2100      	movs	r1, #0
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff fdcd 	bl	8003e28 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x06);
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	2106      	movs	r1, #6
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff fdc8 	bl	8003e28 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	2100      	movs	r1, #0
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff fdc3 	bl	8003e28 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x01);
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	2101      	movs	r1, #1
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff fdbe 	bl	8003e28 <LCD16X2_CMD>
}
 80042ac:	bf00      	nop
 80042ae:	3738      	adds	r7, #56	@ 0x38
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	08007744 	.word	0x08007744
 80042b8:	e000e010 	.word	0xe000e010
 80042bc:	200001ac 	.word	0x200001ac
 80042c0:	431bde83 	.word	0x431bde83

080042c4 <LCD16X2_Write_Char>:

void LCD16X2_Write_Char(uint8_t LCD16X2_Index, char Data)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b090      	sub	sp, #64	@ 0x40
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	460a      	mov	r2, r1
 80042ce:	71fb      	strb	r3, [r7, #7]
 80042d0:	4613      	mov	r3, r2
 80042d2:	71bb      	strb	r3, [r7, #6]
   char Low4,High4;
   Low4  = Data & 0x0F;
 80042d4:	79bb      	ldrb	r3, [r7, #6]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
   High4 = Data & 0xF0;
 80042de:	79bb      	ldrb	r3, [r7, #6]
 80042e0:	f023 030f 	bic.w	r3, r3, #15
 80042e4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 1);
 80042e8:	79fb      	ldrb	r3, [r7, #7]
 80042ea:	4aa4      	ldr	r2, [pc, #656]	@ (800457c <LCD16X2_Write_Char+0x2b8>)
 80042ec:	2134      	movs	r1, #52	@ 0x34
 80042ee:	fb01 f303 	mul.w	r3, r1, r3
 80042f2:	4413      	add	r3, r2
 80042f4:	332c      	adds	r3, #44	@ 0x2c
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	4aa0      	ldr	r2, [pc, #640]	@ (800457c <LCD16X2_Write_Char+0x2b8>)
 80042fc:	2134      	movs	r1, #52	@ 0x34
 80042fe:	fb01 f303 	mul.w	r3, r1, r3
 8004302:	4413      	add	r3, r2
 8004304:	3330      	adds	r3, #48	@ 0x30
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	2201      	movs	r2, #1
 800430a:	4619      	mov	r1, r3
 800430c:	f7fe faa2 	bl	8002854 <HAL_GPIO_WritePin>

   LCD16X2_DATA(LCD16X2_Index, (High4>>4));
 8004310:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004314:	091b      	lsrs	r3, r3, #4
 8004316:	b2da      	uxtb	r2, r3
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	4611      	mov	r1, r2
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff fcbd 	bl	8003c9c <LCD16X2_DATA>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	4a95      	ldr	r2, [pc, #596]	@ (800457c <LCD16X2_Write_Char+0x2b8>)
 8004326:	2134      	movs	r1, #52	@ 0x34
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	4413      	add	r3, r2
 800432e:	3324      	adds	r3, #36	@ 0x24
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	4a91      	ldr	r2, [pc, #580]	@ (800457c <LCD16X2_Write_Char+0x2b8>)
 8004336:	2134      	movs	r1, #52	@ 0x34
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	4413      	add	r3, r2
 800433e:	3328      	adds	r3, #40	@ 0x28
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	2200      	movs	r2, #0
 8004344:	4619      	mov	r1, r3
 8004346:	f7fe fa85 	bl	8002854 <HAL_GPIO_WritePin>
   DELAY_US(5);
 800434a:	4b8d      	ldr	r3, [pc, #564]	@ (8004580 <LCD16X2_Write_Char+0x2bc>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004350:	4b8c      	ldr	r3, [pc, #560]	@ (8004584 <LCD16X2_Write_Char+0x2c0>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a8c      	ldr	r2, [pc, #560]	@ (8004588 <LCD16X2_Write_Char+0x2c4>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	0c9a      	lsrs	r2, r3, #18
 800435c:	4613      	mov	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	441a      	add	r2, r3
 8004362:	4b88      	ldr	r3, [pc, #544]	@ (8004584 <LCD16X2_Write_Char+0x2c0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4988      	ldr	r1, [pc, #544]	@ (8004588 <LCD16X2_Write_Char+0x2c4>)
 8004368:	fba1 1303 	umull	r1, r3, r1, r3
 800436c:	0c9b      	lsrs	r3, r3, #18
 800436e:	085b      	lsrs	r3, r3, #1
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	637b      	str	r3, [r7, #52]	@ 0x34
 8004374:	4b82      	ldr	r3, [pc, #520]	@ (8004580 <LCD16X2_Write_Char+0x2bc>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800437e:	429a      	cmp	r2, r3
 8004380:	d8f8      	bhi.n	8004374 <LCD16X2_Write_Char+0xb0>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	4a7d      	ldr	r2, [pc, #500]	@ (800457c <LCD16X2_Write_Char+0x2b8>)
 8004386:	2134      	movs	r1, #52	@ 0x34
 8004388:	fb01 f303 	mul.w	r3, r1, r3
 800438c:	4413      	add	r3, r2
 800438e:	3324      	adds	r3, #36	@ 0x24
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	79fb      	ldrb	r3, [r7, #7]
 8004394:	4a79      	ldr	r2, [pc, #484]	@ (800457c <LCD16X2_Write_Char+0x2b8>)
 8004396:	2134      	movs	r1, #52	@ 0x34
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	4413      	add	r3, r2
 800439e:	3328      	adds	r3, #40	@ 0x28
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	2201      	movs	r2, #1
 80043a4:	4619      	mov	r1, r3
 80043a6:	f7fe fa55 	bl	8002854 <HAL_GPIO_WritePin>
   DELAY_US(5);
 80043aa:	4b75      	ldr	r3, [pc, #468]	@ (8004580 <LCD16X2_Write_Char+0x2bc>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80043b0:	4b74      	ldr	r3, [pc, #464]	@ (8004584 <LCD16X2_Write_Char+0x2c0>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a74      	ldr	r2, [pc, #464]	@ (8004588 <LCD16X2_Write_Char+0x2c4>)
 80043b6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ba:	0c9a      	lsrs	r2, r3, #18
 80043bc:	4613      	mov	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	441a      	add	r2, r3
 80043c2:	4b70      	ldr	r3, [pc, #448]	@ (8004584 <LCD16X2_Write_Char+0x2c0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4970      	ldr	r1, [pc, #448]	@ (8004588 <LCD16X2_Write_Char+0x2c4>)
 80043c8:	fba1 1303 	umull	r1, r3, r1, r3
 80043cc:	0c9b      	lsrs	r3, r3, #18
 80043ce:	085b      	lsrs	r3, r3, #1
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004580 <LCD16X2_Write_Char+0x2bc>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043de:	429a      	cmp	r2, r3
 80043e0:	d8f8      	bhi.n	80043d4 <LCD16X2_Write_Char+0x110>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	4a65      	ldr	r2, [pc, #404]	@ (800457c <LCD16X2_Write_Char+0x2b8>)
 80043e6:	2134      	movs	r1, #52	@ 0x34
 80043e8:	fb01 f303 	mul.w	r3, r1, r3
 80043ec:	4413      	add	r3, r2
 80043ee:	3324      	adds	r3, #36	@ 0x24
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	4a61      	ldr	r2, [pc, #388]	@ (800457c <LCD16X2_Write_Char+0x2b8>)
 80043f6:	2134      	movs	r1, #52	@ 0x34
 80043f8:	fb01 f303 	mul.w	r3, r1, r3
 80043fc:	4413      	add	r3, r2
 80043fe:	3328      	adds	r3, #40	@ 0x28
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	2200      	movs	r2, #0
 8004404:	4619      	mov	r1, r3
 8004406:	f7fe fa25 	bl	8002854 <HAL_GPIO_WritePin>
   DELAY_US(100);
 800440a:	4b5d      	ldr	r3, [pc, #372]	@ (8004580 <LCD16X2_Write_Char+0x2bc>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004410:	4b5c      	ldr	r3, [pc, #368]	@ (8004584 <LCD16X2_Write_Char+0x2c0>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a5c      	ldr	r2, [pc, #368]	@ (8004588 <LCD16X2_Write_Char+0x2c4>)
 8004416:	fba2 2303 	umull	r2, r3, r2, r3
 800441a:	0c9b      	lsrs	r3, r3, #18
 800441c:	2264      	movs	r2, #100	@ 0x64
 800441e:	fb03 f202 	mul.w	r2, r3, r2
 8004422:	4b58      	ldr	r3, [pc, #352]	@ (8004584 <LCD16X2_Write_Char+0x2c0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4958      	ldr	r1, [pc, #352]	@ (8004588 <LCD16X2_Write_Char+0x2c4>)
 8004428:	fba1 1303 	umull	r1, r3, r1, r3
 800442c:	0c9b      	lsrs	r3, r3, #18
 800442e:	085b      	lsrs	r3, r3, #1
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	627b      	str	r3, [r7, #36]	@ 0x24
 8004434:	4b52      	ldr	r3, [pc, #328]	@ (8004580 <LCD16X2_Write_Char+0x2bc>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800443e:	429a      	cmp	r2, r3
 8004440:	d8f8      	bhi.n	8004434 <LCD16X2_Write_Char+0x170>

   LCD16X2_DATA(LCD16X2_Index, Low4);
 8004442:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	4611      	mov	r1, r2
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fc26 	bl	8003c9c <LCD16X2_DATA>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	4a4a      	ldr	r2, [pc, #296]	@ (800457c <LCD16X2_Write_Char+0x2b8>)
 8004454:	2134      	movs	r1, #52	@ 0x34
 8004456:	fb01 f303 	mul.w	r3, r1, r3
 800445a:	4413      	add	r3, r2
 800445c:	3324      	adds	r3, #36	@ 0x24
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	4a46      	ldr	r2, [pc, #280]	@ (800457c <LCD16X2_Write_Char+0x2b8>)
 8004464:	2134      	movs	r1, #52	@ 0x34
 8004466:	fb01 f303 	mul.w	r3, r1, r3
 800446a:	4413      	add	r3, r2
 800446c:	3328      	adds	r3, #40	@ 0x28
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	2200      	movs	r2, #0
 8004472:	4619      	mov	r1, r3
 8004474:	f7fe f9ee 	bl	8002854 <HAL_GPIO_WritePin>
   DELAY_US(5);
 8004478:	4b41      	ldr	r3, [pc, #260]	@ (8004580 <LCD16X2_Write_Char+0x2bc>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	623b      	str	r3, [r7, #32]
 800447e:	4b41      	ldr	r3, [pc, #260]	@ (8004584 <LCD16X2_Write_Char+0x2c0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a41      	ldr	r2, [pc, #260]	@ (8004588 <LCD16X2_Write_Char+0x2c4>)
 8004484:	fba2 2303 	umull	r2, r3, r2, r3
 8004488:	0c9a      	lsrs	r2, r3, #18
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	441a      	add	r2, r3
 8004490:	4b3c      	ldr	r3, [pc, #240]	@ (8004584 <LCD16X2_Write_Char+0x2c0>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	493c      	ldr	r1, [pc, #240]	@ (8004588 <LCD16X2_Write_Char+0x2c4>)
 8004496:	fba1 1303 	umull	r1, r3, r1, r3
 800449a:	0c9b      	lsrs	r3, r3, #18
 800449c:	085b      	lsrs	r3, r3, #1
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	61fb      	str	r3, [r7, #28]
 80044a2:	4b37      	ldr	r3, [pc, #220]	@ (8004580 <LCD16X2_Write_Char+0x2bc>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	6a3a      	ldr	r2, [r7, #32]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	69fa      	ldr	r2, [r7, #28]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d8f8      	bhi.n	80044a2 <LCD16X2_Write_Char+0x1de>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	4a32      	ldr	r2, [pc, #200]	@ (800457c <LCD16X2_Write_Char+0x2b8>)
 80044b4:	2134      	movs	r1, #52	@ 0x34
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	4413      	add	r3, r2
 80044bc:	3324      	adds	r3, #36	@ 0x24
 80044be:	6818      	ldr	r0, [r3, #0]
 80044c0:	79fb      	ldrb	r3, [r7, #7]
 80044c2:	4a2e      	ldr	r2, [pc, #184]	@ (800457c <LCD16X2_Write_Char+0x2b8>)
 80044c4:	2134      	movs	r1, #52	@ 0x34
 80044c6:	fb01 f303 	mul.w	r3, r1, r3
 80044ca:	4413      	add	r3, r2
 80044cc:	3328      	adds	r3, #40	@ 0x28
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	2201      	movs	r2, #1
 80044d2:	4619      	mov	r1, r3
 80044d4:	f7fe f9be 	bl	8002854 <HAL_GPIO_WritePin>
   DELAY_US(5);
 80044d8:	4b29      	ldr	r3, [pc, #164]	@ (8004580 <LCD16X2_Write_Char+0x2bc>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	61bb      	str	r3, [r7, #24]
 80044de:	4b29      	ldr	r3, [pc, #164]	@ (8004584 <LCD16X2_Write_Char+0x2c0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a29      	ldr	r2, [pc, #164]	@ (8004588 <LCD16X2_Write_Char+0x2c4>)
 80044e4:	fba2 2303 	umull	r2, r3, r2, r3
 80044e8:	0c9a      	lsrs	r2, r3, #18
 80044ea:	4613      	mov	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	441a      	add	r2, r3
 80044f0:	4b24      	ldr	r3, [pc, #144]	@ (8004584 <LCD16X2_Write_Char+0x2c0>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4924      	ldr	r1, [pc, #144]	@ (8004588 <LCD16X2_Write_Char+0x2c4>)
 80044f6:	fba1 1303 	umull	r1, r3, r1, r3
 80044fa:	0c9b      	lsrs	r3, r3, #18
 80044fc:	085b      	lsrs	r3, r3, #1
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	4b1f      	ldr	r3, [pc, #124]	@ (8004580 <LCD16X2_Write_Char+0x2bc>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	429a      	cmp	r2, r3
 800450e:	d8f8      	bhi.n	8004502 <LCD16X2_Write_Char+0x23e>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	4a1a      	ldr	r2, [pc, #104]	@ (800457c <LCD16X2_Write_Char+0x2b8>)
 8004514:	2134      	movs	r1, #52	@ 0x34
 8004516:	fb01 f303 	mul.w	r3, r1, r3
 800451a:	4413      	add	r3, r2
 800451c:	3324      	adds	r3, #36	@ 0x24
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	4a16      	ldr	r2, [pc, #88]	@ (800457c <LCD16X2_Write_Char+0x2b8>)
 8004524:	2134      	movs	r1, #52	@ 0x34
 8004526:	fb01 f303 	mul.w	r3, r1, r3
 800452a:	4413      	add	r3, r2
 800452c:	3328      	adds	r3, #40	@ 0x28
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	2200      	movs	r2, #0
 8004532:	4619      	mov	r1, r3
 8004534:	f7fe f98e 	bl	8002854 <HAL_GPIO_WritePin>
   DELAY_US(100);
 8004538:	4b11      	ldr	r3, [pc, #68]	@ (8004580 <LCD16X2_Write_Char+0x2bc>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	4b11      	ldr	r3, [pc, #68]	@ (8004584 <LCD16X2_Write_Char+0x2c0>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a11      	ldr	r2, [pc, #68]	@ (8004588 <LCD16X2_Write_Char+0x2c4>)
 8004544:	fba2 2303 	umull	r2, r3, r2, r3
 8004548:	0c9b      	lsrs	r3, r3, #18
 800454a:	2264      	movs	r2, #100	@ 0x64
 800454c:	fb03 f202 	mul.w	r2, r3, r2
 8004550:	4b0c      	ldr	r3, [pc, #48]	@ (8004584 <LCD16X2_Write_Char+0x2c0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	490c      	ldr	r1, [pc, #48]	@ (8004588 <LCD16X2_Write_Char+0x2c4>)
 8004556:	fba1 1303 	umull	r1, r3, r1, r3
 800455a:	0c9b      	lsrs	r3, r3, #18
 800455c:	085b      	lsrs	r3, r3, #1
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	4b07      	ldr	r3, [pc, #28]	@ (8004580 <LCD16X2_Write_Char+0x2bc>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	429a      	cmp	r2, r3
 800456e:	d8f8      	bhi.n	8004562 <LCD16X2_Write_Char+0x29e>
}
 8004570:	bf00      	nop
 8004572:	bf00      	nop
 8004574:	3740      	adds	r7, #64	@ 0x40
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	08007744 	.word	0x08007744
 8004580:	e000e010 	.word	0xe000e010
 8004584:	200001ac 	.word	0x200001ac
 8004588:	431bde83 	.word	0x431bde83

0800458c <LCD16X2_Write_String>:

void LCD16X2_Write_String(uint8_t LCD16X2_Index, char *str)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	6039      	str	r1, [r7, #0]
 8004596:	71fb      	strb	r3, [r7, #7]
    int i;
    for(i=0; str[i]!='\0'; i++)
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	e00b      	b.n	80045b6 <LCD16X2_Write_String+0x2a>
    {
    	LCD16X2_Write_Char(LCD16X2_Index, str[i]);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	4413      	add	r3, r2
 80045a4:	781a      	ldrb	r2, [r3, #0]
 80045a6:	79fb      	ldrb	r3, [r7, #7]
 80045a8:	4611      	mov	r1, r2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff fe8a 	bl	80042c4 <LCD16X2_Write_Char>
    for(i=0; str[i]!='\0'; i++)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	3301      	adds	r3, #1
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	4413      	add	r3, r2
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1ed      	bne.n	800459e <LCD16X2_Write_String+0x12>
    }
}
 80045c2:	bf00      	nop
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <__NVIC_SetPriority>:
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	6039      	str	r1, [r7, #0]
 80045d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	db0a      	blt.n	80045f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	490c      	ldr	r1, [pc, #48]	@ (8004618 <__NVIC_SetPriority+0x4c>)
 80045e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ea:	0112      	lsls	r2, r2, #4
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	440b      	add	r3, r1
 80045f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80045f4:	e00a      	b.n	800460c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	4908      	ldr	r1, [pc, #32]	@ (800461c <__NVIC_SetPriority+0x50>)
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	3b04      	subs	r3, #4
 8004604:	0112      	lsls	r2, r2, #4
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	440b      	add	r3, r1
 800460a:	761a      	strb	r2, [r3, #24]
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	e000e100 	.word	0xe000e100
 800461c:	e000ed00 	.word	0xe000ed00

08004620 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004624:	4b05      	ldr	r3, [pc, #20]	@ (800463c <SysTick_Handler+0x1c>)
 8004626:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004628:	f001 fd46 	bl	80060b8 <xTaskGetSchedulerState>
 800462c:	4603      	mov	r3, r0
 800462e:	2b01      	cmp	r3, #1
 8004630:	d001      	beq.n	8004636 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004632:	f002 fb41 	bl	8006cb8 <xPortSysTickHandler>
  }
}
 8004636:	bf00      	nop
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	e000e010 	.word	0xe000e010

08004640 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004644:	2100      	movs	r1, #0
 8004646:	f06f 0004 	mvn.w	r0, #4
 800464a:	f7ff ffbf 	bl	80045cc <__NVIC_SetPriority>
#endif
}
 800464e:	bf00      	nop
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800465a:	f3ef 8305 	mrs	r3, IPSR
 800465e:	603b      	str	r3, [r7, #0]
  return(result);
 8004660:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004666:	f06f 0305 	mvn.w	r3, #5
 800466a:	607b      	str	r3, [r7, #4]
 800466c:	e00c      	b.n	8004688 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800466e:	4b0a      	ldr	r3, [pc, #40]	@ (8004698 <osKernelInitialize+0x44>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d105      	bne.n	8004682 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004676:	4b08      	ldr	r3, [pc, #32]	@ (8004698 <osKernelInitialize+0x44>)
 8004678:	2201      	movs	r2, #1
 800467a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800467c:	2300      	movs	r3, #0
 800467e:	607b      	str	r3, [r7, #4]
 8004680:	e002      	b.n	8004688 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004682:	f04f 33ff 	mov.w	r3, #4294967295
 8004686:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004688:	687b      	ldr	r3, [r7, #4]
}
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20001454 	.word	0x20001454

0800469c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046a2:	f3ef 8305 	mrs	r3, IPSR
 80046a6:	603b      	str	r3, [r7, #0]
  return(result);
 80046a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80046ae:	f06f 0305 	mvn.w	r3, #5
 80046b2:	607b      	str	r3, [r7, #4]
 80046b4:	e010      	b.n	80046d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80046b6:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <osKernelStart+0x48>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d109      	bne.n	80046d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80046be:	f7ff ffbf 	bl	8004640 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80046c2:	4b08      	ldr	r3, [pc, #32]	@ (80046e4 <osKernelStart+0x48>)
 80046c4:	2202      	movs	r2, #2
 80046c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80046c8:	f001 f892 	bl	80057f0 <vTaskStartScheduler>
      stat = osOK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	607b      	str	r3, [r7, #4]
 80046d0:	e002      	b.n	80046d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80046d2:	f04f 33ff 	mov.w	r3, #4294967295
 80046d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046d8:	687b      	ldr	r3, [r7, #4]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	20001454 	.word	0x20001454

080046e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08e      	sub	sp, #56	@ 0x38
 80046ec:	af04      	add	r7, sp, #16
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046f8:	f3ef 8305 	mrs	r3, IPSR
 80046fc:	617b      	str	r3, [r7, #20]
  return(result);
 80046fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004700:	2b00      	cmp	r3, #0
 8004702:	d17e      	bne.n	8004802 <osThreadNew+0x11a>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d07b      	beq.n	8004802 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800470a:	2380      	movs	r3, #128	@ 0x80
 800470c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800470e:	2318      	movs	r3, #24
 8004710:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004712:	2300      	movs	r3, #0
 8004714:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004716:	f04f 33ff 	mov.w	r3, #4294967295
 800471a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d045      	beq.n	80047ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <osThreadNew+0x48>
        name = attr->name;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <osThreadNew+0x6e>
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	2b38      	cmp	r3, #56	@ 0x38
 8004748:	d805      	bhi.n	8004756 <osThreadNew+0x6e>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <osThreadNew+0x72>
        return (NULL);
 8004756:	2300      	movs	r3, #0
 8004758:	e054      	b.n	8004804 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	089b      	lsrs	r3, r3, #2
 8004768:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00e      	beq.n	8004790 <osThreadNew+0xa8>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	2ba7      	cmp	r3, #167	@ 0xa7
 8004778:	d90a      	bls.n	8004790 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800477e:	2b00      	cmp	r3, #0
 8004780:	d006      	beq.n	8004790 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <osThreadNew+0xa8>
        mem = 1;
 800478a:	2301      	movs	r3, #1
 800478c:	61bb      	str	r3, [r7, #24]
 800478e:	e010      	b.n	80047b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10c      	bne.n	80047b2 <osThreadNew+0xca>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d108      	bne.n	80047b2 <osThreadNew+0xca>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d104      	bne.n	80047b2 <osThreadNew+0xca>
          mem = 0;
 80047a8:	2300      	movs	r3, #0
 80047aa:	61bb      	str	r3, [r7, #24]
 80047ac:	e001      	b.n	80047b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80047ae:	2300      	movs	r3, #0
 80047b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d110      	bne.n	80047da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047c0:	9202      	str	r2, [sp, #8]
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	6a3a      	ldr	r2, [r7, #32]
 80047cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 fe1a 	bl	8005408 <xTaskCreateStatic>
 80047d4:	4603      	mov	r3, r0
 80047d6:	613b      	str	r3, [r7, #16]
 80047d8:	e013      	b.n	8004802 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d110      	bne.n	8004802 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	f107 0310 	add.w	r3, r7, #16
 80047e8:	9301      	str	r3, [sp, #4]
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 fe68 	bl	80054c8 <xTaskCreate>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d001      	beq.n	8004802 <osThreadNew+0x11a>
            hTask = NULL;
 80047fe:	2300      	movs	r3, #0
 8004800:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004802:	693b      	ldr	r3, [r7, #16]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3728      	adds	r7, #40	@ 0x28
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004814:	f3ef 8305 	mrs	r3, IPSR
 8004818:	60bb      	str	r3, [r7, #8]
  return(result);
 800481a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <osDelay+0x1c>
    stat = osErrorISR;
 8004820:	f06f 0305 	mvn.w	r3, #5
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	e007      	b.n	8004838 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004828:	2300      	movs	r3, #0
 800482a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 ffa6 	bl	8005784 <vTaskDelay>
    }
  }

  return (stat);
 8004838:	68fb      	ldr	r3, [r7, #12]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a07      	ldr	r2, [pc, #28]	@ (8004870 <vApplicationGetIdleTaskMemory+0x2c>)
 8004854:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4a06      	ldr	r2, [pc, #24]	@ (8004874 <vApplicationGetIdleTaskMemory+0x30>)
 800485a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2280      	movs	r2, #128	@ 0x80
 8004860:	601a      	str	r2, [r3, #0]
}
 8004862:	bf00      	nop
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	20001458 	.word	0x20001458
 8004874:	20001500 	.word	0x20001500

08004878 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4a07      	ldr	r2, [pc, #28]	@ (80048a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004888:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	4a06      	ldr	r2, [pc, #24]	@ (80048a8 <vApplicationGetTimerTaskMemory+0x30>)
 800488e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004896:	601a      	str	r2, [r3, #0]
}
 8004898:	bf00      	nop
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	20001700 	.word	0x20001700
 80048a8:	200017a8 	.word	0x200017a8

080048ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f103 0208 	add.w	r2, r3, #8
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f04f 32ff 	mov.w	r2, #4294967295
 80048c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f103 0208 	add.w	r2, r3, #8
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f103 0208 	add.w	r2, r3, #8
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004906:	b480      	push	{r7}
 8004908:	b085      	sub	sp, #20
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	601a      	str	r2, [r3, #0]
}
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004964:	d103      	bne.n	800496e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	e00c      	b.n	8004988 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3308      	adds	r3, #8
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	e002      	b.n	800497c <vListInsert+0x2e>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	429a      	cmp	r2, r3
 8004986:	d2f6      	bcs.n	8004976 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	601a      	str	r2, [r3, #0]
}
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6892      	ldr	r2, [r2, #8]
 80049d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6852      	ldr	r2, [r2, #4]
 80049e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d103      	bne.n	80049f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	1e5a      	subs	r2, r3, #1
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10b      	bne.n	8004a40 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2c:	f383 8811 	msr	BASEPRI, r3
 8004a30:	f3bf 8f6f 	isb	sy
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a3a:	bf00      	nop
 8004a3c:	bf00      	nop
 8004a3e:	e7fd      	b.n	8004a3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a40:	f002 f8aa 	bl	8006b98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4c:	68f9      	ldr	r1, [r7, #12]
 8004a4e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	441a      	add	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a70:	3b01      	subs	r3, #1
 8004a72:	68f9      	ldr	r1, [r7, #12]
 8004a74:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a76:	fb01 f303 	mul.w	r3, r1, r3
 8004a7a:	441a      	add	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	22ff      	movs	r2, #255	@ 0xff
 8004a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	22ff      	movs	r2, #255	@ 0xff
 8004a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d114      	bne.n	8004ac0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d01a      	beq.n	8004ad4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3310      	adds	r3, #16
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f001 f942 	bl	8005d2c <xTaskRemoveFromEventList>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d012      	beq.n	8004ad4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004aae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae4 <xQueueGenericReset+0xd0>)
 8004ab0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	e009      	b.n	8004ad4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3310      	adds	r3, #16
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff fef1 	bl	80048ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3324      	adds	r3, #36	@ 0x24
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7ff feec 	bl	80048ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ad4:	f002 f892 	bl	8006bfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ad8:	2301      	movs	r3, #1
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	e000ed04 	.word	0xe000ed04

08004ae8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08e      	sub	sp, #56	@ 0x38
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10b      	bne.n	8004b14 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b0e:	bf00      	nop
 8004b10:	bf00      	nop
 8004b12:	e7fd      	b.n	8004b10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10b      	bne.n	8004b32 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b2c:	bf00      	nop
 8004b2e:	bf00      	nop
 8004b30:	e7fd      	b.n	8004b2e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <xQueueGenericCreateStatic+0x56>
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <xQueueGenericCreateStatic+0x5a>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <xQueueGenericCreateStatic+0x5c>
 8004b42:	2300      	movs	r3, #0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10b      	bne.n	8004b60 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	623b      	str	r3, [r7, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	bf00      	nop
 8004b5e:	e7fd      	b.n	8004b5c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d102      	bne.n	8004b6c <xQueueGenericCreateStatic+0x84>
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <xQueueGenericCreateStatic+0x88>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <xQueueGenericCreateStatic+0x8a>
 8004b70:	2300      	movs	r3, #0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10b      	bne.n	8004b8e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	61fb      	str	r3, [r7, #28]
}
 8004b88:	bf00      	nop
 8004b8a:	bf00      	nop
 8004b8c:	e7fd      	b.n	8004b8a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b8e:	2350      	movs	r3, #80	@ 0x50
 8004b90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2b50      	cmp	r3, #80	@ 0x50
 8004b96:	d00b      	beq.n	8004bb0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	61bb      	str	r3, [r7, #24]
}
 8004baa:	bf00      	nop
 8004bac:	bf00      	nop
 8004bae:	e7fd      	b.n	8004bac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004bb0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00d      	beq.n	8004bd8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bc4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 f805 	bl	8004be2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3730      	adds	r7, #48	@ 0x30
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b084      	sub	sp, #16
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	607a      	str	r2, [r7, #4]
 8004bee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d103      	bne.n	8004bfe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	e002      	b.n	8004c04 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c10:	2101      	movs	r1, #1
 8004c12:	69b8      	ldr	r0, [r7, #24]
 8004c14:	f7ff fefe 	bl	8004a14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	78fa      	ldrb	r2, [r7, #3]
 8004c1c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c20:	bf00      	nop
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08e      	sub	sp, #56	@ 0x38
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c36:	2300      	movs	r3, #0
 8004c38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10b      	bne.n	8004c5c <xQueueGenericSend+0x34>
	__asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c56:	bf00      	nop
 8004c58:	bf00      	nop
 8004c5a:	e7fd      	b.n	8004c58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d103      	bne.n	8004c6a <xQueueGenericSend+0x42>
 8004c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <xQueueGenericSend+0x46>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e000      	b.n	8004c70 <xQueueGenericSend+0x48>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10b      	bne.n	8004c8c <xQueueGenericSend+0x64>
	__asm volatile
 8004c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c86:	bf00      	nop
 8004c88:	bf00      	nop
 8004c8a:	e7fd      	b.n	8004c88 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d103      	bne.n	8004c9a <xQueueGenericSend+0x72>
 8004c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <xQueueGenericSend+0x76>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <xQueueGenericSend+0x78>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10b      	bne.n	8004cbc <xQueueGenericSend+0x94>
	__asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	623b      	str	r3, [r7, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	bf00      	nop
 8004cba:	e7fd      	b.n	8004cb8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cbc:	f001 f9fc 	bl	80060b8 <xTaskGetSchedulerState>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d102      	bne.n	8004ccc <xQueueGenericSend+0xa4>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <xQueueGenericSend+0xa8>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e000      	b.n	8004cd2 <xQueueGenericSend+0xaa>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10b      	bne.n	8004cee <xQueueGenericSend+0xc6>
	__asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	61fb      	str	r3, [r7, #28]
}
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	e7fd      	b.n	8004cea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cee:	f001 ff53 	bl	8006b98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d302      	bcc.n	8004d04 <xQueueGenericSend+0xdc>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d129      	bne.n	8004d58 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d0a:	f000 fa0f 	bl	800512c <prvCopyDataToQueue>
 8004d0e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d010      	beq.n	8004d3a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1a:	3324      	adds	r3, #36	@ 0x24
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f001 f805 	bl	8005d2c <xTaskRemoveFromEventList>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d013      	beq.n	8004d50 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d28:	4b3f      	ldr	r3, [pc, #252]	@ (8004e28 <xQueueGenericSend+0x200>)
 8004d2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	e00a      	b.n	8004d50 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d007      	beq.n	8004d50 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d40:	4b39      	ldr	r3, [pc, #228]	@ (8004e28 <xQueueGenericSend+0x200>)
 8004d42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d50:	f001 ff54 	bl	8006bfc <vPortExitCritical>
				return pdPASS;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e063      	b.n	8004e20 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d103      	bne.n	8004d66 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d5e:	f001 ff4d 	bl	8006bfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	e05c      	b.n	8004e20 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d106      	bne.n	8004d7a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d6c:	f107 0314 	add.w	r3, r7, #20
 8004d70:	4618      	mov	r0, r3
 8004d72:	f001 f83f 	bl	8005df4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d76:	2301      	movs	r3, #1
 8004d78:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d7a:	f001 ff3f 	bl	8006bfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d7e:	f000 fda7 	bl	80058d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d82:	f001 ff09 	bl	8006b98 <vPortEnterCritical>
 8004d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d8c:	b25b      	sxtb	r3, r3
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d92:	d103      	bne.n	8004d9c <xQueueGenericSend+0x174>
 8004d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004da2:	b25b      	sxtb	r3, r3
 8004da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da8:	d103      	bne.n	8004db2 <xQueueGenericSend+0x18a>
 8004daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004db2:	f001 ff23 	bl	8006bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004db6:	1d3a      	adds	r2, r7, #4
 8004db8:	f107 0314 	add.w	r3, r7, #20
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f001 f82e 	bl	8005e20 <xTaskCheckForTimeOut>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d124      	bne.n	8004e14 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004dca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004dcc:	f000 faa6 	bl	800531c <prvIsQueueFull>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d018      	beq.n	8004e08 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd8:	3310      	adds	r3, #16
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	4611      	mov	r1, r2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 ff52 	bl	8005c88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004de4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004de6:	f000 fa31 	bl	800524c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004dea:	f000 fd7f 	bl	80058ec <xTaskResumeAll>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f47f af7c 	bne.w	8004cee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004df6:	4b0c      	ldr	r3, [pc, #48]	@ (8004e28 <xQueueGenericSend+0x200>)
 8004df8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	e772      	b.n	8004cee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e0a:	f000 fa1f 	bl	800524c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e0e:	f000 fd6d 	bl	80058ec <xTaskResumeAll>
 8004e12:	e76c      	b.n	8004cee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e16:	f000 fa19 	bl	800524c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e1a:	f000 fd67 	bl	80058ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3738      	adds	r7, #56	@ 0x38
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	e000ed04 	.word	0xe000ed04

08004e2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b090      	sub	sp, #64	@ 0x40
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10b      	bne.n	8004e5c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e56:	bf00      	nop
 8004e58:	bf00      	nop
 8004e5a:	e7fd      	b.n	8004e58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d103      	bne.n	8004e6a <xQueueGenericSendFromISR+0x3e>
 8004e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <xQueueGenericSendFromISR+0x42>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <xQueueGenericSendFromISR+0x44>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10b      	bne.n	8004e8c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e86:	bf00      	nop
 8004e88:	bf00      	nop
 8004e8a:	e7fd      	b.n	8004e88 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d103      	bne.n	8004e9a <xQueueGenericSendFromISR+0x6e>
 8004e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <xQueueGenericSendFromISR+0x72>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e000      	b.n	8004ea0 <xQueueGenericSendFromISR+0x74>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10b      	bne.n	8004ebc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	623b      	str	r3, [r7, #32]
}
 8004eb6:	bf00      	nop
 8004eb8:	bf00      	nop
 8004eba:	e7fd      	b.n	8004eb8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ebc:	f001 ff4c 	bl	8006d58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ec0:	f3ef 8211 	mrs	r2, BASEPRI
 8004ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	61fa      	str	r2, [r7, #28]
 8004ed6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ed8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004eda:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ede:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d302      	bcc.n	8004eee <xQueueGenericSendFromISR+0xc2>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d12f      	bne.n	8004f4e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ef4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	68b9      	ldr	r1, [r7, #8]
 8004f02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004f04:	f000 f912 	bl	800512c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f08:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d112      	bne.n	8004f38 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d016      	beq.n	8004f48 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1c:	3324      	adds	r3, #36	@ 0x24
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 ff04 	bl	8005d2c <xTaskRemoveFromEventList>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00e      	beq.n	8004f48 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00b      	beq.n	8004f48 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	e007      	b.n	8004f48 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	b25a      	sxtb	r2, r3
 8004f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004f4c:	e001      	b.n	8004f52 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f54:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3740      	adds	r7, #64	@ 0x40
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08c      	sub	sp, #48	@ 0x30
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f74:	2300      	movs	r3, #0
 8004f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10b      	bne.n	8004f9a <xQueueReceive+0x32>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	623b      	str	r3, [r7, #32]
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop
 8004f98:	e7fd      	b.n	8004f96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d103      	bne.n	8004fa8 <xQueueReceive+0x40>
 8004fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <xQueueReceive+0x44>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <xQueueReceive+0x46>
 8004fac:	2300      	movs	r3, #0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10b      	bne.n	8004fca <xQueueReceive+0x62>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	61fb      	str	r3, [r7, #28]
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	e7fd      	b.n	8004fc6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fca:	f001 f875 	bl	80060b8 <xTaskGetSchedulerState>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d102      	bne.n	8004fda <xQueueReceive+0x72>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <xQueueReceive+0x76>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <xQueueReceive+0x78>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10b      	bne.n	8004ffc <xQueueReceive+0x94>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	61bb      	str	r3, [r7, #24]
}
 8004ff6:	bf00      	nop
 8004ff8:	bf00      	nop
 8004ffa:	e7fd      	b.n	8004ff8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ffc:	f001 fdcc 	bl	8006b98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005004:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01f      	beq.n	800504c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800500c:	68b9      	ldr	r1, [r7, #8]
 800500e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005010:	f000 f8f6 	bl	8005200 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005016:	1e5a      	subs	r2, r3, #1
 8005018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800501c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00f      	beq.n	8005044 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005026:	3310      	adds	r3, #16
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fe7f 	bl	8005d2c <xTaskRemoveFromEventList>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005034:	4b3c      	ldr	r3, [pc, #240]	@ (8005128 <xQueueReceive+0x1c0>)
 8005036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005044:	f001 fdda 	bl	8006bfc <vPortExitCritical>
				return pdPASS;
 8005048:	2301      	movs	r3, #1
 800504a:	e069      	b.n	8005120 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d103      	bne.n	800505a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005052:	f001 fdd3 	bl	8006bfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005056:	2300      	movs	r3, #0
 8005058:	e062      	b.n	8005120 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800505a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800505c:	2b00      	cmp	r3, #0
 800505e:	d106      	bne.n	800506e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005060:	f107 0310 	add.w	r3, r7, #16
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fec5 	bl	8005df4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800506a:	2301      	movs	r3, #1
 800506c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800506e:	f001 fdc5 	bl	8006bfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005072:	f000 fc2d 	bl	80058d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005076:	f001 fd8f 	bl	8006b98 <vPortEnterCritical>
 800507a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005080:	b25b      	sxtb	r3, r3
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005086:	d103      	bne.n	8005090 <xQueueReceive+0x128>
 8005088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005092:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005096:	b25b      	sxtb	r3, r3
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509c:	d103      	bne.n	80050a6 <xQueueReceive+0x13e>
 800509e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050a6:	f001 fda9 	bl	8006bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050aa:	1d3a      	adds	r2, r7, #4
 80050ac:	f107 0310 	add.w	r3, r7, #16
 80050b0:	4611      	mov	r1, r2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 feb4 	bl	8005e20 <xTaskCheckForTimeOut>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d123      	bne.n	8005106 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050c0:	f000 f916 	bl	80052f0 <prvIsQueueEmpty>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d017      	beq.n	80050fa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050cc:	3324      	adds	r3, #36	@ 0x24
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	4611      	mov	r1, r2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fdd8 	bl	8005c88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050da:	f000 f8b7 	bl	800524c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050de:	f000 fc05 	bl	80058ec <xTaskResumeAll>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d189      	bne.n	8004ffc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80050e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005128 <xQueueReceive+0x1c0>)
 80050ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	e780      	b.n	8004ffc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80050fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050fc:	f000 f8a6 	bl	800524c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005100:	f000 fbf4 	bl	80058ec <xTaskResumeAll>
 8005104:	e77a      	b.n	8004ffc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005106:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005108:	f000 f8a0 	bl	800524c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800510c:	f000 fbee 	bl	80058ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005110:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005112:	f000 f8ed 	bl	80052f0 <prvIsQueueEmpty>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	f43f af6f 	beq.w	8004ffc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800511e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005120:	4618      	mov	r0, r3
 8005122:	3730      	adds	r7, #48	@ 0x30
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	e000ed04 	.word	0xe000ed04

0800512c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005140:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10d      	bne.n	8005166 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d14d      	bne.n	80051ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 ffcc 	bl	80060f4 <xTaskPriorityDisinherit>
 800515c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	609a      	str	r2, [r3, #8]
 8005164:	e043      	b.n	80051ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d119      	bne.n	80051a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6858      	ldr	r0, [r3, #4]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005174:	461a      	mov	r2, r3
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	f002 f8fe 	bl	8007378 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005184:	441a      	add	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	429a      	cmp	r2, r3
 8005194:	d32b      	bcc.n	80051ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	605a      	str	r2, [r3, #4]
 800519e:	e026      	b.n	80051ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	68d8      	ldr	r0, [r3, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a8:	461a      	mov	r2, r3
 80051aa:	68b9      	ldr	r1, [r7, #8]
 80051ac:	f002 f8e4 	bl	8007378 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b8:	425b      	negs	r3, r3
 80051ba:	441a      	add	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d207      	bcs.n	80051dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d4:	425b      	negs	r3, r3
 80051d6:	441a      	add	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d105      	bne.n	80051ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80051f6:	697b      	ldr	r3, [r7, #20]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520e:	2b00      	cmp	r3, #0
 8005210:	d018      	beq.n	8005244 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521a:	441a      	add	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68da      	ldr	r2, [r3, #12]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	429a      	cmp	r2, r3
 800522a:	d303      	bcc.n	8005234 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68d9      	ldr	r1, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523c:	461a      	mov	r2, r3
 800523e:	6838      	ldr	r0, [r7, #0]
 8005240:	f002 f89a 	bl	8007378 <memcpy>
	}
}
 8005244:	bf00      	nop
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005254:	f001 fca0 	bl	8006b98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800525e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005260:	e011      	b.n	8005286 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005266:	2b00      	cmp	r3, #0
 8005268:	d012      	beq.n	8005290 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3324      	adds	r3, #36	@ 0x24
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fd5c 	bl	8005d2c <xTaskRemoveFromEventList>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800527a:	f000 fe35 	bl	8005ee8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	3b01      	subs	r3, #1
 8005282:	b2db      	uxtb	r3, r3
 8005284:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800528a:	2b00      	cmp	r3, #0
 800528c:	dce9      	bgt.n	8005262 <prvUnlockQueue+0x16>
 800528e:	e000      	b.n	8005292 <prvUnlockQueue+0x46>
					break;
 8005290:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	22ff      	movs	r2, #255	@ 0xff
 8005296:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800529a:	f001 fcaf 	bl	8006bfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800529e:	f001 fc7b 	bl	8006b98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052aa:	e011      	b.n	80052d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d012      	beq.n	80052da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3310      	adds	r3, #16
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fd37 	bl	8005d2c <xTaskRemoveFromEventList>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80052c4:	f000 fe10 	bl	8005ee8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80052c8:	7bbb      	ldrb	r3, [r7, #14]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	dce9      	bgt.n	80052ac <prvUnlockQueue+0x60>
 80052d8:	e000      	b.n	80052dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	22ff      	movs	r2, #255	@ 0xff
 80052e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80052e4:	f001 fc8a 	bl	8006bfc <vPortExitCritical>
}
 80052e8:	bf00      	nop
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052f8:	f001 fc4e 	bl	8006b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005300:	2b00      	cmp	r3, #0
 8005302:	d102      	bne.n	800530a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005304:	2301      	movs	r3, #1
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	e001      	b.n	800530e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800530e:	f001 fc75 	bl	8006bfc <vPortExitCritical>

	return xReturn;
 8005312:	68fb      	ldr	r3, [r7, #12]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005324:	f001 fc38 	bl	8006b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005330:	429a      	cmp	r2, r3
 8005332:	d102      	bne.n	800533a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005334:	2301      	movs	r3, #1
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	e001      	b.n	800533e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800533e:	f001 fc5d 	bl	8006bfc <vPortExitCritical>

	return xReturn;
 8005342:	68fb      	ldr	r3, [r7, #12]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	e014      	b.n	8005386 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800535c:	4a0f      	ldr	r2, [pc, #60]	@ (800539c <vQueueAddToRegistry+0x50>)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10b      	bne.n	8005380 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005368:	490c      	ldr	r1, [pc, #48]	@ (800539c <vQueueAddToRegistry+0x50>)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005372:	4a0a      	ldr	r2, [pc, #40]	@ (800539c <vQueueAddToRegistry+0x50>)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	4413      	add	r3, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800537e:	e006      	b.n	800538e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	3301      	adds	r3, #1
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b07      	cmp	r3, #7
 800538a:	d9e7      	bls.n	800535c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800538c:	bf00      	nop
 800538e:	bf00      	nop
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	20001ba8 	.word	0x20001ba8

080053a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80053b0:	f001 fbf2 	bl	8006b98 <vPortEnterCritical>
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053ba:	b25b      	sxtb	r3, r3
 80053bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c0:	d103      	bne.n	80053ca <vQueueWaitForMessageRestricted+0x2a>
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053d0:	b25b      	sxtb	r3, r3
 80053d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d6:	d103      	bne.n	80053e0 <vQueueWaitForMessageRestricted+0x40>
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053e0:	f001 fc0c 	bl	8006bfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d106      	bne.n	80053fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	3324      	adds	r3, #36	@ 0x24
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 fc6d 	bl	8005cd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80053fa:	6978      	ldr	r0, [r7, #20]
 80053fc:	f7ff ff26 	bl	800524c <prvUnlockQueue>
	}
 8005400:	bf00      	nop
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08e      	sub	sp, #56	@ 0x38
 800540c:	af04      	add	r7, sp, #16
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10b      	bne.n	8005434 <xTaskCreateStatic+0x2c>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	623b      	str	r3, [r7, #32]
}
 800542e:	bf00      	nop
 8005430:	bf00      	nop
 8005432:	e7fd      	b.n	8005430 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10b      	bne.n	8005452 <xTaskCreateStatic+0x4a>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	61fb      	str	r3, [r7, #28]
}
 800544c:	bf00      	nop
 800544e:	bf00      	nop
 8005450:	e7fd      	b.n	800544e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005452:	23a8      	movs	r3, #168	@ 0xa8
 8005454:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2ba8      	cmp	r3, #168	@ 0xa8
 800545a:	d00b      	beq.n	8005474 <xTaskCreateStatic+0x6c>
	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	61bb      	str	r3, [r7, #24]
}
 800546e:	bf00      	nop
 8005470:	bf00      	nop
 8005472:	e7fd      	b.n	8005470 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005474:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005478:	2b00      	cmp	r3, #0
 800547a:	d01e      	beq.n	80054ba <xTaskCreateStatic+0xb2>
 800547c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800547e:	2b00      	cmp	r3, #0
 8005480:	d01b      	beq.n	80054ba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005484:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005488:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800548a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800548c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548e:	2202      	movs	r2, #2
 8005490:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005494:	2300      	movs	r3, #0
 8005496:	9303      	str	r3, [sp, #12]
 8005498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549a:	9302      	str	r3, [sp, #8]
 800549c:	f107 0314 	add.w	r3, r7, #20
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f851 	bl	8005554 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80054b4:	f000 f8f6 	bl	80056a4 <prvAddNewTaskToReadyList>
 80054b8:	e001      	b.n	80054be <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054be:	697b      	ldr	r3, [r7, #20]
	}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3728      	adds	r7, #40	@ 0x28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08c      	sub	sp, #48	@ 0x30
 80054cc:	af04      	add	r7, sp, #16
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80054d8:	88fb      	ldrh	r3, [r7, #6]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4618      	mov	r0, r3
 80054de:	f001 fc7d 	bl	8006ddc <pvPortMalloc>
 80054e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00e      	beq.n	8005508 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054ea:	20a8      	movs	r0, #168	@ 0xa8
 80054ec:	f001 fc76 	bl	8006ddc <pvPortMalloc>
 80054f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80054fe:	e005      	b.n	800550c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005500:	6978      	ldr	r0, [r7, #20]
 8005502:	f001 fd39 	bl	8006f78 <vPortFree>
 8005506:	e001      	b.n	800550c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005508:	2300      	movs	r3, #0
 800550a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d017      	beq.n	8005542 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800551a:	88fa      	ldrh	r2, [r7, #6]
 800551c:	2300      	movs	r3, #0
 800551e:	9303      	str	r3, [sp, #12]
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	9302      	str	r3, [sp, #8]
 8005524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	68b9      	ldr	r1, [r7, #8]
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 f80f 	bl	8005554 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005536:	69f8      	ldr	r0, [r7, #28]
 8005538:	f000 f8b4 	bl	80056a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800553c:	2301      	movs	r3, #1
 800553e:	61bb      	str	r3, [r7, #24]
 8005540:	e002      	b.n	8005548 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005542:	f04f 33ff 	mov.w	r3, #4294967295
 8005546:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005548:	69bb      	ldr	r3, [r7, #24]
	}
 800554a:	4618      	mov	r0, r3
 800554c:	3720      	adds	r7, #32
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
 8005560:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005564:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	461a      	mov	r2, r3
 800556c:	21a5      	movs	r1, #165	@ 0xa5
 800556e:	f001 fe7f 	bl	8007270 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005574:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800557c:	3b01      	subs	r3, #1
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	f023 0307 	bic.w	r3, r3, #7
 800558a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00b      	beq.n	80055ae <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	617b      	str	r3, [r7, #20]
}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop
 80055ac:	e7fd      	b.n	80055aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01f      	beq.n	80055f4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055b4:	2300      	movs	r3, #0
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	e012      	b.n	80055e0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	4413      	add	r3, r2
 80055c0:	7819      	ldrb	r1, [r3, #0]
 80055c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	4413      	add	r3, r2
 80055c8:	3334      	adds	r3, #52	@ 0x34
 80055ca:	460a      	mov	r2, r1
 80055cc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	4413      	add	r3, r2
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d006      	beq.n	80055e8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	3301      	adds	r3, #1
 80055de:	61fb      	str	r3, [r7, #28]
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	2b0f      	cmp	r3, #15
 80055e4:	d9e9      	bls.n	80055ba <prvInitialiseNewTask+0x66>
 80055e6:	e000      	b.n	80055ea <prvInitialiseNewTask+0x96>
			{
				break;
 80055e8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055f2:	e003      	b.n	80055fc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fe:	2b37      	cmp	r3, #55	@ 0x37
 8005600:	d901      	bls.n	8005606 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005602:	2337      	movs	r3, #55	@ 0x37
 8005604:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005608:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800560a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800560c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005610:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005614:	2200      	movs	r2, #0
 8005616:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561a:	3304      	adds	r3, #4
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff f965 	bl	80048ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005624:	3318      	adds	r3, #24
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff f960 	bl	80048ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800562c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005630:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005634:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800563c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005640:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005644:	2200      	movs	r2, #0
 8005646:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800564a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564c:	2200      	movs	r2, #0
 800564e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005654:	3354      	adds	r3, #84	@ 0x54
 8005656:	224c      	movs	r2, #76	@ 0x4c
 8005658:	2100      	movs	r1, #0
 800565a:	4618      	mov	r0, r3
 800565c:	f001 fe08 	bl	8007270 <memset>
 8005660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005662:	4a0d      	ldr	r2, [pc, #52]	@ (8005698 <prvInitialiseNewTask+0x144>)
 8005664:	659a      	str	r2, [r3, #88]	@ 0x58
 8005666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005668:	4a0c      	ldr	r2, [pc, #48]	@ (800569c <prvInitialiseNewTask+0x148>)
 800566a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800566c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566e:	4a0c      	ldr	r2, [pc, #48]	@ (80056a0 <prvInitialiseNewTask+0x14c>)
 8005670:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	68f9      	ldr	r1, [r7, #12]
 8005676:	69b8      	ldr	r0, [r7, #24]
 8005678:	f001 f95a 	bl	8006930 <pxPortInitialiseStack>
 800567c:	4602      	mov	r2, r0
 800567e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005680:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800568a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800568c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800568e:	bf00      	nop
 8005690:	3720      	adds	r7, #32
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20005e3c 	.word	0x20005e3c
 800569c:	20005ea4 	.word	0x20005ea4
 80056a0:	20005f0c 	.word	0x20005f0c

080056a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056ac:	f001 fa74 	bl	8006b98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056b0:	4b2d      	ldr	r3, [pc, #180]	@ (8005768 <prvAddNewTaskToReadyList+0xc4>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3301      	adds	r3, #1
 80056b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005768 <prvAddNewTaskToReadyList+0xc4>)
 80056b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056ba:	4b2c      	ldr	r3, [pc, #176]	@ (800576c <prvAddNewTaskToReadyList+0xc8>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d109      	bne.n	80056d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056c2:	4a2a      	ldr	r2, [pc, #168]	@ (800576c <prvAddNewTaskToReadyList+0xc8>)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056c8:	4b27      	ldr	r3, [pc, #156]	@ (8005768 <prvAddNewTaskToReadyList+0xc4>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d110      	bne.n	80056f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056d0:	f000 fc2e 	bl	8005f30 <prvInitialiseTaskLists>
 80056d4:	e00d      	b.n	80056f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056d6:	4b26      	ldr	r3, [pc, #152]	@ (8005770 <prvAddNewTaskToReadyList+0xcc>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d109      	bne.n	80056f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056de:	4b23      	ldr	r3, [pc, #140]	@ (800576c <prvAddNewTaskToReadyList+0xc8>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d802      	bhi.n	80056f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056ec:	4a1f      	ldr	r2, [pc, #124]	@ (800576c <prvAddNewTaskToReadyList+0xc8>)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056f2:	4b20      	ldr	r3, [pc, #128]	@ (8005774 <prvAddNewTaskToReadyList+0xd0>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3301      	adds	r3, #1
 80056f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005774 <prvAddNewTaskToReadyList+0xd0>)
 80056fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80056fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005774 <prvAddNewTaskToReadyList+0xd0>)
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005708:	4b1b      	ldr	r3, [pc, #108]	@ (8005778 <prvAddNewTaskToReadyList+0xd4>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d903      	bls.n	8005718 <prvAddNewTaskToReadyList+0x74>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005714:	4a18      	ldr	r2, [pc, #96]	@ (8005778 <prvAddNewTaskToReadyList+0xd4>)
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800571c:	4613      	mov	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4a15      	ldr	r2, [pc, #84]	@ (800577c <prvAddNewTaskToReadyList+0xd8>)
 8005726:	441a      	add	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3304      	adds	r3, #4
 800572c:	4619      	mov	r1, r3
 800572e:	4610      	mov	r0, r2
 8005730:	f7ff f8e9 	bl	8004906 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005734:	f001 fa62 	bl	8006bfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005738:	4b0d      	ldr	r3, [pc, #52]	@ (8005770 <prvAddNewTaskToReadyList+0xcc>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00e      	beq.n	800575e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005740:	4b0a      	ldr	r3, [pc, #40]	@ (800576c <prvAddNewTaskToReadyList+0xc8>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574a:	429a      	cmp	r2, r3
 800574c:	d207      	bcs.n	800575e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800574e:	4b0c      	ldr	r3, [pc, #48]	@ (8005780 <prvAddNewTaskToReadyList+0xdc>)
 8005750:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800575e:	bf00      	nop
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	200020bc 	.word	0x200020bc
 800576c:	20001be8 	.word	0x20001be8
 8005770:	200020c8 	.word	0x200020c8
 8005774:	200020d8 	.word	0x200020d8
 8005778:	200020c4 	.word	0x200020c4
 800577c:	20001bec 	.word	0x20001bec
 8005780:	e000ed04 	.word	0xe000ed04

08005784 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800578c:	2300      	movs	r3, #0
 800578e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d018      	beq.n	80057c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005796:	4b14      	ldr	r3, [pc, #80]	@ (80057e8 <vTaskDelay+0x64>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00b      	beq.n	80057b6 <vTaskDelay+0x32>
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	60bb      	str	r3, [r7, #8]
}
 80057b0:	bf00      	nop
 80057b2:	bf00      	nop
 80057b4:	e7fd      	b.n	80057b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80057b6:	f000 f88b 	bl	80058d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057ba:	2100      	movs	r1, #0
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fd09 	bl	80061d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057c2:	f000 f893 	bl	80058ec <xTaskResumeAll>
 80057c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d107      	bne.n	80057de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80057ce:	4b07      	ldr	r3, [pc, #28]	@ (80057ec <vTaskDelay+0x68>)
 80057d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057de:	bf00      	nop
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	200020e4 	.word	0x200020e4
 80057ec:	e000ed04 	.word	0xe000ed04

080057f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08a      	sub	sp, #40	@ 0x28
 80057f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80057fa:	2300      	movs	r3, #0
 80057fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80057fe:	463a      	mov	r2, r7
 8005800:	1d39      	adds	r1, r7, #4
 8005802:	f107 0308 	add.w	r3, r7, #8
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff f81c 	bl	8004844 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800580c:	6839      	ldr	r1, [r7, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	9202      	str	r2, [sp, #8]
 8005814:	9301      	str	r3, [sp, #4]
 8005816:	2300      	movs	r3, #0
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	2300      	movs	r3, #0
 800581c:	460a      	mov	r2, r1
 800581e:	4924      	ldr	r1, [pc, #144]	@ (80058b0 <vTaskStartScheduler+0xc0>)
 8005820:	4824      	ldr	r0, [pc, #144]	@ (80058b4 <vTaskStartScheduler+0xc4>)
 8005822:	f7ff fdf1 	bl	8005408 <xTaskCreateStatic>
 8005826:	4603      	mov	r3, r0
 8005828:	4a23      	ldr	r2, [pc, #140]	@ (80058b8 <vTaskStartScheduler+0xc8>)
 800582a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800582c:	4b22      	ldr	r3, [pc, #136]	@ (80058b8 <vTaskStartScheduler+0xc8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005834:	2301      	movs	r3, #1
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	e001      	b.n	800583e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d102      	bne.n	800584a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005844:	f000 fd1a 	bl	800627c <xTimerCreateTimerTask>
 8005848:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d11b      	bne.n	8005888 <vTaskStartScheduler+0x98>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	613b      	str	r3, [r7, #16]
}
 8005862:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005864:	4b15      	ldr	r3, [pc, #84]	@ (80058bc <vTaskStartScheduler+0xcc>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3354      	adds	r3, #84	@ 0x54
 800586a:	4a15      	ldr	r2, [pc, #84]	@ (80058c0 <vTaskStartScheduler+0xd0>)
 800586c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800586e:	4b15      	ldr	r3, [pc, #84]	@ (80058c4 <vTaskStartScheduler+0xd4>)
 8005870:	f04f 32ff 	mov.w	r2, #4294967295
 8005874:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005876:	4b14      	ldr	r3, [pc, #80]	@ (80058c8 <vTaskStartScheduler+0xd8>)
 8005878:	2201      	movs	r2, #1
 800587a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800587c:	4b13      	ldr	r3, [pc, #76]	@ (80058cc <vTaskStartScheduler+0xdc>)
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005882:	f001 f8e5 	bl	8006a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005886:	e00f      	b.n	80058a8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588e:	d10b      	bne.n	80058a8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	60fb      	str	r3, [r7, #12]
}
 80058a2:	bf00      	nop
 80058a4:	bf00      	nop
 80058a6:	e7fd      	b.n	80058a4 <vTaskStartScheduler+0xb4>
}
 80058a8:	bf00      	nop
 80058aa:	3718      	adds	r7, #24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	08007538 	.word	0x08007538
 80058b4:	08005f01 	.word	0x08005f01
 80058b8:	200020e0 	.word	0x200020e0
 80058bc:	20001be8 	.word	0x20001be8
 80058c0:	200001bc 	.word	0x200001bc
 80058c4:	200020dc 	.word	0x200020dc
 80058c8:	200020c8 	.word	0x200020c8
 80058cc:	200020c0 	.word	0x200020c0

080058d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80058d4:	4b04      	ldr	r3, [pc, #16]	@ (80058e8 <vTaskSuspendAll+0x18>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3301      	adds	r3, #1
 80058da:	4a03      	ldr	r2, [pc, #12]	@ (80058e8 <vTaskSuspendAll+0x18>)
 80058dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80058de:	bf00      	nop
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	200020e4 	.word	0x200020e4

080058ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80058fa:	4b42      	ldr	r3, [pc, #264]	@ (8005a04 <xTaskResumeAll+0x118>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10b      	bne.n	800591a <xTaskResumeAll+0x2e>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	603b      	str	r3, [r7, #0]
}
 8005914:	bf00      	nop
 8005916:	bf00      	nop
 8005918:	e7fd      	b.n	8005916 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800591a:	f001 f93d 	bl	8006b98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800591e:	4b39      	ldr	r3, [pc, #228]	@ (8005a04 <xTaskResumeAll+0x118>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3b01      	subs	r3, #1
 8005924:	4a37      	ldr	r2, [pc, #220]	@ (8005a04 <xTaskResumeAll+0x118>)
 8005926:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005928:	4b36      	ldr	r3, [pc, #216]	@ (8005a04 <xTaskResumeAll+0x118>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d162      	bne.n	80059f6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005930:	4b35      	ldr	r3, [pc, #212]	@ (8005a08 <xTaskResumeAll+0x11c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d05e      	beq.n	80059f6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005938:	e02f      	b.n	800599a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800593a:	4b34      	ldr	r3, [pc, #208]	@ (8005a0c <xTaskResumeAll+0x120>)
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3318      	adds	r3, #24
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff f83a 	bl	80049c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	3304      	adds	r3, #4
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff f835 	bl	80049c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800595a:	4b2d      	ldr	r3, [pc, #180]	@ (8005a10 <xTaskResumeAll+0x124>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d903      	bls.n	800596a <xTaskResumeAll+0x7e>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005966:	4a2a      	ldr	r2, [pc, #168]	@ (8005a10 <xTaskResumeAll+0x124>)
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4a27      	ldr	r2, [pc, #156]	@ (8005a14 <xTaskResumeAll+0x128>)
 8005978:	441a      	add	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3304      	adds	r3, #4
 800597e:	4619      	mov	r1, r3
 8005980:	4610      	mov	r0, r2
 8005982:	f7fe ffc0 	bl	8004906 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800598a:	4b23      	ldr	r3, [pc, #140]	@ (8005a18 <xTaskResumeAll+0x12c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005990:	429a      	cmp	r2, r3
 8005992:	d302      	bcc.n	800599a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005994:	4b21      	ldr	r3, [pc, #132]	@ (8005a1c <xTaskResumeAll+0x130>)
 8005996:	2201      	movs	r2, #1
 8005998:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800599a:	4b1c      	ldr	r3, [pc, #112]	@ (8005a0c <xTaskResumeAll+0x120>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1cb      	bne.n	800593a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80059a8:	f000 fb66 	bl	8006078 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80059ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005a20 <xTaskResumeAll+0x134>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d010      	beq.n	80059da <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059b8:	f000 f846 	bl	8005a48 <xTaskIncrementTick>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80059c2:	4b16      	ldr	r3, [pc, #88]	@ (8005a1c <xTaskResumeAll+0x130>)
 80059c4:	2201      	movs	r2, #1
 80059c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1f1      	bne.n	80059b8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80059d4:	4b12      	ldr	r3, [pc, #72]	@ (8005a20 <xTaskResumeAll+0x134>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059da:	4b10      	ldr	r3, [pc, #64]	@ (8005a1c <xTaskResumeAll+0x130>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059e2:	2301      	movs	r3, #1
 80059e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005a24 <xTaskResumeAll+0x138>)
 80059e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059f6:	f001 f901 	bl	8006bfc <vPortExitCritical>

	return xAlreadyYielded;
 80059fa:	68bb      	ldr	r3, [r7, #8]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	200020e4 	.word	0x200020e4
 8005a08:	200020bc 	.word	0x200020bc
 8005a0c:	2000207c 	.word	0x2000207c
 8005a10:	200020c4 	.word	0x200020c4
 8005a14:	20001bec 	.word	0x20001bec
 8005a18:	20001be8 	.word	0x20001be8
 8005a1c:	200020d0 	.word	0x200020d0
 8005a20:	200020cc 	.word	0x200020cc
 8005a24:	e000ed04 	.word	0xe000ed04

08005a28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a2e:	4b05      	ldr	r3, [pc, #20]	@ (8005a44 <xTaskGetTickCount+0x1c>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a34:	687b      	ldr	r3, [r7, #4]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	200020c0 	.word	0x200020c0

08005a48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a52:	4b4f      	ldr	r3, [pc, #316]	@ (8005b90 <xTaskIncrementTick+0x148>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f040 8090 	bne.w	8005b7c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a5c:	4b4d      	ldr	r3, [pc, #308]	@ (8005b94 <xTaskIncrementTick+0x14c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3301      	adds	r3, #1
 8005a62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a64:	4a4b      	ldr	r2, [pc, #300]	@ (8005b94 <xTaskIncrementTick+0x14c>)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d121      	bne.n	8005ab4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a70:	4b49      	ldr	r3, [pc, #292]	@ (8005b98 <xTaskIncrementTick+0x150>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00b      	beq.n	8005a92 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	603b      	str	r3, [r7, #0]
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	e7fd      	b.n	8005a8e <xTaskIncrementTick+0x46>
 8005a92:	4b41      	ldr	r3, [pc, #260]	@ (8005b98 <xTaskIncrementTick+0x150>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	4b40      	ldr	r3, [pc, #256]	@ (8005b9c <xTaskIncrementTick+0x154>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a3e      	ldr	r2, [pc, #248]	@ (8005b98 <xTaskIncrementTick+0x150>)
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	4a3e      	ldr	r2, [pc, #248]	@ (8005b9c <xTaskIncrementTick+0x154>)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8005ba0 <xTaskIncrementTick+0x158>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	4a3c      	ldr	r2, [pc, #240]	@ (8005ba0 <xTaskIncrementTick+0x158>)
 8005aae:	6013      	str	r3, [r2, #0]
 8005ab0:	f000 fae2 	bl	8006078 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ba4 <xTaskIncrementTick+0x15c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d349      	bcc.n	8005b52 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005abe:	4b36      	ldr	r3, [pc, #216]	@ (8005b98 <xTaskIncrementTick+0x150>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d104      	bne.n	8005ad2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ac8:	4b36      	ldr	r3, [pc, #216]	@ (8005ba4 <xTaskIncrementTick+0x15c>)
 8005aca:	f04f 32ff 	mov.w	r2, #4294967295
 8005ace:	601a      	str	r2, [r3, #0]
					break;
 8005ad0:	e03f      	b.n	8005b52 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ad2:	4b31      	ldr	r3, [pc, #196]	@ (8005b98 <xTaskIncrementTick+0x150>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d203      	bcs.n	8005af2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005aea:	4a2e      	ldr	r2, [pc, #184]	@ (8005ba4 <xTaskIncrementTick+0x15c>)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005af0:	e02f      	b.n	8005b52 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	3304      	adds	r3, #4
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fe ff62 	bl	80049c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d004      	beq.n	8005b0e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	3318      	adds	r3, #24
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fe ff59 	bl	80049c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b12:	4b25      	ldr	r3, [pc, #148]	@ (8005ba8 <xTaskIncrementTick+0x160>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d903      	bls.n	8005b22 <xTaskIncrementTick+0xda>
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1e:	4a22      	ldr	r2, [pc, #136]	@ (8005ba8 <xTaskIncrementTick+0x160>)
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b26:	4613      	mov	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4a1f      	ldr	r2, [pc, #124]	@ (8005bac <xTaskIncrementTick+0x164>)
 8005b30:	441a      	add	r2, r3
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	3304      	adds	r3, #4
 8005b36:	4619      	mov	r1, r3
 8005b38:	4610      	mov	r0, r2
 8005b3a:	f7fe fee4 	bl	8004906 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b42:	4b1b      	ldr	r3, [pc, #108]	@ (8005bb0 <xTaskIncrementTick+0x168>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d3b8      	bcc.n	8005abe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b50:	e7b5      	b.n	8005abe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b52:	4b17      	ldr	r3, [pc, #92]	@ (8005bb0 <xTaskIncrementTick+0x168>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b58:	4914      	ldr	r1, [pc, #80]	@ (8005bac <xTaskIncrementTick+0x164>)
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d901      	bls.n	8005b6e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b6e:	4b11      	ldr	r3, [pc, #68]	@ (8005bb4 <xTaskIncrementTick+0x16c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d007      	beq.n	8005b86 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005b76:	2301      	movs	r3, #1
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	e004      	b.n	8005b86 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8005bb8 <xTaskIncrementTick+0x170>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3301      	adds	r3, #1
 8005b82:	4a0d      	ldr	r2, [pc, #52]	@ (8005bb8 <xTaskIncrementTick+0x170>)
 8005b84:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b86:	697b      	ldr	r3, [r7, #20]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	200020e4 	.word	0x200020e4
 8005b94:	200020c0 	.word	0x200020c0
 8005b98:	20002074 	.word	0x20002074
 8005b9c:	20002078 	.word	0x20002078
 8005ba0:	200020d4 	.word	0x200020d4
 8005ba4:	200020dc 	.word	0x200020dc
 8005ba8:	200020c4 	.word	0x200020c4
 8005bac:	20001bec 	.word	0x20001bec
 8005bb0:	20001be8 	.word	0x20001be8
 8005bb4:	200020d0 	.word	0x200020d0
 8005bb8:	200020cc 	.word	0x200020cc

08005bbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bc2:	4b2b      	ldr	r3, [pc, #172]	@ (8005c70 <vTaskSwitchContext+0xb4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bca:	4b2a      	ldr	r3, [pc, #168]	@ (8005c74 <vTaskSwitchContext+0xb8>)
 8005bcc:	2201      	movs	r2, #1
 8005bce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005bd0:	e047      	b.n	8005c62 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005bd2:	4b28      	ldr	r3, [pc, #160]	@ (8005c74 <vTaskSwitchContext+0xb8>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bd8:	4b27      	ldr	r3, [pc, #156]	@ (8005c78 <vTaskSwitchContext+0xbc>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	e011      	b.n	8005c04 <vTaskSwitchContext+0x48>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10b      	bne.n	8005bfe <vTaskSwitchContext+0x42>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	607b      	str	r3, [r7, #4]
}
 8005bf8:	bf00      	nop
 8005bfa:	bf00      	nop
 8005bfc:	e7fd      	b.n	8005bfa <vTaskSwitchContext+0x3e>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	491d      	ldr	r1, [pc, #116]	@ (8005c7c <vTaskSwitchContext+0xc0>)
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	440b      	add	r3, r1
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0e3      	beq.n	8005be0 <vTaskSwitchContext+0x24>
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4a16      	ldr	r2, [pc, #88]	@ (8005c7c <vTaskSwitchContext+0xc0>)
 8005c24:	4413      	add	r3, r2
 8005c26:	60bb      	str	r3, [r7, #8]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	605a      	str	r2, [r3, #4]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	3308      	adds	r3, #8
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d104      	bne.n	8005c48 <vTaskSwitchContext+0x8c>
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	605a      	str	r2, [r3, #4]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8005c80 <vTaskSwitchContext+0xc4>)
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	4a09      	ldr	r2, [pc, #36]	@ (8005c78 <vTaskSwitchContext+0xbc>)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c58:	4b09      	ldr	r3, [pc, #36]	@ (8005c80 <vTaskSwitchContext+0xc4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3354      	adds	r3, #84	@ 0x54
 8005c5e:	4a09      	ldr	r2, [pc, #36]	@ (8005c84 <vTaskSwitchContext+0xc8>)
 8005c60:	6013      	str	r3, [r2, #0]
}
 8005c62:	bf00      	nop
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	200020e4 	.word	0x200020e4
 8005c74:	200020d0 	.word	0x200020d0
 8005c78:	200020c4 	.word	0x200020c4
 8005c7c:	20001bec 	.word	0x20001bec
 8005c80:	20001be8 	.word	0x20001be8
 8005c84:	200001bc 	.word	0x200001bc

08005c88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10b      	bne.n	8005cb0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	60fb      	str	r3, [r7, #12]
}
 8005caa:	bf00      	nop
 8005cac:	bf00      	nop
 8005cae:	e7fd      	b.n	8005cac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cb0:	4b07      	ldr	r3, [pc, #28]	@ (8005cd0 <vTaskPlaceOnEventList+0x48>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3318      	adds	r3, #24
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7fe fe48 	bl	800494e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	6838      	ldr	r0, [r7, #0]
 8005cc2:	f000 fa87 	bl	80061d4 <prvAddCurrentTaskToDelayedList>
}
 8005cc6:	bf00      	nop
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20001be8 	.word	0x20001be8

08005cd4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10b      	bne.n	8005cfe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	617b      	str	r3, [r7, #20]
}
 8005cf8:	bf00      	nop
 8005cfa:	bf00      	nop
 8005cfc:	e7fd      	b.n	8005cfa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8005d28 <vTaskPlaceOnEventListRestricted+0x54>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3318      	adds	r3, #24
 8005d04:	4619      	mov	r1, r3
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f7fe fdfd 	bl	8004906 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005d12:	f04f 33ff 	mov.w	r3, #4294967295
 8005d16:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	68b8      	ldr	r0, [r7, #8]
 8005d1c:	f000 fa5a 	bl	80061d4 <prvAddCurrentTaskToDelayedList>
	}
 8005d20:	bf00      	nop
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	20001be8 	.word	0x20001be8

08005d2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10b      	bne.n	8005d5a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	60fb      	str	r3, [r7, #12]
}
 8005d54:	bf00      	nop
 8005d56:	bf00      	nop
 8005d58:	e7fd      	b.n	8005d56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	3318      	adds	r3, #24
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fe fe2e 	bl	80049c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d64:	4b1d      	ldr	r3, [pc, #116]	@ (8005ddc <xTaskRemoveFromEventList+0xb0>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d11d      	bne.n	8005da8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7fe fe25 	bl	80049c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7a:	4b19      	ldr	r3, [pc, #100]	@ (8005de0 <xTaskRemoveFromEventList+0xb4>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d903      	bls.n	8005d8a <xTaskRemoveFromEventList+0x5e>
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d86:	4a16      	ldr	r2, [pc, #88]	@ (8005de0 <xTaskRemoveFromEventList+0xb4>)
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d8e:	4613      	mov	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4a13      	ldr	r2, [pc, #76]	@ (8005de4 <xTaskRemoveFromEventList+0xb8>)
 8005d98:	441a      	add	r2, r3
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4610      	mov	r0, r2
 8005da2:	f7fe fdb0 	bl	8004906 <vListInsertEnd>
 8005da6:	e005      	b.n	8005db4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	3318      	adds	r3, #24
 8005dac:	4619      	mov	r1, r3
 8005dae:	480e      	ldr	r0, [pc, #56]	@ (8005de8 <xTaskRemoveFromEventList+0xbc>)
 8005db0:	f7fe fda9 	bl	8004906 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005db8:	4b0c      	ldr	r3, [pc, #48]	@ (8005dec <xTaskRemoveFromEventList+0xc0>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d905      	bls.n	8005dce <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8005df0 <xTaskRemoveFromEventList+0xc4>)
 8005dc8:	2201      	movs	r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	e001      	b.n	8005dd2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005dd2:	697b      	ldr	r3, [r7, #20]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	200020e4 	.word	0x200020e4
 8005de0:	200020c4 	.word	0x200020c4
 8005de4:	20001bec 	.word	0x20001bec
 8005de8:	2000207c 	.word	0x2000207c
 8005dec:	20001be8 	.word	0x20001be8
 8005df0:	200020d0 	.word	0x200020d0

08005df4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005dfc:	4b06      	ldr	r3, [pc, #24]	@ (8005e18 <vTaskInternalSetTimeOutState+0x24>)
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e04:	4b05      	ldr	r3, [pc, #20]	@ (8005e1c <vTaskInternalSetTimeOutState+0x28>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	605a      	str	r2, [r3, #4]
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	200020d4 	.word	0x200020d4
 8005e1c:	200020c0 	.word	0x200020c0

08005e20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10b      	bne.n	8005e48 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	613b      	str	r3, [r7, #16]
}
 8005e42:	bf00      	nop
 8005e44:	bf00      	nop
 8005e46:	e7fd      	b.n	8005e44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10b      	bne.n	8005e66 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	60fb      	str	r3, [r7, #12]
}
 8005e60:	bf00      	nop
 8005e62:	bf00      	nop
 8005e64:	e7fd      	b.n	8005e62 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005e66:	f000 fe97 	bl	8006b98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ee0 <xTaskCheckForTimeOut+0xc0>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e82:	d102      	bne.n	8005e8a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e84:	2300      	movs	r3, #0
 8005e86:	61fb      	str	r3, [r7, #28]
 8005e88:	e023      	b.n	8005ed2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	4b15      	ldr	r3, [pc, #84]	@ (8005ee4 <xTaskCheckForTimeOut+0xc4>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d007      	beq.n	8005ea6 <xTaskCheckForTimeOut+0x86>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d302      	bcc.n	8005ea6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	61fb      	str	r3, [r7, #28]
 8005ea4:	e015      	b.n	8005ed2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d20b      	bcs.n	8005ec8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	1ad2      	subs	r2, r2, r3
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7ff ff99 	bl	8005df4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	61fb      	str	r3, [r7, #28]
 8005ec6:	e004      	b.n	8005ed2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ed2:	f000 fe93 	bl	8006bfc <vPortExitCritical>

	return xReturn;
 8005ed6:	69fb      	ldr	r3, [r7, #28]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3720      	adds	r7, #32
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	200020c0 	.word	0x200020c0
 8005ee4:	200020d4 	.word	0x200020d4

08005ee8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005eec:	4b03      	ldr	r3, [pc, #12]	@ (8005efc <vTaskMissedYield+0x14>)
 8005eee:	2201      	movs	r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]
}
 8005ef2:	bf00      	nop
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	200020d0 	.word	0x200020d0

08005f00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f08:	f000 f852 	bl	8005fb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f0c:	4b06      	ldr	r3, [pc, #24]	@ (8005f28 <prvIdleTask+0x28>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d9f9      	bls.n	8005f08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f14:	4b05      	ldr	r3, [pc, #20]	@ (8005f2c <prvIdleTask+0x2c>)
 8005f16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f24:	e7f0      	b.n	8005f08 <prvIdleTask+0x8>
 8005f26:	bf00      	nop
 8005f28:	20001bec 	.word	0x20001bec
 8005f2c:	e000ed04 	.word	0xe000ed04

08005f30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f36:	2300      	movs	r3, #0
 8005f38:	607b      	str	r3, [r7, #4]
 8005f3a:	e00c      	b.n	8005f56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4a12      	ldr	r2, [pc, #72]	@ (8005f90 <prvInitialiseTaskLists+0x60>)
 8005f48:	4413      	add	r3, r2
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fe fcae 	bl	80048ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	3301      	adds	r3, #1
 8005f54:	607b      	str	r3, [r7, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b37      	cmp	r3, #55	@ 0x37
 8005f5a:	d9ef      	bls.n	8005f3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f5c:	480d      	ldr	r0, [pc, #52]	@ (8005f94 <prvInitialiseTaskLists+0x64>)
 8005f5e:	f7fe fca5 	bl	80048ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f62:	480d      	ldr	r0, [pc, #52]	@ (8005f98 <prvInitialiseTaskLists+0x68>)
 8005f64:	f7fe fca2 	bl	80048ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f68:	480c      	ldr	r0, [pc, #48]	@ (8005f9c <prvInitialiseTaskLists+0x6c>)
 8005f6a:	f7fe fc9f 	bl	80048ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f6e:	480c      	ldr	r0, [pc, #48]	@ (8005fa0 <prvInitialiseTaskLists+0x70>)
 8005f70:	f7fe fc9c 	bl	80048ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f74:	480b      	ldr	r0, [pc, #44]	@ (8005fa4 <prvInitialiseTaskLists+0x74>)
 8005f76:	f7fe fc99 	bl	80048ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa8 <prvInitialiseTaskLists+0x78>)
 8005f7c:	4a05      	ldr	r2, [pc, #20]	@ (8005f94 <prvInitialiseTaskLists+0x64>)
 8005f7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f80:	4b0a      	ldr	r3, [pc, #40]	@ (8005fac <prvInitialiseTaskLists+0x7c>)
 8005f82:	4a05      	ldr	r2, [pc, #20]	@ (8005f98 <prvInitialiseTaskLists+0x68>)
 8005f84:	601a      	str	r2, [r3, #0]
}
 8005f86:	bf00      	nop
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20001bec 	.word	0x20001bec
 8005f94:	2000204c 	.word	0x2000204c
 8005f98:	20002060 	.word	0x20002060
 8005f9c:	2000207c 	.word	0x2000207c
 8005fa0:	20002090 	.word	0x20002090
 8005fa4:	200020a8 	.word	0x200020a8
 8005fa8:	20002074 	.word	0x20002074
 8005fac:	20002078 	.word	0x20002078

08005fb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fb6:	e019      	b.n	8005fec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fb8:	f000 fdee 	bl	8006b98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fbc:	4b10      	ldr	r3, [pc, #64]	@ (8006000 <prvCheckTasksWaitingTermination+0x50>)
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fe fcf9 	bl	80049c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fce:	4b0d      	ldr	r3, [pc, #52]	@ (8006004 <prvCheckTasksWaitingTermination+0x54>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8006004 <prvCheckTasksWaitingTermination+0x54>)
 8005fd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8006008 <prvCheckTasksWaitingTermination+0x58>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	4a0a      	ldr	r2, [pc, #40]	@ (8006008 <prvCheckTasksWaitingTermination+0x58>)
 8005fe0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fe2:	f000 fe0b 	bl	8006bfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f810 	bl	800600c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fec:	4b06      	ldr	r3, [pc, #24]	@ (8006008 <prvCheckTasksWaitingTermination+0x58>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1e1      	bne.n	8005fb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ff4:	bf00      	nop
 8005ff6:	bf00      	nop
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20002090 	.word	0x20002090
 8006004:	200020bc 	.word	0x200020bc
 8006008:	200020a4 	.word	0x200020a4

0800600c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	3354      	adds	r3, #84	@ 0x54
 8006018:	4618      	mov	r0, r3
 800601a:	f001 f931 	bl	8007280 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006024:	2b00      	cmp	r3, #0
 8006026:	d108      	bne.n	800603a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602c:	4618      	mov	r0, r3
 800602e:	f000 ffa3 	bl	8006f78 <vPortFree>
				vPortFree( pxTCB );
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 ffa0 	bl	8006f78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006038:	e019      	b.n	800606e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006040:	2b01      	cmp	r3, #1
 8006042:	d103      	bne.n	800604c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 ff97 	bl	8006f78 <vPortFree>
	}
 800604a:	e010      	b.n	800606e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006052:	2b02      	cmp	r3, #2
 8006054:	d00b      	beq.n	800606e <prvDeleteTCB+0x62>
	__asm volatile
 8006056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	60fb      	str	r3, [r7, #12]
}
 8006068:	bf00      	nop
 800606a:	bf00      	nop
 800606c:	e7fd      	b.n	800606a <prvDeleteTCB+0x5e>
	}
 800606e:	bf00      	nop
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
	...

08006078 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800607e:	4b0c      	ldr	r3, [pc, #48]	@ (80060b0 <prvResetNextTaskUnblockTime+0x38>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d104      	bne.n	8006092 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006088:	4b0a      	ldr	r3, [pc, #40]	@ (80060b4 <prvResetNextTaskUnblockTime+0x3c>)
 800608a:	f04f 32ff 	mov.w	r2, #4294967295
 800608e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006090:	e008      	b.n	80060a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006092:	4b07      	ldr	r3, [pc, #28]	@ (80060b0 <prvResetNextTaskUnblockTime+0x38>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	4a04      	ldr	r2, [pc, #16]	@ (80060b4 <prvResetNextTaskUnblockTime+0x3c>)
 80060a2:	6013      	str	r3, [r2, #0]
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	20002074 	.word	0x20002074
 80060b4:	200020dc 	.word	0x200020dc

080060b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060be:	4b0b      	ldr	r3, [pc, #44]	@ (80060ec <xTaskGetSchedulerState+0x34>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d102      	bne.n	80060cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060c6:	2301      	movs	r3, #1
 80060c8:	607b      	str	r3, [r7, #4]
 80060ca:	e008      	b.n	80060de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060cc:	4b08      	ldr	r3, [pc, #32]	@ (80060f0 <xTaskGetSchedulerState+0x38>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d102      	bne.n	80060da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80060d4:	2302      	movs	r3, #2
 80060d6:	607b      	str	r3, [r7, #4]
 80060d8:	e001      	b.n	80060de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060da:	2300      	movs	r3, #0
 80060dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060de:	687b      	ldr	r3, [r7, #4]
	}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	200020c8 	.word	0x200020c8
 80060f0:	200020e4 	.word	0x200020e4

080060f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006100:	2300      	movs	r3, #0
 8006102:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d058      	beq.n	80061bc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800610a:	4b2f      	ldr	r3, [pc, #188]	@ (80061c8 <xTaskPriorityDisinherit+0xd4>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	429a      	cmp	r2, r3
 8006112:	d00b      	beq.n	800612c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	60fb      	str	r3, [r7, #12]
}
 8006126:	bf00      	nop
 8006128:	bf00      	nop
 800612a:	e7fd      	b.n	8006128 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10b      	bne.n	800614c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	60bb      	str	r3, [r7, #8]
}
 8006146:	bf00      	nop
 8006148:	bf00      	nop
 800614a:	e7fd      	b.n	8006148 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006150:	1e5a      	subs	r2, r3, #1
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800615e:	429a      	cmp	r2, r3
 8006160:	d02c      	beq.n	80061bc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006166:	2b00      	cmp	r3, #0
 8006168:	d128      	bne.n	80061bc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	3304      	adds	r3, #4
 800616e:	4618      	mov	r0, r3
 8006170:	f7fe fc26 	bl	80049c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006180:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800618c:	4b0f      	ldr	r3, [pc, #60]	@ (80061cc <xTaskPriorityDisinherit+0xd8>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d903      	bls.n	800619c <xTaskPriorityDisinherit+0xa8>
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006198:	4a0c      	ldr	r2, [pc, #48]	@ (80061cc <xTaskPriorityDisinherit+0xd8>)
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4a09      	ldr	r2, [pc, #36]	@ (80061d0 <xTaskPriorityDisinherit+0xdc>)
 80061aa:	441a      	add	r2, r3
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	3304      	adds	r3, #4
 80061b0:	4619      	mov	r1, r3
 80061b2:	4610      	mov	r0, r2
 80061b4:	f7fe fba7 	bl	8004906 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061b8:	2301      	movs	r3, #1
 80061ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061bc:	697b      	ldr	r3, [r7, #20]
	}
 80061be:	4618      	mov	r0, r3
 80061c0:	3718      	adds	r7, #24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20001be8 	.word	0x20001be8
 80061cc:	200020c4 	.word	0x200020c4
 80061d0:	20001bec 	.word	0x20001bec

080061d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061de:	4b21      	ldr	r3, [pc, #132]	@ (8006264 <prvAddCurrentTaskToDelayedList+0x90>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061e4:	4b20      	ldr	r3, [pc, #128]	@ (8006268 <prvAddCurrentTaskToDelayedList+0x94>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3304      	adds	r3, #4
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fe fbe8 	bl	80049c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f6:	d10a      	bne.n	800620e <prvAddCurrentTaskToDelayedList+0x3a>
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d007      	beq.n	800620e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061fe:	4b1a      	ldr	r3, [pc, #104]	@ (8006268 <prvAddCurrentTaskToDelayedList+0x94>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3304      	adds	r3, #4
 8006204:	4619      	mov	r1, r3
 8006206:	4819      	ldr	r0, [pc, #100]	@ (800626c <prvAddCurrentTaskToDelayedList+0x98>)
 8006208:	f7fe fb7d 	bl	8004906 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800620c:	e026      	b.n	800625c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4413      	add	r3, r2
 8006214:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006216:	4b14      	ldr	r3, [pc, #80]	@ (8006268 <prvAddCurrentTaskToDelayedList+0x94>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	429a      	cmp	r2, r3
 8006224:	d209      	bcs.n	800623a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006226:	4b12      	ldr	r3, [pc, #72]	@ (8006270 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	4b0f      	ldr	r3, [pc, #60]	@ (8006268 <prvAddCurrentTaskToDelayedList+0x94>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	3304      	adds	r3, #4
 8006230:	4619      	mov	r1, r3
 8006232:	4610      	mov	r0, r2
 8006234:	f7fe fb8b 	bl	800494e <vListInsert>
}
 8006238:	e010      	b.n	800625c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800623a:	4b0e      	ldr	r3, [pc, #56]	@ (8006274 <prvAddCurrentTaskToDelayedList+0xa0>)
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	4b0a      	ldr	r3, [pc, #40]	@ (8006268 <prvAddCurrentTaskToDelayedList+0x94>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3304      	adds	r3, #4
 8006244:	4619      	mov	r1, r3
 8006246:	4610      	mov	r0, r2
 8006248:	f7fe fb81 	bl	800494e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800624c:	4b0a      	ldr	r3, [pc, #40]	@ (8006278 <prvAddCurrentTaskToDelayedList+0xa4>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	429a      	cmp	r2, r3
 8006254:	d202      	bcs.n	800625c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006256:	4a08      	ldr	r2, [pc, #32]	@ (8006278 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	6013      	str	r3, [r2, #0]
}
 800625c:	bf00      	nop
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	200020c0 	.word	0x200020c0
 8006268:	20001be8 	.word	0x20001be8
 800626c:	200020a8 	.word	0x200020a8
 8006270:	20002078 	.word	0x20002078
 8006274:	20002074 	.word	0x20002074
 8006278:	200020dc 	.word	0x200020dc

0800627c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08a      	sub	sp, #40	@ 0x28
 8006280:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006282:	2300      	movs	r3, #0
 8006284:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006286:	f000 fb13 	bl	80068b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800628a:	4b1d      	ldr	r3, [pc, #116]	@ (8006300 <xTimerCreateTimerTask+0x84>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d021      	beq.n	80062d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006296:	2300      	movs	r3, #0
 8006298:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800629a:	1d3a      	adds	r2, r7, #4
 800629c:	f107 0108 	add.w	r1, r7, #8
 80062a0:	f107 030c 	add.w	r3, r7, #12
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fe fae7 	bl	8004878 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	9202      	str	r2, [sp, #8]
 80062b2:	9301      	str	r3, [sp, #4]
 80062b4:	2302      	movs	r3, #2
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	2300      	movs	r3, #0
 80062ba:	460a      	mov	r2, r1
 80062bc:	4911      	ldr	r1, [pc, #68]	@ (8006304 <xTimerCreateTimerTask+0x88>)
 80062be:	4812      	ldr	r0, [pc, #72]	@ (8006308 <xTimerCreateTimerTask+0x8c>)
 80062c0:	f7ff f8a2 	bl	8005408 <xTaskCreateStatic>
 80062c4:	4603      	mov	r3, r0
 80062c6:	4a11      	ldr	r2, [pc, #68]	@ (800630c <xTimerCreateTimerTask+0x90>)
 80062c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80062ca:	4b10      	ldr	r3, [pc, #64]	@ (800630c <xTimerCreateTimerTask+0x90>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80062d2:	2301      	movs	r3, #1
 80062d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10b      	bne.n	80062f4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80062dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	613b      	str	r3, [r7, #16]
}
 80062ee:	bf00      	nop
 80062f0:	bf00      	nop
 80062f2:	e7fd      	b.n	80062f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80062f4:	697b      	ldr	r3, [r7, #20]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20002118 	.word	0x20002118
 8006304:	08007540 	.word	0x08007540
 8006308:	08006449 	.word	0x08006449
 800630c:	2000211c 	.word	0x2000211c

08006310 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08a      	sub	sp, #40	@ 0x28
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800631e:	2300      	movs	r3, #0
 8006320:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10b      	bne.n	8006340 <xTimerGenericCommand+0x30>
	__asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	623b      	str	r3, [r7, #32]
}
 800633a:	bf00      	nop
 800633c:	bf00      	nop
 800633e:	e7fd      	b.n	800633c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006340:	4b19      	ldr	r3, [pc, #100]	@ (80063a8 <xTimerGenericCommand+0x98>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d02a      	beq.n	800639e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b05      	cmp	r3, #5
 8006358:	dc18      	bgt.n	800638c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800635a:	f7ff fead 	bl	80060b8 <xTaskGetSchedulerState>
 800635e:	4603      	mov	r3, r0
 8006360:	2b02      	cmp	r3, #2
 8006362:	d109      	bne.n	8006378 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006364:	4b10      	ldr	r3, [pc, #64]	@ (80063a8 <xTimerGenericCommand+0x98>)
 8006366:	6818      	ldr	r0, [r3, #0]
 8006368:	f107 0110 	add.w	r1, r7, #16
 800636c:	2300      	movs	r3, #0
 800636e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006370:	f7fe fc5a 	bl	8004c28 <xQueueGenericSend>
 8006374:	6278      	str	r0, [r7, #36]	@ 0x24
 8006376:	e012      	b.n	800639e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006378:	4b0b      	ldr	r3, [pc, #44]	@ (80063a8 <xTimerGenericCommand+0x98>)
 800637a:	6818      	ldr	r0, [r3, #0]
 800637c:	f107 0110 	add.w	r1, r7, #16
 8006380:	2300      	movs	r3, #0
 8006382:	2200      	movs	r2, #0
 8006384:	f7fe fc50 	bl	8004c28 <xQueueGenericSend>
 8006388:	6278      	str	r0, [r7, #36]	@ 0x24
 800638a:	e008      	b.n	800639e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800638c:	4b06      	ldr	r3, [pc, #24]	@ (80063a8 <xTimerGenericCommand+0x98>)
 800638e:	6818      	ldr	r0, [r3, #0]
 8006390:	f107 0110 	add.w	r1, r7, #16
 8006394:	2300      	movs	r3, #0
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	f7fe fd48 	bl	8004e2c <xQueueGenericSendFromISR>
 800639c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800639e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3728      	adds	r7, #40	@ 0x28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	20002118 	.word	0x20002118

080063ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b088      	sub	sp, #32
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063b6:	4b23      	ldr	r3, [pc, #140]	@ (8006444 <prvProcessExpiredTimer+0x98>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	3304      	adds	r3, #4
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fe fafb 	bl	80049c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d023      	beq.n	8006420 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	699a      	ldr	r2, [r3, #24]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	18d1      	adds	r1, r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	6978      	ldr	r0, [r7, #20]
 80063e6:	f000 f8d5 	bl	8006594 <prvInsertTimerInActiveList>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d020      	beq.n	8006432 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063f0:	2300      	movs	r3, #0
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	2300      	movs	r3, #0
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	2100      	movs	r1, #0
 80063fa:	6978      	ldr	r0, [r7, #20]
 80063fc:	f7ff ff88 	bl	8006310 <xTimerGenericCommand>
 8006400:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d114      	bne.n	8006432 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	60fb      	str	r3, [r7, #12]
}
 800641a:	bf00      	nop
 800641c:	bf00      	nop
 800641e:	e7fd      	b.n	800641c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006426:	f023 0301 	bic.w	r3, r3, #1
 800642a:	b2da      	uxtb	r2, r3
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	6978      	ldr	r0, [r7, #20]
 8006438:	4798      	blx	r3
}
 800643a:	bf00      	nop
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	20002110 	.word	0x20002110

08006448 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006450:	f107 0308 	add.w	r3, r7, #8
 8006454:	4618      	mov	r0, r3
 8006456:	f000 f859 	bl	800650c <prvGetNextExpireTime>
 800645a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	4619      	mov	r1, r3
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f000 f805 	bl	8006470 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006466:	f000 f8d7 	bl	8006618 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800646a:	bf00      	nop
 800646c:	e7f0      	b.n	8006450 <prvTimerTask+0x8>
	...

08006470 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800647a:	f7ff fa29 	bl	80058d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800647e:	f107 0308 	add.w	r3, r7, #8
 8006482:	4618      	mov	r0, r3
 8006484:	f000 f866 	bl	8006554 <prvSampleTimeNow>
 8006488:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d130      	bne.n	80064f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10a      	bne.n	80064ac <prvProcessTimerOrBlockTask+0x3c>
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	429a      	cmp	r2, r3
 800649c:	d806      	bhi.n	80064ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800649e:	f7ff fa25 	bl	80058ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80064a2:	68f9      	ldr	r1, [r7, #12]
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff ff81 	bl	80063ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80064aa:	e024      	b.n	80064f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d008      	beq.n	80064c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064b2:	4b13      	ldr	r3, [pc, #76]	@ (8006500 <prvProcessTimerOrBlockTask+0x90>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <prvProcessTimerOrBlockTask+0x50>
 80064bc:	2301      	movs	r3, #1
 80064be:	e000      	b.n	80064c2 <prvProcessTimerOrBlockTask+0x52>
 80064c0:	2300      	movs	r3, #0
 80064c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80064c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006504 <prvProcessTimerOrBlockTask+0x94>)
 80064c6:	6818      	ldr	r0, [r3, #0]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	4619      	mov	r1, r3
 80064d2:	f7fe ff65 	bl	80053a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80064d6:	f7ff fa09 	bl	80058ec <xTaskResumeAll>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064e0:	4b09      	ldr	r3, [pc, #36]	@ (8006508 <prvProcessTimerOrBlockTask+0x98>)
 80064e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	f3bf 8f6f 	isb	sy
}
 80064f0:	e001      	b.n	80064f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064f2:	f7ff f9fb 	bl	80058ec <xTaskResumeAll>
}
 80064f6:	bf00      	nop
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20002114 	.word	0x20002114
 8006504:	20002118 	.word	0x20002118
 8006508:	e000ed04 	.word	0xe000ed04

0800650c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006514:	4b0e      	ldr	r3, [pc, #56]	@ (8006550 <prvGetNextExpireTime+0x44>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <prvGetNextExpireTime+0x16>
 800651e:	2201      	movs	r2, #1
 8006520:	e000      	b.n	8006524 <prvGetNextExpireTime+0x18>
 8006522:	2200      	movs	r2, #0
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d105      	bne.n	800653c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006530:	4b07      	ldr	r3, [pc, #28]	@ (8006550 <prvGetNextExpireTime+0x44>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	e001      	b.n	8006540 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006540:	68fb      	ldr	r3, [r7, #12]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	20002110 	.word	0x20002110

08006554 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800655c:	f7ff fa64 	bl	8005a28 <xTaskGetTickCount>
 8006560:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006562:	4b0b      	ldr	r3, [pc, #44]	@ (8006590 <prvSampleTimeNow+0x3c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	429a      	cmp	r2, r3
 800656a:	d205      	bcs.n	8006578 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800656c:	f000 f93a 	bl	80067e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	e002      	b.n	800657e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800657e:	4a04      	ldr	r2, [pc, #16]	@ (8006590 <prvSampleTimeNow+0x3c>)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006584:	68fb      	ldr	r3, [r7, #12]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	20002120 	.word	0x20002120

08006594 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80065a2:	2300      	movs	r3, #0
 80065a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d812      	bhi.n	80065e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	1ad2      	subs	r2, r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d302      	bcc.n	80065ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80065c8:	2301      	movs	r3, #1
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	e01b      	b.n	8006606 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065ce:	4b10      	ldr	r3, [pc, #64]	@ (8006610 <prvInsertTimerInActiveList+0x7c>)
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3304      	adds	r3, #4
 80065d6:	4619      	mov	r1, r3
 80065d8:	4610      	mov	r0, r2
 80065da:	f7fe f9b8 	bl	800494e <vListInsert>
 80065de:	e012      	b.n	8006606 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d206      	bcs.n	80065f6 <prvInsertTimerInActiveList+0x62>
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d302      	bcc.n	80065f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065f0:	2301      	movs	r3, #1
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	e007      	b.n	8006606 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065f6:	4b07      	ldr	r3, [pc, #28]	@ (8006614 <prvInsertTimerInActiveList+0x80>)
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	3304      	adds	r3, #4
 80065fe:	4619      	mov	r1, r3
 8006600:	4610      	mov	r0, r2
 8006602:	f7fe f9a4 	bl	800494e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006606:	697b      	ldr	r3, [r7, #20]
}
 8006608:	4618      	mov	r0, r3
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	20002114 	.word	0x20002114
 8006614:	20002110 	.word	0x20002110

08006618 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08e      	sub	sp, #56	@ 0x38
 800661c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800661e:	e0ce      	b.n	80067be <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	da19      	bge.n	800665a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006626:	1d3b      	adds	r3, r7, #4
 8006628:	3304      	adds	r3, #4
 800662a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800662c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10b      	bne.n	800664a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	61fb      	str	r3, [r7, #28]
}
 8006644:	bf00      	nop
 8006646:	bf00      	nop
 8006648:	e7fd      	b.n	8006646 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800664a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006650:	6850      	ldr	r0, [r2, #4]
 8006652:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006654:	6892      	ldr	r2, [r2, #8]
 8006656:	4611      	mov	r1, r2
 8006658:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	f2c0 80ae 	blt.w	80067be <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d004      	beq.n	8006678 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800666e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006670:	3304      	adds	r3, #4
 8006672:	4618      	mov	r0, r3
 8006674:	f7fe f9a4 	bl	80049c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006678:	463b      	mov	r3, r7
 800667a:	4618      	mov	r0, r3
 800667c:	f7ff ff6a 	bl	8006554 <prvSampleTimeNow>
 8006680:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b09      	cmp	r3, #9
 8006686:	f200 8097 	bhi.w	80067b8 <prvProcessReceivedCommands+0x1a0>
 800668a:	a201      	add	r2, pc, #4	@ (adr r2, 8006690 <prvProcessReceivedCommands+0x78>)
 800668c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006690:	080066b9 	.word	0x080066b9
 8006694:	080066b9 	.word	0x080066b9
 8006698:	080066b9 	.word	0x080066b9
 800669c:	0800672f 	.word	0x0800672f
 80066a0:	08006743 	.word	0x08006743
 80066a4:	0800678f 	.word	0x0800678f
 80066a8:	080066b9 	.word	0x080066b9
 80066ac:	080066b9 	.word	0x080066b9
 80066b0:	0800672f 	.word	0x0800672f
 80066b4:	08006743 	.word	0x08006743
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066be:	f043 0301 	orr.w	r3, r3, #1
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	18d1      	adds	r1, r2, r3
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066d8:	f7ff ff5c 	bl	8006594 <prvInsertTimerInActiveList>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d06c      	beq.n	80067bc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d061      	beq.n	80067bc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	441a      	add	r2, r3
 8006700:	2300      	movs	r3, #0
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	2300      	movs	r3, #0
 8006706:	2100      	movs	r1, #0
 8006708:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800670a:	f7ff fe01 	bl	8006310 <xTimerGenericCommand>
 800670e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d152      	bne.n	80067bc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	61bb      	str	r3, [r7, #24]
}
 8006728:	bf00      	nop
 800672a:	bf00      	nop
 800672c:	e7fd      	b.n	800672a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800672e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006730:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006734:	f023 0301 	bic.w	r3, r3, #1
 8006738:	b2da      	uxtb	r2, r3
 800673a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006740:	e03d      	b.n	80067be <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006744:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006748:	f043 0301 	orr.w	r3, r3, #1
 800674c:	b2da      	uxtb	r2, r3
 800674e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006750:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006758:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800675a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10b      	bne.n	800677a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	617b      	str	r3, [r7, #20]
}
 8006774:	bf00      	nop
 8006776:	bf00      	nop
 8006778:	e7fd      	b.n	8006776 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800677a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677c:	699a      	ldr	r2, [r3, #24]
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	18d1      	adds	r1, r2, r3
 8006782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006786:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006788:	f7ff ff04 	bl	8006594 <prvInsertTimerInActiveList>
					break;
 800678c:	e017      	b.n	80067be <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800678e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006790:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d103      	bne.n	80067a4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800679c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800679e:	f000 fbeb 	bl	8006f78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80067a2:	e00c      	b.n	80067be <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067aa:	f023 0301 	bic.w	r3, r3, #1
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80067b6:	e002      	b.n	80067be <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80067b8:	bf00      	nop
 80067ba:	e000      	b.n	80067be <prvProcessReceivedCommands+0x1a6>
					break;
 80067bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067be:	4b08      	ldr	r3, [pc, #32]	@ (80067e0 <prvProcessReceivedCommands+0x1c8>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	1d39      	adds	r1, r7, #4
 80067c4:	2200      	movs	r2, #0
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fe fbce 	bl	8004f68 <xQueueReceive>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f47f af26 	bne.w	8006620 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop
 80067d8:	3730      	adds	r7, #48	@ 0x30
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20002118 	.word	0x20002118

080067e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067ea:	e049      	b.n	8006880 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067ec:	4b2e      	ldr	r3, [pc, #184]	@ (80068a8 <prvSwitchTimerLists+0xc4>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f6:	4b2c      	ldr	r3, [pc, #176]	@ (80068a8 <prvSwitchTimerLists+0xc4>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	3304      	adds	r3, #4
 8006804:	4618      	mov	r0, r3
 8006806:	f7fe f8db 	bl	80049c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b00      	cmp	r3, #0
 800681e:	d02f      	beq.n	8006880 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	4413      	add	r3, r2
 8006828:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	429a      	cmp	r2, r3
 8006830:	d90e      	bls.n	8006850 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800683e:	4b1a      	ldr	r3, [pc, #104]	@ (80068a8 <prvSwitchTimerLists+0xc4>)
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3304      	adds	r3, #4
 8006846:	4619      	mov	r1, r3
 8006848:	4610      	mov	r0, r2
 800684a:	f7fe f880 	bl	800494e <vListInsert>
 800684e:	e017      	b.n	8006880 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006850:	2300      	movs	r3, #0
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	2300      	movs	r3, #0
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	2100      	movs	r1, #0
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f7ff fd58 	bl	8006310 <xTimerGenericCommand>
 8006860:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10b      	bne.n	8006880 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	603b      	str	r3, [r7, #0]
}
 800687a:	bf00      	nop
 800687c:	bf00      	nop
 800687e:	e7fd      	b.n	800687c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006880:	4b09      	ldr	r3, [pc, #36]	@ (80068a8 <prvSwitchTimerLists+0xc4>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1b0      	bne.n	80067ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800688a:	4b07      	ldr	r3, [pc, #28]	@ (80068a8 <prvSwitchTimerLists+0xc4>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006890:	4b06      	ldr	r3, [pc, #24]	@ (80068ac <prvSwitchTimerLists+0xc8>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a04      	ldr	r2, [pc, #16]	@ (80068a8 <prvSwitchTimerLists+0xc4>)
 8006896:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006898:	4a04      	ldr	r2, [pc, #16]	@ (80068ac <prvSwitchTimerLists+0xc8>)
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	6013      	str	r3, [r2, #0]
}
 800689e:	bf00      	nop
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	20002110 	.word	0x20002110
 80068ac:	20002114 	.word	0x20002114

080068b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80068b6:	f000 f96f 	bl	8006b98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80068ba:	4b15      	ldr	r3, [pc, #84]	@ (8006910 <prvCheckForValidListAndQueue+0x60>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d120      	bne.n	8006904 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80068c2:	4814      	ldr	r0, [pc, #80]	@ (8006914 <prvCheckForValidListAndQueue+0x64>)
 80068c4:	f7fd fff2 	bl	80048ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80068c8:	4813      	ldr	r0, [pc, #76]	@ (8006918 <prvCheckForValidListAndQueue+0x68>)
 80068ca:	f7fd ffef 	bl	80048ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80068ce:	4b13      	ldr	r3, [pc, #76]	@ (800691c <prvCheckForValidListAndQueue+0x6c>)
 80068d0:	4a10      	ldr	r2, [pc, #64]	@ (8006914 <prvCheckForValidListAndQueue+0x64>)
 80068d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80068d4:	4b12      	ldr	r3, [pc, #72]	@ (8006920 <prvCheckForValidListAndQueue+0x70>)
 80068d6:	4a10      	ldr	r2, [pc, #64]	@ (8006918 <prvCheckForValidListAndQueue+0x68>)
 80068d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068da:	2300      	movs	r3, #0
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	4b11      	ldr	r3, [pc, #68]	@ (8006924 <prvCheckForValidListAndQueue+0x74>)
 80068e0:	4a11      	ldr	r2, [pc, #68]	@ (8006928 <prvCheckForValidListAndQueue+0x78>)
 80068e2:	2110      	movs	r1, #16
 80068e4:	200a      	movs	r0, #10
 80068e6:	f7fe f8ff 	bl	8004ae8 <xQueueGenericCreateStatic>
 80068ea:	4603      	mov	r3, r0
 80068ec:	4a08      	ldr	r2, [pc, #32]	@ (8006910 <prvCheckForValidListAndQueue+0x60>)
 80068ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068f0:	4b07      	ldr	r3, [pc, #28]	@ (8006910 <prvCheckForValidListAndQueue+0x60>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d005      	beq.n	8006904 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068f8:	4b05      	ldr	r3, [pc, #20]	@ (8006910 <prvCheckForValidListAndQueue+0x60>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	490b      	ldr	r1, [pc, #44]	@ (800692c <prvCheckForValidListAndQueue+0x7c>)
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fe fd24 	bl	800534c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006904:	f000 f97a 	bl	8006bfc <vPortExitCritical>
}
 8006908:	bf00      	nop
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	20002118 	.word	0x20002118
 8006914:	200020e8 	.word	0x200020e8
 8006918:	200020fc 	.word	0x200020fc
 800691c:	20002110 	.word	0x20002110
 8006920:	20002114 	.word	0x20002114
 8006924:	200021c4 	.word	0x200021c4
 8006928:	20002124 	.word	0x20002124
 800692c:	08007548 	.word	0x08007548

08006930 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	3b04      	subs	r3, #4
 8006940:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006948:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3b04      	subs	r3, #4
 800694e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f023 0201 	bic.w	r2, r3, #1
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3b04      	subs	r3, #4
 800695e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006960:	4a0c      	ldr	r2, [pc, #48]	@ (8006994 <pxPortInitialiseStack+0x64>)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	3b14      	subs	r3, #20
 800696a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	3b04      	subs	r3, #4
 8006976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f06f 0202 	mvn.w	r2, #2
 800697e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	3b20      	subs	r3, #32
 8006984:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006986:	68fb      	ldr	r3, [r7, #12]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	08006999 	.word	0x08006999

08006998 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800699e:	2300      	movs	r3, #0
 80069a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069a2:	4b13      	ldr	r3, [pc, #76]	@ (80069f0 <prvTaskExitError+0x58>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069aa:	d00b      	beq.n	80069c4 <prvTaskExitError+0x2c>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	60fb      	str	r3, [r7, #12]
}
 80069be:	bf00      	nop
 80069c0:	bf00      	nop
 80069c2:	e7fd      	b.n	80069c0 <prvTaskExitError+0x28>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	60bb      	str	r3, [r7, #8]
}
 80069d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069d8:	bf00      	nop
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d0fc      	beq.n	80069da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069e0:	bf00      	nop
 80069e2:	bf00      	nop
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	200001b8 	.word	0x200001b8
	...

08006a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a00:	4b07      	ldr	r3, [pc, #28]	@ (8006a20 <pxCurrentTCBConst2>)
 8006a02:	6819      	ldr	r1, [r3, #0]
 8006a04:	6808      	ldr	r0, [r1, #0]
 8006a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0a:	f380 8809 	msr	PSP, r0
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f04f 0000 	mov.w	r0, #0
 8006a16:	f380 8811 	msr	BASEPRI, r0
 8006a1a:	4770      	bx	lr
 8006a1c:	f3af 8000 	nop.w

08006a20 <pxCurrentTCBConst2>:
 8006a20:	20001be8 	.word	0x20001be8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop

08006a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a28:	4808      	ldr	r0, [pc, #32]	@ (8006a4c <prvPortStartFirstTask+0x24>)
 8006a2a:	6800      	ldr	r0, [r0, #0]
 8006a2c:	6800      	ldr	r0, [r0, #0]
 8006a2e:	f380 8808 	msr	MSP, r0
 8006a32:	f04f 0000 	mov.w	r0, #0
 8006a36:	f380 8814 	msr	CONTROL, r0
 8006a3a:	b662      	cpsie	i
 8006a3c:	b661      	cpsie	f
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	df00      	svc	0
 8006a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a4a:	bf00      	nop
 8006a4c:	e000ed08 	.word	0xe000ed08

08006a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a56:	4b47      	ldr	r3, [pc, #284]	@ (8006b74 <xPortStartScheduler+0x124>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a47      	ldr	r2, [pc, #284]	@ (8006b78 <xPortStartScheduler+0x128>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d10b      	bne.n	8006a78 <xPortStartScheduler+0x28>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	613b      	str	r3, [r7, #16]
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	e7fd      	b.n	8006a74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a78:	4b3e      	ldr	r3, [pc, #248]	@ (8006b74 <xPortStartScheduler+0x124>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a3f      	ldr	r2, [pc, #252]	@ (8006b7c <xPortStartScheduler+0x12c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d10b      	bne.n	8006a9a <xPortStartScheduler+0x4a>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	60fb      	str	r3, [r7, #12]
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	e7fd      	b.n	8006a96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a9a:	4b39      	ldr	r3, [pc, #228]	@ (8006b80 <xPortStartScheduler+0x130>)
 8006a9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	22ff      	movs	r2, #255	@ 0xff
 8006aaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	4b31      	ldr	r3, [pc, #196]	@ (8006b84 <xPortStartScheduler+0x134>)
 8006ac0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ac2:	4b31      	ldr	r3, [pc, #196]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006ac4:	2207      	movs	r2, #7
 8006ac6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ac8:	e009      	b.n	8006ade <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006aca:	4b2f      	ldr	r3, [pc, #188]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006ad2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ade:	78fb      	ldrb	r3, [r7, #3]
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ae6:	2b80      	cmp	r3, #128	@ 0x80
 8006ae8:	d0ef      	beq.n	8006aca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006aea:	4b27      	ldr	r3, [pc, #156]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f1c3 0307 	rsb	r3, r3, #7
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d00b      	beq.n	8006b0e <xPortStartScheduler+0xbe>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	60bb      	str	r3, [r7, #8]
}
 8006b08:	bf00      	nop
 8006b0a:	bf00      	nop
 8006b0c:	e7fd      	b.n	8006b0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	021b      	lsls	r3, r3, #8
 8006b14:	4a1c      	ldr	r2, [pc, #112]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006b16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b18:	4b1b      	ldr	r3, [pc, #108]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b20:	4a19      	ldr	r2, [pc, #100]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006b22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b2c:	4b17      	ldr	r3, [pc, #92]	@ (8006b8c <xPortStartScheduler+0x13c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a16      	ldr	r2, [pc, #88]	@ (8006b8c <xPortStartScheduler+0x13c>)
 8006b32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b38:	4b14      	ldr	r3, [pc, #80]	@ (8006b8c <xPortStartScheduler+0x13c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a13      	ldr	r2, [pc, #76]	@ (8006b8c <xPortStartScheduler+0x13c>)
 8006b3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006b42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b44:	f000 f8da 	bl	8006cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b48:	4b11      	ldr	r3, [pc, #68]	@ (8006b90 <xPortStartScheduler+0x140>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b4e:	f000 f8f9 	bl	8006d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b52:	4b10      	ldr	r3, [pc, #64]	@ (8006b94 <xPortStartScheduler+0x144>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a0f      	ldr	r2, [pc, #60]	@ (8006b94 <xPortStartScheduler+0x144>)
 8006b58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006b5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b5e:	f7ff ff63 	bl	8006a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b62:	f7ff f82b 	bl	8005bbc <vTaskSwitchContext>
	prvTaskExitError();
 8006b66:	f7ff ff17 	bl	8006998 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	e000ed00 	.word	0xe000ed00
 8006b78:	410fc271 	.word	0x410fc271
 8006b7c:	410fc270 	.word	0x410fc270
 8006b80:	e000e400 	.word	0xe000e400
 8006b84:	20002214 	.word	0x20002214
 8006b88:	20002218 	.word	0x20002218
 8006b8c:	e000ed20 	.word	0xe000ed20
 8006b90:	200001b8 	.word	0x200001b8
 8006b94:	e000ef34 	.word	0xe000ef34

08006b98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	607b      	str	r3, [r7, #4]
}
 8006bb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bb2:	4b10      	ldr	r3, [pc, #64]	@ (8006bf4 <vPortEnterCritical+0x5c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8006bf4 <vPortEnterCritical+0x5c>)
 8006bba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf4 <vPortEnterCritical+0x5c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d110      	bne.n	8006be6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf8 <vPortEnterCritical+0x60>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00b      	beq.n	8006be6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	603b      	str	r3, [r7, #0]
}
 8006be0:	bf00      	nop
 8006be2:	bf00      	nop
 8006be4:	e7fd      	b.n	8006be2 <vPortEnterCritical+0x4a>
	}
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	200001b8 	.word	0x200001b8
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c02:	4b12      	ldr	r3, [pc, #72]	@ (8006c4c <vPortExitCritical+0x50>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10b      	bne.n	8006c22 <vPortExitCritical+0x26>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	607b      	str	r3, [r7, #4]
}
 8006c1c:	bf00      	nop
 8006c1e:	bf00      	nop
 8006c20:	e7fd      	b.n	8006c1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c22:	4b0a      	ldr	r3, [pc, #40]	@ (8006c4c <vPortExitCritical+0x50>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	4a08      	ldr	r2, [pc, #32]	@ (8006c4c <vPortExitCritical+0x50>)
 8006c2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c2c:	4b07      	ldr	r3, [pc, #28]	@ (8006c4c <vPortExitCritical+0x50>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d105      	bne.n	8006c40 <vPortExitCritical+0x44>
 8006c34:	2300      	movs	r3, #0
 8006c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	f383 8811 	msr	BASEPRI, r3
}
 8006c3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	200001b8 	.word	0x200001b8

08006c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c50:	f3ef 8009 	mrs	r0, PSP
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	4b15      	ldr	r3, [pc, #84]	@ (8006cb0 <pxCurrentTCBConst>)
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	f01e 0f10 	tst.w	lr, #16
 8006c60:	bf08      	it	eq
 8006c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6a:	6010      	str	r0, [r2, #0]
 8006c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006c74:	f380 8811 	msr	BASEPRI, r0
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f7fe ff9c 	bl	8005bbc <vTaskSwitchContext>
 8006c84:	f04f 0000 	mov.w	r0, #0
 8006c88:	f380 8811 	msr	BASEPRI, r0
 8006c8c:	bc09      	pop	{r0, r3}
 8006c8e:	6819      	ldr	r1, [r3, #0]
 8006c90:	6808      	ldr	r0, [r1, #0]
 8006c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c96:	f01e 0f10 	tst.w	lr, #16
 8006c9a:	bf08      	it	eq
 8006c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ca0:	f380 8809 	msr	PSP, r0
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	f3af 8000 	nop.w

08006cb0 <pxCurrentTCBConst>:
 8006cb0:	20001be8 	.word	0x20001be8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop

08006cb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	607b      	str	r3, [r7, #4]
}
 8006cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cd2:	f7fe feb9 	bl	8005a48 <xTaskIncrementTick>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cdc:	4b06      	ldr	r3, [pc, #24]	@ (8006cf8 <xPortSysTickHandler+0x40>)
 8006cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	f383 8811 	msr	BASEPRI, r3
}
 8006cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	e000ed04 	.word	0xe000ed04

08006cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d00:	4b0b      	ldr	r3, [pc, #44]	@ (8006d30 <vPortSetupTimerInterrupt+0x34>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d06:	4b0b      	ldr	r3, [pc, #44]	@ (8006d34 <vPortSetupTimerInterrupt+0x38>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d38 <vPortSetupTimerInterrupt+0x3c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a0a      	ldr	r2, [pc, #40]	@ (8006d3c <vPortSetupTimerInterrupt+0x40>)
 8006d12:	fba2 2303 	umull	r2, r3, r2, r3
 8006d16:	099b      	lsrs	r3, r3, #6
 8006d18:	4a09      	ldr	r2, [pc, #36]	@ (8006d40 <vPortSetupTimerInterrupt+0x44>)
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d1e:	4b04      	ldr	r3, [pc, #16]	@ (8006d30 <vPortSetupTimerInterrupt+0x34>)
 8006d20:	2207      	movs	r2, #7
 8006d22:	601a      	str	r2, [r3, #0]
}
 8006d24:	bf00      	nop
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	e000e010 	.word	0xe000e010
 8006d34:	e000e018 	.word	0xe000e018
 8006d38:	200001ac 	.word	0x200001ac
 8006d3c:	10624dd3 	.word	0x10624dd3
 8006d40:	e000e014 	.word	0xe000e014

08006d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006d54 <vPortEnableVFP+0x10>
 8006d48:	6801      	ldr	r1, [r0, #0]
 8006d4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006d4e:	6001      	str	r1, [r0, #0]
 8006d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d52:	bf00      	nop
 8006d54:	e000ed88 	.word	0xe000ed88

08006d58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d5e:	f3ef 8305 	mrs	r3, IPSR
 8006d62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b0f      	cmp	r3, #15
 8006d68:	d915      	bls.n	8006d96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d6a:	4a18      	ldr	r2, [pc, #96]	@ (8006dcc <vPortValidateInterruptPriority+0x74>)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4413      	add	r3, r2
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d74:	4b16      	ldr	r3, [pc, #88]	@ (8006dd0 <vPortValidateInterruptPriority+0x78>)
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	7afa      	ldrb	r2, [r7, #11]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d20b      	bcs.n	8006d96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	607b      	str	r3, [r7, #4]
}
 8006d90:	bf00      	nop
 8006d92:	bf00      	nop
 8006d94:	e7fd      	b.n	8006d92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d96:	4b0f      	ldr	r3, [pc, #60]	@ (8006dd4 <vPortValidateInterruptPriority+0x7c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8006dd8 <vPortValidateInterruptPriority+0x80>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d90b      	bls.n	8006dbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	603b      	str	r3, [r7, #0]
}
 8006db8:	bf00      	nop
 8006dba:	bf00      	nop
 8006dbc:	e7fd      	b.n	8006dba <vPortValidateInterruptPriority+0x62>
	}
 8006dbe:	bf00      	nop
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	e000e3f0 	.word	0xe000e3f0
 8006dd0:	20002214 	.word	0x20002214
 8006dd4:	e000ed0c 	.word	0xe000ed0c
 8006dd8:	20002218 	.word	0x20002218

08006ddc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08a      	sub	sp, #40	@ 0x28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006de4:	2300      	movs	r3, #0
 8006de6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006de8:	f7fe fd72 	bl	80058d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006dec:	4b5c      	ldr	r3, [pc, #368]	@ (8006f60 <pvPortMalloc+0x184>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006df4:	f000 f924 	bl	8007040 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006df8:	4b5a      	ldr	r3, [pc, #360]	@ (8006f64 <pvPortMalloc+0x188>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4013      	ands	r3, r2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f040 8095 	bne.w	8006f30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d01e      	beq.n	8006e4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006e0c:	2208      	movs	r2, #8
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4413      	add	r3, r2
 8006e12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d015      	beq.n	8006e4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f023 0307 	bic.w	r3, r3, #7
 8006e24:	3308      	adds	r3, #8
 8006e26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f003 0307 	and.w	r3, r3, #7
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00b      	beq.n	8006e4a <pvPortMalloc+0x6e>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	617b      	str	r3, [r7, #20]
}
 8006e44:	bf00      	nop
 8006e46:	bf00      	nop
 8006e48:	e7fd      	b.n	8006e46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d06f      	beq.n	8006f30 <pvPortMalloc+0x154>
 8006e50:	4b45      	ldr	r3, [pc, #276]	@ (8006f68 <pvPortMalloc+0x18c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d86a      	bhi.n	8006f30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e5a:	4b44      	ldr	r3, [pc, #272]	@ (8006f6c <pvPortMalloc+0x190>)
 8006e5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e5e:	4b43      	ldr	r3, [pc, #268]	@ (8006f6c <pvPortMalloc+0x190>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e64:	e004      	b.n	8006e70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d903      	bls.n	8006e82 <pvPortMalloc+0xa6>
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1f1      	bne.n	8006e66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e82:	4b37      	ldr	r3, [pc, #220]	@ (8006f60 <pvPortMalloc+0x184>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d051      	beq.n	8006f30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e8c:	6a3b      	ldr	r3, [r7, #32]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2208      	movs	r2, #8
 8006e92:	4413      	add	r3, r2
 8006e94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	1ad2      	subs	r2, r2, r3
 8006ea6:	2308      	movs	r3, #8
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d920      	bls.n	8006ef0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	f003 0307 	and.w	r3, r3, #7
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00b      	beq.n	8006ed8 <pvPortMalloc+0xfc>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	613b      	str	r3, [r7, #16]
}
 8006ed2:	bf00      	nop
 8006ed4:	bf00      	nop
 8006ed6:	e7fd      	b.n	8006ed4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	1ad2      	subs	r2, r2, r3
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006eea:	69b8      	ldr	r0, [r7, #24]
 8006eec:	f000 f90a 	bl	8007104 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f68 <pvPortMalloc+0x18c>)
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	4a1b      	ldr	r2, [pc, #108]	@ (8006f68 <pvPortMalloc+0x18c>)
 8006efc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006efe:	4b1a      	ldr	r3, [pc, #104]	@ (8006f68 <pvPortMalloc+0x18c>)
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	4b1b      	ldr	r3, [pc, #108]	@ (8006f70 <pvPortMalloc+0x194>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d203      	bcs.n	8006f12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f0a:	4b17      	ldr	r3, [pc, #92]	@ (8006f68 <pvPortMalloc+0x18c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a18      	ldr	r2, [pc, #96]	@ (8006f70 <pvPortMalloc+0x194>)
 8006f10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	4b13      	ldr	r3, [pc, #76]	@ (8006f64 <pvPortMalloc+0x188>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f26:	4b13      	ldr	r3, [pc, #76]	@ (8006f74 <pvPortMalloc+0x198>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	4a11      	ldr	r2, [pc, #68]	@ (8006f74 <pvPortMalloc+0x198>)
 8006f2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f30:	f7fe fcdc 	bl	80058ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00b      	beq.n	8006f56 <pvPortMalloc+0x17a>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	60fb      	str	r3, [r7, #12]
}
 8006f50:	bf00      	nop
 8006f52:	bf00      	nop
 8006f54:	e7fd      	b.n	8006f52 <pvPortMalloc+0x176>
	return pvReturn;
 8006f56:	69fb      	ldr	r3, [r7, #28]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3728      	adds	r7, #40	@ 0x28
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	20005e24 	.word	0x20005e24
 8006f64:	20005e38 	.word	0x20005e38
 8006f68:	20005e28 	.word	0x20005e28
 8006f6c:	20005e1c 	.word	0x20005e1c
 8006f70:	20005e2c 	.word	0x20005e2c
 8006f74:	20005e30 	.word	0x20005e30

08006f78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d04f      	beq.n	800702a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f8a:	2308      	movs	r3, #8
 8006f8c:	425b      	negs	r3, r3
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	4413      	add	r3, r2
 8006f92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	4b25      	ldr	r3, [pc, #148]	@ (8007034 <vPortFree+0xbc>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10b      	bne.n	8006fbe <vPortFree+0x46>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	60fb      	str	r3, [r7, #12]
}
 8006fb8:	bf00      	nop
 8006fba:	bf00      	nop
 8006fbc:	e7fd      	b.n	8006fba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00b      	beq.n	8006fde <vPortFree+0x66>
	__asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	60bb      	str	r3, [r7, #8]
}
 8006fd8:	bf00      	nop
 8006fda:	bf00      	nop
 8006fdc:	e7fd      	b.n	8006fda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	4b14      	ldr	r3, [pc, #80]	@ (8007034 <vPortFree+0xbc>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d01e      	beq.n	800702a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d11a      	bne.n	800702a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8007034 <vPortFree+0xbc>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	43db      	mvns	r3, r3
 8006ffe:	401a      	ands	r2, r3
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007004:	f7fe fc64 	bl	80058d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	4b0a      	ldr	r3, [pc, #40]	@ (8007038 <vPortFree+0xc0>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4413      	add	r3, r2
 8007012:	4a09      	ldr	r2, [pc, #36]	@ (8007038 <vPortFree+0xc0>)
 8007014:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007016:	6938      	ldr	r0, [r7, #16]
 8007018:	f000 f874 	bl	8007104 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800701c:	4b07      	ldr	r3, [pc, #28]	@ (800703c <vPortFree+0xc4>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3301      	adds	r3, #1
 8007022:	4a06      	ldr	r2, [pc, #24]	@ (800703c <vPortFree+0xc4>)
 8007024:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007026:	f7fe fc61 	bl	80058ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800702a:	bf00      	nop
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20005e38 	.word	0x20005e38
 8007038:	20005e28 	.word	0x20005e28
 800703c:	20005e34 	.word	0x20005e34

08007040 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007046:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800704a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800704c:	4b27      	ldr	r3, [pc, #156]	@ (80070ec <prvHeapInit+0xac>)
 800704e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f003 0307 	and.w	r3, r3, #7
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00c      	beq.n	8007074 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3307      	adds	r3, #7
 800705e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f023 0307 	bic.w	r3, r3, #7
 8007066:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	4a1f      	ldr	r2, [pc, #124]	@ (80070ec <prvHeapInit+0xac>)
 8007070:	4413      	add	r3, r2
 8007072:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007078:	4a1d      	ldr	r2, [pc, #116]	@ (80070f0 <prvHeapInit+0xb0>)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800707e:	4b1c      	ldr	r3, [pc, #112]	@ (80070f0 <prvHeapInit+0xb0>)
 8007080:	2200      	movs	r2, #0
 8007082:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	4413      	add	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800708c:	2208      	movs	r2, #8
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1a9b      	subs	r3, r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0307 	bic.w	r3, r3, #7
 800709a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4a15      	ldr	r2, [pc, #84]	@ (80070f4 <prvHeapInit+0xb4>)
 80070a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070a2:	4b14      	ldr	r3, [pc, #80]	@ (80070f4 <prvHeapInit+0xb4>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2200      	movs	r2, #0
 80070a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070aa:	4b12      	ldr	r3, [pc, #72]	@ (80070f4 <prvHeapInit+0xb4>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2200      	movs	r2, #0
 80070b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	1ad2      	subs	r2, r2, r3
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070c0:	4b0c      	ldr	r3, [pc, #48]	@ (80070f4 <prvHeapInit+0xb4>)
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	4a0a      	ldr	r2, [pc, #40]	@ (80070f8 <prvHeapInit+0xb8>)
 80070ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	4a09      	ldr	r2, [pc, #36]	@ (80070fc <prvHeapInit+0xbc>)
 80070d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070d8:	4b09      	ldr	r3, [pc, #36]	@ (8007100 <prvHeapInit+0xc0>)
 80070da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80070de:	601a      	str	r2, [r3, #0]
}
 80070e0:	bf00      	nop
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	2000221c 	.word	0x2000221c
 80070f0:	20005e1c 	.word	0x20005e1c
 80070f4:	20005e24 	.word	0x20005e24
 80070f8:	20005e2c 	.word	0x20005e2c
 80070fc:	20005e28 	.word	0x20005e28
 8007100:	20005e38 	.word	0x20005e38

08007104 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800710c:	4b28      	ldr	r3, [pc, #160]	@ (80071b0 <prvInsertBlockIntoFreeList+0xac>)
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	e002      	b.n	8007118 <prvInsertBlockIntoFreeList+0x14>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	429a      	cmp	r2, r3
 8007120:	d8f7      	bhi.n	8007112 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	4413      	add	r3, r2
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	429a      	cmp	r2, r3
 8007132:	d108      	bne.n	8007146 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	441a      	add	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	441a      	add	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	429a      	cmp	r2, r3
 8007158:	d118      	bne.n	800718c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	4b15      	ldr	r3, [pc, #84]	@ (80071b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d00d      	beq.n	8007182 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	441a      	add	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	e008      	b.n	8007194 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007182:	4b0c      	ldr	r3, [pc, #48]	@ (80071b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	601a      	str	r2, [r3, #0]
 800718a:	e003      	b.n	8007194 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	429a      	cmp	r2, r3
 800719a:	d002      	beq.n	80071a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071a2:	bf00      	nop
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	20005e1c 	.word	0x20005e1c
 80071b4:	20005e24 	.word	0x20005e24

080071b8 <__itoa>:
 80071b8:	1e93      	subs	r3, r2, #2
 80071ba:	2b22      	cmp	r3, #34	@ 0x22
 80071bc:	b510      	push	{r4, lr}
 80071be:	460c      	mov	r4, r1
 80071c0:	d904      	bls.n	80071cc <__itoa+0x14>
 80071c2:	2300      	movs	r3, #0
 80071c4:	700b      	strb	r3, [r1, #0]
 80071c6:	461c      	mov	r4, r3
 80071c8:	4620      	mov	r0, r4
 80071ca:	bd10      	pop	{r4, pc}
 80071cc:	2a0a      	cmp	r2, #10
 80071ce:	d109      	bne.n	80071e4 <__itoa+0x2c>
 80071d0:	2800      	cmp	r0, #0
 80071d2:	da07      	bge.n	80071e4 <__itoa+0x2c>
 80071d4:	232d      	movs	r3, #45	@ 0x2d
 80071d6:	700b      	strb	r3, [r1, #0]
 80071d8:	4240      	negs	r0, r0
 80071da:	2101      	movs	r1, #1
 80071dc:	4421      	add	r1, r4
 80071de:	f000 f805 	bl	80071ec <__utoa>
 80071e2:	e7f1      	b.n	80071c8 <__itoa+0x10>
 80071e4:	2100      	movs	r1, #0
 80071e6:	e7f9      	b.n	80071dc <__itoa+0x24>

080071e8 <itoa>:
 80071e8:	f7ff bfe6 	b.w	80071b8 <__itoa>

080071ec <__utoa>:
 80071ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ee:	4c1f      	ldr	r4, [pc, #124]	@ (800726c <__utoa+0x80>)
 80071f0:	b08b      	sub	sp, #44	@ 0x2c
 80071f2:	4605      	mov	r5, r0
 80071f4:	460b      	mov	r3, r1
 80071f6:	466e      	mov	r6, sp
 80071f8:	f104 0c20 	add.w	ip, r4, #32
 80071fc:	6820      	ldr	r0, [r4, #0]
 80071fe:	6861      	ldr	r1, [r4, #4]
 8007200:	4637      	mov	r7, r6
 8007202:	c703      	stmia	r7!, {r0, r1}
 8007204:	3408      	adds	r4, #8
 8007206:	4564      	cmp	r4, ip
 8007208:	463e      	mov	r6, r7
 800720a:	d1f7      	bne.n	80071fc <__utoa+0x10>
 800720c:	7921      	ldrb	r1, [r4, #4]
 800720e:	7139      	strb	r1, [r7, #4]
 8007210:	1e91      	subs	r1, r2, #2
 8007212:	6820      	ldr	r0, [r4, #0]
 8007214:	6038      	str	r0, [r7, #0]
 8007216:	2922      	cmp	r1, #34	@ 0x22
 8007218:	f04f 0100 	mov.w	r1, #0
 800721c:	d904      	bls.n	8007228 <__utoa+0x3c>
 800721e:	7019      	strb	r1, [r3, #0]
 8007220:	460b      	mov	r3, r1
 8007222:	4618      	mov	r0, r3
 8007224:	b00b      	add	sp, #44	@ 0x2c
 8007226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007228:	1e58      	subs	r0, r3, #1
 800722a:	4684      	mov	ip, r0
 800722c:	fbb5 f7f2 	udiv	r7, r5, r2
 8007230:	fb02 5617 	mls	r6, r2, r7, r5
 8007234:	3628      	adds	r6, #40	@ 0x28
 8007236:	446e      	add	r6, sp
 8007238:	460c      	mov	r4, r1
 800723a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800723e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007242:	462e      	mov	r6, r5
 8007244:	42b2      	cmp	r2, r6
 8007246:	f101 0101 	add.w	r1, r1, #1
 800724a:	463d      	mov	r5, r7
 800724c:	d9ee      	bls.n	800722c <__utoa+0x40>
 800724e:	2200      	movs	r2, #0
 8007250:	545a      	strb	r2, [r3, r1]
 8007252:	1919      	adds	r1, r3, r4
 8007254:	1aa5      	subs	r5, r4, r2
 8007256:	42aa      	cmp	r2, r5
 8007258:	dae3      	bge.n	8007222 <__utoa+0x36>
 800725a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800725e:	780e      	ldrb	r6, [r1, #0]
 8007260:	7006      	strb	r6, [r0, #0]
 8007262:	3201      	adds	r2, #1
 8007264:	f801 5901 	strb.w	r5, [r1], #-1
 8007268:	e7f4      	b.n	8007254 <__utoa+0x68>
 800726a:	bf00      	nop
 800726c:	08007778 	.word	0x08007778

08007270 <memset>:
 8007270:	4402      	add	r2, r0
 8007272:	4603      	mov	r3, r0
 8007274:	4293      	cmp	r3, r2
 8007276:	d100      	bne.n	800727a <memset+0xa>
 8007278:	4770      	bx	lr
 800727a:	f803 1b01 	strb.w	r1, [r3], #1
 800727e:	e7f9      	b.n	8007274 <memset+0x4>

08007280 <_reclaim_reent>:
 8007280:	4b29      	ldr	r3, [pc, #164]	@ (8007328 <_reclaim_reent+0xa8>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4283      	cmp	r3, r0
 8007286:	b570      	push	{r4, r5, r6, lr}
 8007288:	4604      	mov	r4, r0
 800728a:	d04b      	beq.n	8007324 <_reclaim_reent+0xa4>
 800728c:	69c3      	ldr	r3, [r0, #28]
 800728e:	b1ab      	cbz	r3, 80072bc <_reclaim_reent+0x3c>
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	b16b      	cbz	r3, 80072b0 <_reclaim_reent+0x30>
 8007294:	2500      	movs	r5, #0
 8007296:	69e3      	ldr	r3, [r4, #28]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	5959      	ldr	r1, [r3, r5]
 800729c:	2900      	cmp	r1, #0
 800729e:	d13b      	bne.n	8007318 <_reclaim_reent+0x98>
 80072a0:	3504      	adds	r5, #4
 80072a2:	2d80      	cmp	r5, #128	@ 0x80
 80072a4:	d1f7      	bne.n	8007296 <_reclaim_reent+0x16>
 80072a6:	69e3      	ldr	r3, [r4, #28]
 80072a8:	4620      	mov	r0, r4
 80072aa:	68d9      	ldr	r1, [r3, #12]
 80072ac:	f000 f872 	bl	8007394 <_free_r>
 80072b0:	69e3      	ldr	r3, [r4, #28]
 80072b2:	6819      	ldr	r1, [r3, #0]
 80072b4:	b111      	cbz	r1, 80072bc <_reclaim_reent+0x3c>
 80072b6:	4620      	mov	r0, r4
 80072b8:	f000 f86c 	bl	8007394 <_free_r>
 80072bc:	6961      	ldr	r1, [r4, #20]
 80072be:	b111      	cbz	r1, 80072c6 <_reclaim_reent+0x46>
 80072c0:	4620      	mov	r0, r4
 80072c2:	f000 f867 	bl	8007394 <_free_r>
 80072c6:	69e1      	ldr	r1, [r4, #28]
 80072c8:	b111      	cbz	r1, 80072d0 <_reclaim_reent+0x50>
 80072ca:	4620      	mov	r0, r4
 80072cc:	f000 f862 	bl	8007394 <_free_r>
 80072d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80072d2:	b111      	cbz	r1, 80072da <_reclaim_reent+0x5a>
 80072d4:	4620      	mov	r0, r4
 80072d6:	f000 f85d 	bl	8007394 <_free_r>
 80072da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072dc:	b111      	cbz	r1, 80072e4 <_reclaim_reent+0x64>
 80072de:	4620      	mov	r0, r4
 80072e0:	f000 f858 	bl	8007394 <_free_r>
 80072e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80072e6:	b111      	cbz	r1, 80072ee <_reclaim_reent+0x6e>
 80072e8:	4620      	mov	r0, r4
 80072ea:	f000 f853 	bl	8007394 <_free_r>
 80072ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80072f0:	b111      	cbz	r1, 80072f8 <_reclaim_reent+0x78>
 80072f2:	4620      	mov	r0, r4
 80072f4:	f000 f84e 	bl	8007394 <_free_r>
 80072f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80072fa:	b111      	cbz	r1, 8007302 <_reclaim_reent+0x82>
 80072fc:	4620      	mov	r0, r4
 80072fe:	f000 f849 	bl	8007394 <_free_r>
 8007302:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007304:	b111      	cbz	r1, 800730c <_reclaim_reent+0x8c>
 8007306:	4620      	mov	r0, r4
 8007308:	f000 f844 	bl	8007394 <_free_r>
 800730c:	6a23      	ldr	r3, [r4, #32]
 800730e:	b14b      	cbz	r3, 8007324 <_reclaim_reent+0xa4>
 8007310:	4620      	mov	r0, r4
 8007312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007316:	4718      	bx	r3
 8007318:	680e      	ldr	r6, [r1, #0]
 800731a:	4620      	mov	r0, r4
 800731c:	f000 f83a 	bl	8007394 <_free_r>
 8007320:	4631      	mov	r1, r6
 8007322:	e7bb      	b.n	800729c <_reclaim_reent+0x1c>
 8007324:	bd70      	pop	{r4, r5, r6, pc}
 8007326:	bf00      	nop
 8007328:	200001bc 	.word	0x200001bc

0800732c <__libc_init_array>:
 800732c:	b570      	push	{r4, r5, r6, lr}
 800732e:	4d0d      	ldr	r5, [pc, #52]	@ (8007364 <__libc_init_array+0x38>)
 8007330:	4c0d      	ldr	r4, [pc, #52]	@ (8007368 <__libc_init_array+0x3c>)
 8007332:	1b64      	subs	r4, r4, r5
 8007334:	10a4      	asrs	r4, r4, #2
 8007336:	2600      	movs	r6, #0
 8007338:	42a6      	cmp	r6, r4
 800733a:	d109      	bne.n	8007350 <__libc_init_array+0x24>
 800733c:	4d0b      	ldr	r5, [pc, #44]	@ (800736c <__libc_init_array+0x40>)
 800733e:	4c0c      	ldr	r4, [pc, #48]	@ (8007370 <__libc_init_array+0x44>)
 8007340:	f000 f87e 	bl	8007440 <_init>
 8007344:	1b64      	subs	r4, r4, r5
 8007346:	10a4      	asrs	r4, r4, #2
 8007348:	2600      	movs	r6, #0
 800734a:	42a6      	cmp	r6, r4
 800734c:	d105      	bne.n	800735a <__libc_init_array+0x2e>
 800734e:	bd70      	pop	{r4, r5, r6, pc}
 8007350:	f855 3b04 	ldr.w	r3, [r5], #4
 8007354:	4798      	blx	r3
 8007356:	3601      	adds	r6, #1
 8007358:	e7ee      	b.n	8007338 <__libc_init_array+0xc>
 800735a:	f855 3b04 	ldr.w	r3, [r5], #4
 800735e:	4798      	blx	r3
 8007360:	3601      	adds	r6, #1
 8007362:	e7f2      	b.n	800734a <__libc_init_array+0x1e>
 8007364:	080077a8 	.word	0x080077a8
 8007368:	080077a8 	.word	0x080077a8
 800736c:	080077a8 	.word	0x080077a8
 8007370:	080077ac 	.word	0x080077ac

08007374 <__retarget_lock_acquire_recursive>:
 8007374:	4770      	bx	lr

08007376 <__retarget_lock_release_recursive>:
 8007376:	4770      	bx	lr

08007378 <memcpy>:
 8007378:	440a      	add	r2, r1
 800737a:	4291      	cmp	r1, r2
 800737c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007380:	d100      	bne.n	8007384 <memcpy+0xc>
 8007382:	4770      	bx	lr
 8007384:	b510      	push	{r4, lr}
 8007386:	f811 4b01 	ldrb.w	r4, [r1], #1
 800738a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800738e:	4291      	cmp	r1, r2
 8007390:	d1f9      	bne.n	8007386 <memcpy+0xe>
 8007392:	bd10      	pop	{r4, pc}

08007394 <_free_r>:
 8007394:	b538      	push	{r3, r4, r5, lr}
 8007396:	4605      	mov	r5, r0
 8007398:	2900      	cmp	r1, #0
 800739a:	d041      	beq.n	8007420 <_free_r+0x8c>
 800739c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073a0:	1f0c      	subs	r4, r1, #4
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	bfb8      	it	lt
 80073a6:	18e4      	addlt	r4, r4, r3
 80073a8:	f000 f83e 	bl	8007428 <__malloc_lock>
 80073ac:	4a1d      	ldr	r2, [pc, #116]	@ (8007424 <_free_r+0x90>)
 80073ae:	6813      	ldr	r3, [r2, #0]
 80073b0:	b933      	cbnz	r3, 80073c0 <_free_r+0x2c>
 80073b2:	6063      	str	r3, [r4, #4]
 80073b4:	6014      	str	r4, [r2, #0]
 80073b6:	4628      	mov	r0, r5
 80073b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073bc:	f000 b83a 	b.w	8007434 <__malloc_unlock>
 80073c0:	42a3      	cmp	r3, r4
 80073c2:	d908      	bls.n	80073d6 <_free_r+0x42>
 80073c4:	6820      	ldr	r0, [r4, #0]
 80073c6:	1821      	adds	r1, r4, r0
 80073c8:	428b      	cmp	r3, r1
 80073ca:	bf01      	itttt	eq
 80073cc:	6819      	ldreq	r1, [r3, #0]
 80073ce:	685b      	ldreq	r3, [r3, #4]
 80073d0:	1809      	addeq	r1, r1, r0
 80073d2:	6021      	streq	r1, [r4, #0]
 80073d4:	e7ed      	b.n	80073b2 <_free_r+0x1e>
 80073d6:	461a      	mov	r2, r3
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	b10b      	cbz	r3, 80073e0 <_free_r+0x4c>
 80073dc:	42a3      	cmp	r3, r4
 80073de:	d9fa      	bls.n	80073d6 <_free_r+0x42>
 80073e0:	6811      	ldr	r1, [r2, #0]
 80073e2:	1850      	adds	r0, r2, r1
 80073e4:	42a0      	cmp	r0, r4
 80073e6:	d10b      	bne.n	8007400 <_free_r+0x6c>
 80073e8:	6820      	ldr	r0, [r4, #0]
 80073ea:	4401      	add	r1, r0
 80073ec:	1850      	adds	r0, r2, r1
 80073ee:	4283      	cmp	r3, r0
 80073f0:	6011      	str	r1, [r2, #0]
 80073f2:	d1e0      	bne.n	80073b6 <_free_r+0x22>
 80073f4:	6818      	ldr	r0, [r3, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	6053      	str	r3, [r2, #4]
 80073fa:	4408      	add	r0, r1
 80073fc:	6010      	str	r0, [r2, #0]
 80073fe:	e7da      	b.n	80073b6 <_free_r+0x22>
 8007400:	d902      	bls.n	8007408 <_free_r+0x74>
 8007402:	230c      	movs	r3, #12
 8007404:	602b      	str	r3, [r5, #0]
 8007406:	e7d6      	b.n	80073b6 <_free_r+0x22>
 8007408:	6820      	ldr	r0, [r4, #0]
 800740a:	1821      	adds	r1, r4, r0
 800740c:	428b      	cmp	r3, r1
 800740e:	bf04      	itt	eq
 8007410:	6819      	ldreq	r1, [r3, #0]
 8007412:	685b      	ldreq	r3, [r3, #4]
 8007414:	6063      	str	r3, [r4, #4]
 8007416:	bf04      	itt	eq
 8007418:	1809      	addeq	r1, r1, r0
 800741a:	6021      	streq	r1, [r4, #0]
 800741c:	6054      	str	r4, [r2, #4]
 800741e:	e7ca      	b.n	80073b6 <_free_r+0x22>
 8007420:	bd38      	pop	{r3, r4, r5, pc}
 8007422:	bf00      	nop
 8007424:	20005f78 	.word	0x20005f78

08007428 <__malloc_lock>:
 8007428:	4801      	ldr	r0, [pc, #4]	@ (8007430 <__malloc_lock+0x8>)
 800742a:	f7ff bfa3 	b.w	8007374 <__retarget_lock_acquire_recursive>
 800742e:	bf00      	nop
 8007430:	20005f74 	.word	0x20005f74

08007434 <__malloc_unlock>:
 8007434:	4801      	ldr	r0, [pc, #4]	@ (800743c <__malloc_unlock+0x8>)
 8007436:	f7ff bf9e 	b.w	8007376 <__retarget_lock_release_recursive>
 800743a:	bf00      	nop
 800743c:	20005f74 	.word	0x20005f74

08007440 <_init>:
 8007440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007442:	bf00      	nop
 8007444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007446:	bc08      	pop	{r3}
 8007448:	469e      	mov	lr, r3
 800744a:	4770      	bx	lr

0800744c <_fini>:
 800744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744e:	bf00      	nop
 8007450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007452:	bc08      	pop	{r3}
 8007454:	469e      	mov	lr, r3
 8007456:	4770      	bx	lr
